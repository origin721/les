import{ad as o,ae as n,as as i,x as d,aw as c}from"./index-bOy5Y-zK.js";const f={async getList(){return await o.fetch({path:n.GET_FRIENDS})},async getByAccountId(e){return await o.fetch({path:n.GET_FRIENDS_BY_ACCOUNT_ID,body:{myAccId:e}})},async getById(e){return await o.fetch({path:n.GET_FRIEND_BY_ID,body:{friendId:e}})},async add(e){i("🌐 API friends.add СТАРТ:",e);const r=Date.now();try{let t;Array.isArray(e)?(t={path:n.ADD_FRIENDS,body:{list:e}},i("🌐 API friends.add: используем старый формат (массив)")):(t={path:n.ADD_FRIENDS,body:{list:e.friends,myAccId:e.myAccId}},i("🌐 API friends.add: используем новый формат с myAccId:",e.myAccId)),i("🌐 API friends.add: вызываем shared_worker_store.fetch с параметрами:",t);const u=await o.fetch(t);return i("✅ API friends.add УСПЕХ за",Date.now()-r,"мс, результат:",u),u}catch(t){throw d("❌ API friends.add ОШИБКА за",Date.now()-r,"мс:",t),i("❌ API friends.add полная ошибка:",t==null?void 0:t.stack),t}},async delete(e){await o.fetch({path:n.DELETE_FRIENDS,body:{ids:e}})},async put(e){await o.fetch({path:n.PUT_FRIENDS,body:{list:e}})}},y={async login(e){await o.fetch({path:n.LOGIN,body:{pass:e}})},async getList(){return await o.fetch({path:n.GET_ACCOUNTS})}},A={subscribeActiveTabsCount(e){return c("tabs.subscribeActiveTabsCount ВЫЗОВ"),o.subscribeToWorker({payload:{path:n.GET_ACTIVE_TABS_COUNT},callback:r=>{c("tabs.subscribeActiveTabsCount получены данные:",r),e(r.count)}})},createReactiveTabsCounter(){c("tabs.createReactiveTabsCounter СОЗДАНИЕ");let e=0,r=!1,t=[],u=null;const T=a=>{r!==a&&(r=a,c("tabs.createReactiveTabsCounter изменение соединения:",a),t.forEach(s=>{try{s(a)}catch(b){d("tabs.createReactiveTabsCounter ошибка в callback изменения соединения:",b)}}))},h=a=>{u&&(c("tabs.createReactiveTabsCounter переустановка подписки"),u()),u=o.subscribeToWorker({payload:{path:n.GET_ACTIVE_TABS_COUNT},callback:s=>{if(c("tabs.createReactiveTabsCounter получены данные:",s),e=s.count,T(!0),a)try{a(s.count)}catch(b){d("tabs.createReactiveTabsCounter ошибка в callback:",b)}}}),setTimeout(()=>{r||(c("tabs.createReactiveTabsCounter таймаут соединения, помечаем как отключен"),T(!1))},5e3)};return{subscribe:a=>(c("tabs.createReactiveTabsCounter.subscribe ВЫЗОВ"),h(a),()=>{c("tabs.createReactiveTabsCounter.subscribe ОТПИСКА"),u&&(u(),u=null),T(!1)}),getCurrentCount:async()=>(c("tabs.createReactiveTabsCounter.getCurrentCount ВЫЗОВ, текущее значение:",e),r?e:new Promise((a,s)=>{const b=setTimeout(()=>{s(new Error("Timeout: не удалось получить количество вкладок"))},3e3),l=o.subscribeToWorker({payload:{path:n.GET_ACTIVE_TABS_COUNT},callback:C=>{clearTimeout(b),l(),e=C.count,a(C.count)}})})),isConnected:()=>r,onConnectionChange:a=>{c("tabs.createReactiveTabsCounter.onConnectionChange ПОДПИСКА"),t.push(a);try{a(r)}catch(s){d("tabs.createReactiveTabsCounter.onConnectionChange ошибка в callback:",s)}return()=>{c("tabs.createReactiveTabsCounter.onConnectionChange ОТПИСКА");const s=t.indexOf(a);s>-1&&t.splice(s,1)}}}}},_={friends:f,accounts:y,tabs:A};export{_ as s};
