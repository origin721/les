const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/-1_tmp_test-BlnaWVRx.js","assets/index-bOy5Y-zK.js","assets/index-DRuqfa8t.css","assets/0_initialization-CS_rwdlJ.js","assets/1_accounts_friends-BsEYL5H7.js","assets/decrypt_curve25519_from_pass-Cw2vtp8e.js","assets/2_accounts_versioning-DH1u-_Hl.js","assets/3_rooms_versioning-mEFb9adH.js","assets/4_accounts_room_ids-B6I0sC9g.js"])))=>i.map(i=>d[i]);
var as=Object.defineProperty;var is=(s,t,e)=>t in s?as(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var er=(s,t,e)=>is(s,typeof t!="symbol"?t+"":t,e);import{x as y,y as v,z as cr,_ as P,A as cs,p as ye,f as O,B as st,m as g,t as M,a as A,c as l,C as b,D as u,b as d,d as dr,E as lr,G as we,g as ur,h as vr,H as q,I as ds,J as z,r as De,l as f,K as rt,L as $e,M as ls,N as gr,O as us,j as x,P as K,Q as rr,R as sr,T as or,q as vs,i as nr,S as gs}from"./index-bOy5Y-zK.js";import{B as _s}from"./BasePage-BR7agg88.js";import{s as ms}from"./index-CgV8Bpck.js";const _r=(s,t,e)=>{const r=s[t];return r?typeof r=="function"?r():Promise.resolve(r):new Promise((o,n)=>{(typeof queueMicrotask=="function"?queueMicrotask:setTimeout)(n.bind(null,new Error("Unknown variable dynamic import: "+t+(t.split("/").length!==e?". Note that variables only represent file names one level deep.":""))))})},_t={0:"0_initialization",1:"1_accounts_friends",2:"2_accounts_versioning",3:"3_rooms_versioning",4:"4_accounts_room_ids"},ar=0,Ut={MAIN_LES_STORE_V1:"main_les_store_v1",DB_STATE_MANAGER_V1:"db_state_manager_v1"},ot={IDLE:"idle",UPDATE_STARTED:"update_started",UPDATE_SUCCESS:"update_success",UPDATE_FAILED:"update_failed",CORRUPTED:"corrupted"},fs=1;function be(){return new Promise((s,t)=>{const e=indexedDB.open(Ut.DB_STATE_MANAGER_V1,fs);e.onupgradeneeded=r=>{const o=e.result;o.objectStoreNames.contains("db_states")||(o.createObjectStore("db_states",{keyPath:"id"}),v("✅ Создано хранилище db_states"))},e.onsuccess=()=>{s(e.result)},e.onerror=()=>{y("❌ Ошибка открытия базы состояний:",e.error),t(e.error)}})}async function F(s){try{const t=await be();return new Promise((e,r)=>{const o=t.transaction(["db_states"],"readonly"),a=o.objectStore("db_states").get(s);a.onsuccess=()=>{e(a.result||null)},a.onerror=()=>{r(a.error)},o.oncomplete=()=>{t.close()}})}catch(t){return y("❌ Ошибка получения состояния БД:",t),null}}async function yt(s){try{const t=await be();return new Promise((e,r)=>{const o=t.transaction(["db_states"],"readwrite"),n=o.objectStore("db_states");s.lastUpdated=Date.now();const a=n.put(s);a.onsuccess=()=>{v("✅ Состояние БД обновлено:",{dbName:s.dbName,version:s.version,status:s.status}),e()},a.onerror=()=>{y("❌ Ошибка обновления состояния БД:",a.error),r(a.error)},o.oncomplete=()=>{t.close()}})}catch(t){throw y("❌ Критическая ошибка обновления состояния БД:",t),t}}async function St(s,t,e,r,o){try{let n=await F(s);n?(n.status=t,e!==void 0&&(n.version=e),r!==void 0&&(n.targetVersion=r),o!==void 0&&(n.errorMessage=o)):n={id:s,dbName:s,version:e||0,status:t,lastUpdated:Date.now()},await yt(n)}catch(n){throw y("❌ Ошибка установки статуса обновления:",n),n}}async function mr(s){const t=await F(s);return(t==null?void 0:t.version)||0}async function fr(s){const t=await F(s);return t?t.status!==ot.UPDATE_STARTED:!0}async function Rt(){try{const s=await be();return new Promise((t,e)=>{const r=s.transaction(["db_states"],"readonly"),n=r.objectStore("db_states").getAll();n.onsuccess=()=>{t(n.result)},n.onerror=()=>{e(n.error)},r.oncomplete=()=>{s.close()}})}catch(s){return y("❌ Ошибка получения всех состояний БД:",s),[]}}async function hr(s,t,e){try{let r=await F(s);r||(r={id:s,dbName:s,version:t,status:ot.UPDATE_STARTED,lastUpdated:Date.now()}),r.migrationStartTime=Date.now(),r.targetVersion=e,r.executedMigrations=[],r.migratedTables=[],await yt(r),v("⏱️ Начат таймер миграции:",{dbName:s,fromVersion:t,toVersion:e})}catch(r){throw y("❌ Ошибка записи начала миграции:",r),r}}async function pr(s){try{const t=await F(s);if(!t||!t.migrationStartTime){y("❌ Не найдено начало миграции для расчета времени:",s);return}const e=Date.now();t.migrationEndTime=e,t.migrationDurationMs=e-t.migrationStartTime,await yt(t),v("✅ Завершен таймер миграции:",{dbName:s,durationMs:t.migrationDurationMs,durationSec:Math.round(t.migrationDurationMs/1e3)})}catch(t){throw y("❌ Ошибка записи окончания миграции:",t),t}}async function ut(s){try{const t=await F(s);if(!t||t.status!==ot.UPDATE_STARTED)return!1;const e=10*60*1e3,r=Date.now(),o=t.migrationStartTime?r-t.migrationStartTime:r-t.lastUpdated,n=o>e;return n&&v("⚠️ Обнаружена зависшая миграция:",{dbName:s,ageMinutes:Math.round(o/6e4),lastUpdated:new Date(t.lastUpdated).toISOString()}),n}catch(t){return y("❌ Ошибка проверки зависших миграций:",t),!1}}async function vt(s){try{const t=await F(s);if(!t){v("ℹ️ Состояние БД не найдено, сброс не требуется:",s);return}t.status=ot.IDLE,t.errorMessage="Миграция была сброшена из-за зависания",delete t.migrationStartTime,delete t.migrationEndTime,delete t.migrationDurationMs,delete t.targetVersion,await yt(t),v("🔄 Сброшена зависшая миграция:",s)}catch(t){throw y("❌ Ошибка сброса зависшей миграции:",t),t}}async function Sr(s){try{const t=await F(s);return t?{totalDuration:t.migrationDurationMs||0,lastMigrationDate:t.migrationEndTime?new Date(t.migrationEndTime):null,executedMigrations:t.executedMigrations||[]}:{totalDuration:0,lastMigrationDate:null,executedMigrations:[]}}catch(t){return y("❌ Ошибка получения статистики миграций:",t),{totalDuration:0,lastMigrationDate:null,executedMigrations:[]}}}const hs=Object.freeze(Object.defineProperty({__proto__:null,canStartUpdate:fr,detectStuckMigrations:ut,endMigrationTimer:pr,getAllDbStates:Rt,getDbState:F,getMigrationStats:Sr,getPreviousDbVersion:mr,resetStuckMigration:vt,setUpdateStatus:St,startMigrationTimer:hr,updateDbState:yt},Symbol.toStringTag,{value:"Module"}));class ps{static async addVersionToAllRecords(t,e,r){return new Promise((o,n)=>{try{v(`🔄 Добавление версии ${r} ко всем записям в ${e}...`);const a=t.transaction([e],"readwrite"),c=a.objectStore(e);let m=0,h=0;const _=c.getAll();_.onsuccess=()=>{const S=_.result;if(m=S.length,S.length===0){v(`✅ Store ${e} пуст, версионирование не требуется`),o();return}let w=0;S.forEach($=>{if(!$.hasOwnProperty("version")){$.version=r,w++;const I=c.put($);I.onsuccess=()=>{h++,w--,w===0&&(v(`✅ Версионирование ${e} завершено:`,{processed:m,updated:h,version:r}),o())},I.onerror=()=>{y(`❌ Ошибка обновления записи в ${e}:`,I.error),n(I.error)}}}),w===0&&(v(`✅ Все записи в ${e} уже имеют версию`),o())},_.onerror=()=>{y(`❌ Ошибка получения записей из ${e}:`,_.error),n(_.error)},a.onerror=()=>{y(`❌ Ошибка транзакции версионирования ${e}:`,a.error),n(a.error)}}catch(a){y(`❌ Критическая ошибка версионирования ${e}:`,a),n(a)}})}static async validateRecordVersions(t,e){try{v(`🔍 Проверка версий записей, ожидаемая версия: ${e}`);const r=Array.from(t.objectStoreNames);let o=!0;const n=[];for(const a of r){const c=await this.validateStoreVersions(t,a,e);n.push(c),c.isValid||(o=!1)}return o?v("✅ Все записи имеют корректные версии"):v("⚠️ Обнаружены записи с некорректными версиями:",n),o}catch(r){return y("❌ Ошибка проверки версий записей:",r),!1}}static async validateStoreVersions(t,e,r){return new Promise((o,n)=>{try{const m=t.transaction([e],"readonly").objectStore(e).getAll();m.onsuccess=()=>{const h=m.result;let _=0,S=0;h.forEach($=>{$.hasOwnProperty("version")?$.version<r&&S++:_++});const w=_===0&&S===0;o({storeName:e,totalRecords:h.length,recordsWithoutVersion:_,recordsWithOldVersion:S,isValid:w})},m.onerror=()=>{n(m.error)}}catch(a){n(a)}})}static async updateAllStoresVersions(t,e,r){try{const o=r||Array.from(t.objectStoreNames);v(`🔄 Массовое обновление версий до ${e} в stores:`,o);for(const n of o)await this.addVersionToAllRecords(t,n,e);v(`✅ Массовое обновление версий завершено для ${o.length} stores`)}catch(o){throw y("❌ Ошибка массового обновления версий:",o),o}}static async getVersionStats(t){try{const e=Array.from(t.objectStoreNames),r=[];let o=0,n=0;for(const a of e){const c=await this.getStoreVersionStats(t,a);r.push(c),o+=c.totalRecords,n+=c.recordsWithoutVersion}return{stores:r,summary:{totalStores:e.length,totalRecords:o,totalWithoutVersion:n}}}catch(e){return y("❌ Ошибка получения статистики версий:",e),{stores:[],summary:{totalStores:0,totalRecords:0,totalWithoutVersion:0}}}}static async getStoreVersionStats(t,e){return new Promise((r,o)=>{try{const c=t.transaction([e],"readonly").objectStore(e).getAll();c.onsuccess=()=>{const m=c.result,h={};let _=0;m.forEach(S=>{if(!S.hasOwnProperty("version"))_++;else{const w=String(S.version);h[w]=(h[w]||0)+1}}),r({name:e,totalRecords:m.length,versionsDistribution:h,recordsWithoutVersion:_})},c.onerror=()=>{o(c.error)}}catch(n){o(n)}})}static async removeVersionFromAllRecords(t,e){return new Promise((r,o)=>{try{v(`🔄 Удаление поля version из всех записей в ${e}...`);const a=t.transaction([e],"readwrite").objectStore(e),c=a.getAll();c.onsuccess=()=>{const m=c.result;let h=0,_=0;if(m.length===0){v(`✅ Store ${e} пуст`),r();return}m.forEach(S=>{if(S.hasOwnProperty("version")){delete S.version;const w=a.put(S);w.onsuccess=()=>{_++,h++,h===m.length&&(v(`✅ Удаление версий из ${e} завершено:`,{updated:_}),r())},w.onerror=()=>{o(w.error)}}else h++,h===m.length&&r()})},c.onerror=()=>{o(c.error)}}catch(n){o(n)}})}}const yr=Object.freeze(["accounts","friends","rooms"]),Ss=Object.freeze(Object.defineProperty({__proto__:null,REQUIRED_STORES:yr},Symbol.toStringTag,{value:"Module"}));async function ys(){try{cr("🔄 Загружаем legacy реестр миграций...");const s=await P(()=>import("./LEGASY_MIGRATIONS_REGISTRY-D-EDVjfO.js"),[]);if(!s.LEGACY_MIGRATIONS_REGISTRY)throw new Error("Legacy реестр не содержит LEGACY_MIGRATIONS_REGISTRY");return v("✅ Legacy реестр миграций загружен успешно"),s.LEGACY_MIGRATIONS_REGISTRY}catch(s){throw y("❌ Ошибка загрузки legacy реестра миграций:",s),s}}async function ws(s,t){if(!(s<ar))return v("🚀 Используем только основной реестр миграций (legacy не требуется)"),{..._t};v("📦 Требуются legacy миграции, загружаем объединенный реестр:",{oldVersion:s,newVersion:t,minCurrentVersion:ar});const r=await ys(),o={...r,..._t};return v("✅ Объединенный реестр создан:",{legacyCount:Object.keys(r).length,currentCount:Object.keys(_t).length,totalCount:Object.keys(o).length}),o}async function Mt(s){return new Promise((t,e)=>{try{const r=indexedDB.open(s);r.onsuccess=()=>{const o=r.result.version;r.result.close(),t(o)},r.onerror=()=>{e(r.error)},r.onupgradeneeded=()=>{r.result.close(),t(0)}}catch(r){e(r)}})}async function Ds(s,t){const e=t[s];if(!e)throw new Error(`Миграция для версии ${s} не найдена в объединенном реестре`);try{cr(`🔄 Загружаем модуль миграции: ${e}`);const r=await _r(Object.assign({"./combined/-1_tmp_test.ts":()=>P(()=>import("./-1_tmp_test-BlnaWVRx.js"),__vite__mapDeps([0,1,2])),"./combined/0_initialization.ts":()=>P(()=>import("./0_initialization-CS_rwdlJ.js"),__vite__mapDeps([3,1,2])),"./combined/1_accounts_friends.ts":()=>P(()=>import("./1_accounts_friends-BsEYL5H7.js"),__vite__mapDeps([4,1,2,5])),"./combined/2_accounts_versioning.ts":()=>P(()=>import("./2_accounts_versioning-DH1u-_Hl.js"),__vite__mapDeps([6,1,2,5])),"./combined/3_rooms_versioning.ts":()=>P(()=>import("./3_rooms_versioning-mEFb9adH.js"),__vite__mapDeps([7,1,2,5])),"./combined/4_accounts_room_ids.ts":()=>P(()=>import("./4_accounts_room_ids-B6I0sC9g.js"),__vite__mapDeps([8,1,2,5]))}),`./combined/${e}.ts`,3);if(!r.migrationInfo||!r.migrationScheme||!r.migrationData)throw new Error(`Модуль миграции ${e} не содержит необходимые экспорты (migrationInfo, migrationScheme, migrationData)`);return v(`✅ Модуль миграции ${e} загружен успешно`),r}catch(r){throw y(`❌ Ошибка загрузки модуля миграции ${e}:`,r),r}}async function $s(s,t){const e=new Map;v("🔄 Предварительная загрузка модулей миграций:",{oldVersion:s,newVersion:t});try{const r=await ws(s,t);for(let o=s;o<t;o++){const n=await Ds(o,r);e.set(o,n)}return v(`✅ Предварительно загружено ${e.size} модулей миграций`),e}catch(r){throw y("❌ Ошибка предварительной загрузки миграций:",r),r}}function xt(){const s=Object.keys(_t).map(Number);return s.length>0?Math.max(...s)+1:1}function bs({db:s,realOldVersion:t,newVersion:e}){v("🚨 Экстренное выполнение встроенных миграций схемы");for(let r=0;r<e;r++)r===0&&t<=0&&(v("📦 Экстренная миграция схемы 0: Создание базовых хранилищ"),s.objectStoreNames.contains("accounts")||(s.createObjectStore("accounts",{keyPath:"id"}),v("✅ Хранилище accounts создано")),s.objectStoreNames.contains("friends")||(s.createObjectStore("friends",{keyPath:"id"}),v("✅ Хранилище friends создано")),s.objectStoreNames.contains("rooms")||(s.createObjectStore("rooms",{keyPath:"id"}),v("✅ Хранилище rooms создано")),v("✅ Экстренная миграция схемы 0 завершена")),r===1&&t<=1&&(v("📦 Экстренная миграция схемы 1: Добавление индексов"),v("✅ Экстренная миграция схемы 1 завершена"));v("🔍 Дополнительная проверка наличия критических хранилищ..."),s.objectStoreNames.contains("accounts")||(s.createObjectStore("accounts",{keyPath:"id"}),v("✅ Дополнительно создано хранилище accounts")),s.objectStoreNames.contains("friends")||(s.createObjectStore("friends",{keyPath:"id"}),v("✅ Дополнительно создано хранилище friends")),s.objectStoreNames.contains("rooms")||(s.createObjectStore("rooms",{keyPath:"id"}),v("✅ Дополнительно создано хранилище rooms"))}class Is{static async checkOnAppStart(){try{v("🔍 Проверка состояния баз данных при старте...");const t=await Rt();for(const e of t)await ut(e.dbName)?(v("⚠️ Обнаружена зависшая миграция, попытка восстановления:",e.dbName),await this.recoverFromIncompleteUpdate(e.dbName)):await this.validateVersionConsistency(e.dbName);v("✅ Проверка состояния баз данных завершена")}catch(t){y("❌ Ошибка при проверке на старте приложения:",t)}}static async recoverFromIncompleteUpdate(t){try{v("🔄 Начало восстановления после некорректного завершения:",t);const e=await F(t);if(!e){v("ℹ️ Состояние БД не найдено, восстановление не требуется:",t);return}if(!await ut(t)){v("ℹ️ Миграция не зависла, восстановление не требуется:",t);return}const o=await Mt(t);if(v("📊 Сравнение версий для восстановления:",{dbName:t,stateVersion:e.version,realDbVersion:o,targetVersion:e.targetVersion}),e.targetVersion&&o>=e.targetVersion){v("✅ Миграция была завершена успешно, обновляем статус:",t),await vt(t);return}await vt(t),v("🔄 Восстановление завершено, миграция сброшена:",t)}catch(e){y("❌ Ошибка при восстановлении после некорректного завершения:",e);try{await vt(t),v("🔄 Принудительный сброс статуса выполнен:",t)}catch(r){y("❌ Критическая ошибка при принудительном сбросе:",r)}}}static async validateVersionConsistency(t){try{const e=await F(t);if(!e)return!0;const r=await Mt(t);return e.version!==r?(v("⚠️ Обнаружено рассогласование версий:",{dbName:t,stateVersion:e.version,realDbVersion:r}),r>e.version&&(e.version=r,await P(async()=>{const{updateDbState:o}=await Promise.resolve().then(()=>hs);return{updateDbState:o}},void 0).then(({updateDbState:o})=>o(e)),v("✅ Версия в состоянии обновлена до реальной:",r)),!1):!0}catch(e){return y("❌ Ошибка проверки согласованности версий:",e),!1}}static async validateDataIntegrity(t){try{v("🔍 Проверка целостности данных БД:",t.name);const{REQUIRED_STORES:e}=await P(async()=>{const{REQUIRED_STORES:n}=await Promise.resolve().then(()=>Ss);return{REQUIRED_STORES:n}},void 0),r=e.filter(n=>!t.objectStoreNames.contains(n));if(r.length>0)return y("❌ Отсутствуют обязательные object stores:",r),!1;let o=!0;for(const n of e)try{const m=t.transaction([n],"readonly").objectStore(n).count();await new Promise((h,_)=>{m.onsuccess=()=>h(m.result),m.onerror=()=>_(m.error)})}catch(a){y(`❌ Ошибка доступа к store ${n}:`,a),o=!1}return o?v("✅ Проверка целостности данных пройдена:",t.name):y("❌ Обнаружены проблемы целостности данных:",t.name),o}catch(e){return y("❌ Ошибка при проверке целостности данных:",e),!1}}static async forceResetAllStuckMigrations(){try{v("🚨 Принудительный сброс всех зависших миграций...");const t=await Rt();let e=0;for(const r of t)await ut(r.dbName)&&(await vt(r.dbName),e++);v(`✅ Принудительно сброшено миграций: ${e}`)}catch(t){y("❌ Ошибка при принудительном сбросе всех миграций:",t)}}static async getDiagnosticInfo(){try{const t=await Rt(),e=[];let r=0,o=0;for(const n of t){const a=await ut(n.dbName),c=await Mt(n.dbName),m=n.version===c;a&&r++,m||o++,e.push({name:n.dbName,stateVersion:n.version,realVersion:c,isStuck:a,versionConsistent:m})}return{databases:e,summary:{total:e.length,stuck:r,inconsistent:o}}}catch(t){return y("❌ Ошибка получения диагностической информации:",t),{databases:[],summary:{total:0,stuck:0,inconsistent:0}}}}}const G={DB_NAME:"DB_STATE_MANAGER_V2",STORE_NAME:"user_migration_states",VERSION:1};class k{static async getDatabase(){return this.dbPromise||(this.dbPromise=new Promise((t,e)=>{const r=indexedDB.open(G.DB_NAME,G.VERSION);r.onupgradeneeded=o=>{const n=o.target.result;if(!n.objectStoreNames.contains(G.STORE_NAME)){const a=n.createObjectStore(G.STORE_NAME,{keyPath:"userId"});a.createIndex("userId","userId",{unique:!0}),a.createIndex("currentVersion","currentVersion",{unique:!1})}},r.onsuccess=()=>t(r.result),r.onerror=()=>e(r.error)})),this.dbPromise}static async getUserState(t){const e=await this.getDatabase();return new Promise((r,o)=>{const c=e.transaction([G.STORE_NAME],"readonly").objectStore(G.STORE_NAME).get(t);c.onsuccess=()=>r(c.result||null),c.onerror=()=>o(c.error)})}static async updateUserState(t,e){const r=await this.getDatabase(),n={...await this.getUserState(t)||{userId:t,currentVersion:0,completedMigrations:[],migrationHistory:[]},...e};return new Promise((a,c)=>{const _=r.transaction([G.STORE_NAME],"readwrite").objectStore(G.STORE_NAME).put(n);_.onsuccess=()=>a(),_.onerror=()=>c(_.error)})}static async getUsersCompletedVersion(t){const e=await this.getDatabase();return new Promise((r,o)=>{const c=e.transaction([G.STORE_NAME],"readonly").objectStore(G.STORE_NAME).getAll();c.onsuccess=()=>{const h=c.result.filter(_=>_.completedMigrations.includes(t)).map(_=>_.userId);r(h)},c.onerror=()=>o(c.error)})}static async getAllSystemUserIds(){const t=await this.getDatabase();return new Promise((e,r)=>{const a=t.transaction([G.STORE_NAME],"readonly").objectStore(G.STORE_NAME).getAllKeys();a.onsuccess=()=>e(a.result),a.onerror=()=>r(a.error)})}}er(k,"dbPromise",null);class Es{static async loadMigrationModule(t){const e=_t[t];if(!e)throw new Error(`Миграция для версии ${t} не найдена в реестре`);try{console.log(`🔄 Загружаем модуль миграции: ${e}`);const r=await _r(Object.assign({"./migrations/combined/-1_tmp_test.ts":()=>P(()=>import("./-1_tmp_test-BlnaWVRx.js"),__vite__mapDeps([0,1,2])),"./migrations/combined/0_initialization.ts":()=>P(()=>import("./0_initialization-CS_rwdlJ.js"),__vite__mapDeps([3,1,2])),"./migrations/combined/1_accounts_friends.ts":()=>P(()=>import("./1_accounts_friends-BsEYL5H7.js"),__vite__mapDeps([4,1,2,5])),"./migrations/combined/2_accounts_versioning.ts":()=>P(()=>import("./2_accounts_versioning-DH1u-_Hl.js"),__vite__mapDeps([6,1,2,5])),"./migrations/combined/3_rooms_versioning.ts":()=>P(()=>import("./3_rooms_versioning-mEFb9adH.js"),__vite__mapDeps([7,1,2,5])),"./migrations/combined/4_accounts_room_ids.ts":()=>P(()=>import("./4_accounts_room_ids-B6I0sC9g.js"),__vite__mapDeps([8,1,2,5]))}),`./migrations/combined/${e}.ts`,4);if(!r.migrationInfo)throw new Error(`Модуль миграции ${e} не содержит migrationInfo`);return console.log(`✅ Модуль миграции ${e} загружен успешно`),r}catch(r){throw console.error(`❌ Ошибка загрузки модуля миграции ${e}:`,r),r}}static async getAllMigrations(){const t=[];for(const e of Object.keys(_t).map(Number))try{const r=await this.loadMigrationModule(e);t.push({...r,version:e+1})}catch(r){console.error(`Не удалось загрузить миграцию версии ${e}:`,r)}return t.sort((e,r)=>e.version-r.version)}static async checkUserMigrations(t){var a;const e=await k.getUserState(t),r=(e==null?void 0:e.currentVersion)||0,o=xt(),n=[];for(let c=r+1;c<=o;c++)(a=e==null?void 0:e.completedMigrations)!=null&&a.includes(c)||n.push(c);return n}static async migrateUser(t){const{currentUser:e,db:r,oldVersion:o,newVersion:n}=t,a=e.id;console.log(`🔄 Начинаем миграцию пользователя ${a} с версии ${o} до ${n}`),await k.updateUserState(a,{migrationStartTime:Date.now(),currentVersion:o});try{const c=await this.checkUserMigrations(a);for(const m of c){if(m>n)break;await this.executeUserMigration(t,m);const h=await k.getUserState(a)||{userId:a,currentVersion:o,completedMigrations:[],migrationHistory:[]};await k.updateUserState(a,{currentVersion:m,completedMigrations:[...h.completedMigrations,m]})}await k.updateUserState(a,{migrationEndTime:Date.now(),currentVersion:n}),console.log(`✅ Миграция пользователя ${a} завершена успешно`)}catch(c){throw console.error(`❌ Ошибка миграции пользователя ${a}:`,c),await k.updateUserState(a,{migrationEndTime:Date.now(),errorMessage:c instanceof Error?c.message:"Unknown error"}),c}}static async executeUserMigration(t,e){var _;const{currentUser:r}=t;console.log(`📦 Выполняем миграцию версии ${e} для пользователя ${r.id}`);const o=Date.now(),n=e-1,a=await this.loadMigrationModule(n);if(!a)throw new Error(`Миграция версии ${e} не найдена`);a.migrationData&&await a.migrationData(t);const c=Date.now(),m=c-o;console.log(`✅ Миграция версии ${e} для пользователя ${r.id} завершена за ${m}мс`);const h=await k.getUserState(r.id);if(h){const S={version:e,fileName:((_=a.migrationInfo)==null?void 0:_.fileName)||`migration_${e}`,schemaDuration:0,dataDuration:m,startTime:o,endTime:c};await k.updateUserState(r.id,{migrationHistory:[...h.migrationHistory,S]})}}static async allUsersCompletedVersion(t,e){const r=await this.scanAllUserIds(t),o=new Set(await k.getUsersCompletedVersion(e));return r.size===o.size&&[...r].every(n=>o.has(n))}static async scanAllUserIds(t){return new Promise((e,r)=>{const a=t.transaction(["accounts"],"readonly").objectStore("accounts").getAll();a.onsuccess=()=>{const c=a.result,m=new Set(c.map(h=>h.id));console.log(`📊 Найдено ${m.size} пользователей в системе:`,[...m]),e(m)},a.onerror=()=>{console.error("❌ Ошибка сканирования accounts для получения userIds:",a.error),r(a.error)}})}static async getUserMigrationStats(t){return await k.getUserState(t)}}class gt{static async scanAllUserIds(t){return new Promise((e,r)=>{const a=t.transaction(["accounts"],"readonly").objectStore("accounts").getAll();a.onsuccess=()=>{const c=a.result,m=new Set(c.map(h=>h.id));e(m)},a.onerror=()=>r(a.error)})}static async allUsersReady(t,e){try{const r=await this.scanAllUserIds(t),o=new Set(await k.getUsersCompletedVersion(e)),n=r.size===o.size&&[...r].every(a=>o.has(a));return console.log(`🔍 Проверка готовности всех пользователей для версии ${e}:`),console.log(`   - Всего пользователей в системе: ${r.size}`),console.log(`   - Завершивших миграцию: ${o.size}`),console.log(`   - Результат: ${n?"✅ Все готовы":"⏳ Ожидание"}`),n}catch(r){return console.error("❌ Ошибка при проверке готовности пользователей:",r),!1}}static async getPendingUsers(t,e){const r=await this.scanAllUserIds(t),o=new Set(await k.getUsersCompletedVersion(e));return[...r].filter(n=>!o.has(n))}static async getUserReadinessStats(t,e){try{const r=await this.scanAllUserIds(t),o=new Set(await k.getUsersCompletedVersion(e)),n=[...r].filter(_=>!o.has(_)),a=r.size,c=o.size,m=a>0?Math.round(c/a*100):100,h=a===c&&a>0;return{totalUsers:a,completedUsers:c,pendingUsers:n,completionPercentage:m,isReady:h}}catch(r){return console.error("❌ Ошибка получения статистики готовности пользователей:",r),{totalUsers:0,completedUsers:0,pendingUsers:[],completionPercentage:0,isReady:!1}}}}let V=null,W=null,R=null,J=!1,X=0;const As=5*60*1e3;class et{static async getConnection(){if(await et.checkAndRecoverFromFailures(),V&&!J)return V;if(W)return W;W=et.createNewConnection();try{const t=await W;return V=t,et.setupConnectionHandlers(t),t}catch(t){throw W=null,t}}static async checkAndRecoverFromFailures(){try{const t=Ut.MAIN_LES_STORE_V1;await ut(t)&&(v("🔧 Обнаружена зависшая миграция, выполняем восстановление..."),await et.resetStuckMigration(t)),await Is.checkOnAppStart()}catch(t){y("❌ Ошибка при проверке состояния БД:",t)}}static async resetStuckMigration(t){try{await vt(t),V&&(V.close(),V=null),W=null,v("✅ Заблокированная миграция сброшена")}catch(e){throw y("❌ Ошибка сброса заблокированной миграции:",e),e}}static async createNewConnection(){return new Promise(async(t,e)=>{try{const r=Ut.MAIN_LES_STORE_V1;if(!await fr(r))throw new Error("База данных уже обновляется. Дождитесь завершения текущего обновления.");const n=await Mt(r),a=await mr(r),c=xt();v("📊 Информация о версиях БД:",{currentVersion:n,previousStateVersion:a,targetVersion:c,needsMigration:n<c});const m=Math.max(n,a);m<c&&(await St(r,ot.UPDATE_STARTED,m,c),await hr(r,m,c));let h=new Map;if(m<c){const w=Date.now();v("🔄 Предварительная загрузка модулей миграций c версии:",m),h=await $s(m,c);const $=Date.now()-w;v(`✅ Предзагрузка завершена за ${$}мс`)}let _=indexedDB.open(r,c),S=n;_.onupgradeneeded=function(w){const $=_.result,I=w.oldVersion??0,H=w.newVersion??c;if(S=I,v("🔄 IndexDB onupgradeneeded:",{oldVersion:I,newVersion:H,existingStores:Array.from($.objectStoreNames),detectedCurrentVersion:n,usingRealOldVersion:I}),I!==n&&(v("⚠️ Обнаружена рассинхронизация версий, сбрасываем предзагруженные миграции:",{detectedVersion:n,realVersion:I}),h=new Map),I<H)try{h.size===0?bs({db:$,realOldVersion:I,newVersion:H}):et.runSchemaMigrationsWithTiming($,I,H,h,r)}catch(C){throw y("Критическая ошибка во время миграции схемы IndexedDB:",C),C}},_.onerror=async function(){var w;y("IndexDB openRequest error:",_.error),await St(r,ot.UPDATE_FAILED,void 0,void 0,(w=_.error)==null?void 0:w.message),e(_.error)},_.onsuccess=async function(){let w=_.result;v("✅ IndexDB соединение установлено, версия БД:",w.version);try{const $=yr.filter(I=>!w.objectStoreNames.contains(I));if($.length>0){y("🚨 Обнаружены отсутствующие object stores:",$),v("🔄 Принудительное пересоздание базы данных..."),w.close();const I=indexedDB.deleteDatabase(r);I.onsuccess=()=>{v("✅ Поврежденная база удалена"),setTimeout(()=>{v("🔄 Перезапуск создания базы..."),et.createNewConnection().then(t).catch(e)},100)},I.onerror=()=>{y("❌ Ошибка удаления поврежденной базы:",I.error),e(I.error)};return}v("✅ Миграции схемы выполнены, БД готова к использованию"),v("ℹ️ Миграции данных будут выполнены при авторизации пользователей"),await St(r,ot.UPDATE_SUCCESS,w.version),await pr(r),t(w)}catch($){y("Ошибка при выполнении миграций данных:",$);const I=$ instanceof Error?$.message:String($);await St(r,ot.UPDATE_FAILED,void 0,void 0,I),w.close(),e($)}},_.onblocked=function(){cs("Database connection blocked"),e(new Error("Database connection blocked"))}}catch(r){y("Ошибка при инициализации IndexDB:",r),e(r)}})}static runSchemaMigrationsWithTiming(t,e,r,o,n){var a,c;v("🚀 Начинаем выполнение миграций схемы IndexedDB:",{oldVersion:e,newVersion:r,existingStores:Array.from(t.objectStoreNames)});try{for(let m=e;m<r;m++){const h=m+1;v(`📋 Выполняем миграцию схемы с версии ${m} до ${h}`);const _=o.get(m);if(!_)throw new Error(`Предварительно загруженная миграция для версии ${m} не найдена`);const S=Date.now();_.migrationScheme(t);const w=Date.now()-S;v(`✅ Миграция схемы ${_.migrationInfo.fileName} выполнена за ${w}мс`);try{_&&typeof _=="object"&&Object.defineProperty(_,"_schemaDuration",{value:w,writable:!0,configurable:!0})}catch($){const I=$ instanceof Error?$.message:String($);console.warn(`Cannot set _schemaDuration on migration module ${(a=_.migrationInfo)==null?void 0:a.fileName}:`,I),v(`⚠️ Время выполнения схемы ${(c=_.migrationInfo)==null?void 0:c.fileName}: ${w}мс (сохранено только в логах)`)}}v("🏁 Все миграции схемы IndexedDB выполнены успешно. Финальные хранилища:",Array.from(t.objectStoreNames))}catch(m){throw y("❌ Критическая ошибка во время выполнения миграций схемы IndexedDB:",m),m}}static setupConnectionHandlers(t){t.onversionchange=function(){v("🔄 Принудительное закрытие соединения IndexDB (version change)"),R&&(clearTimeout(R),R=null),J=!0,X=0,t.close(),V=null,W=null,J=!1},t.onclose=function(){v("🔒 Соединение IndexDB закрыто"),R&&(clearTimeout(R),R=null),X=0,V=null,W=null,J=!1}}static incrementActiveRequests(){X++,R&&(clearTimeout(R),R=null)}static decrementActiveRequests(){X=Math.max(0,X-1),X===0&&et.startCloseTimer()}static startCloseTimer(){R&&clearTimeout(R),R=setTimeout(()=>{V&&!J&&X===0&&(v(`🔒 Закрытие соединения IndexDB по таймауту (5 минут после завершения всех запросов). Активных запросов: ${X}`),J=!0,V.close(),V=null,W=null,R=null,J=!1)},As)}static forceCloseConnection(){V&&(v("🔒 Принудительное закрытие соединения IndexDB"),R&&(clearTimeout(R),R=null),J=!0,X=0,V.close(),V=null,W=null,J=!1)}static getConnectionInfo(){return{hasConnection:!!V,isClosing:J,activeRequestsCount:X,hasCloseTimer:!!R,connectionPromiseActive:!!W}}static async checkMigrationReadiness(){try{const t=await this.getConnection(),e=xt(),r=await gt.allUsersReady(t,e),o=await gt.getPendingUsers(t,e);return{isReady:r,pendingUsers:o,systemStatus:r?"ready":o.length>0?"partial":"blocked"}}catch(t){return console.error("❌ Ошибка проверки готовности миграций:",t),{isReady:!1,pendingUsers:[],systemStatus:"blocked"}}}static async getUsersMigrationSummary(){try{const t=await this.getConnection(),e=xt(),r=await gt.getUserReadinessStats(t,e),o=await gt.scanAllUserIds(t),n=[];for(const a of o){const c=await Es.getUserMigrationStats(a);n.push({userId:a,currentVersion:(c==null?void 0:c.currentVersion)||0,completedMigrations:(c==null?void 0:c.completedMigrations)||[],isReady:(c==null?void 0:c.currentVersion)===e})}return{totalUsers:r.totalUsers,completedUsers:r.completedUsers,pendingUsers:r.pendingUsers,completionPercentage:r.completionPercentage,userDetails:n}}catch(t){return console.error("❌ Ошибка получения статистики пользователей:",t),{totalUsers:0,completedUsers:0,pendingUsers:[],completionPercentage:0,userDetails:[]}}}}const ir={accounts_by_id:{},friends_by_id:{},rooms_by_id:{}};var Ts=O('<span class="status-text svelte-4jntj4"> </span>'),Rs=O('<div><span class="status-dot svelte-4jntj4"></span> <!></div>');function Ms(s,t){let e=ye(t,"size",3,"md"),r=ye(t,"animated",3,!0),o=ye(t,"className",3,"");const n=()=>{let h=["status-indicator",`status-${t.status}`,`size-${e()}`];return r()&&h.push("animated"),o()&&h.push(o()),h.join(" ")};var a=Rs(),c=g(l(a),2);{var m=h=>{var _=Ts(),S=l(_);M(()=>b(S,t.text)),A(h,_)};st(c,h=>{t.text&&h(m)})}M(h=>d(a,1,h,"svelte-4jntj4"),[()=>u(n())]),A(s,a)}var xs=O('<div><div class="theme-preview svelte-gyqbuc"><span class="theme-icon svelte-gyqbuc"> </span> <div class="theme-info svelte-gyqbuc"><div class="theme-name svelte-gyqbuc"> </div> <div class="theme-description svelte-gyqbuc"> </div></div></div> <div class="theme-actions svelte-gyqbuc"><!></div></div>'),Us=O('<div class="theme-selector svelte-gyqbuc"><div class="themes-grid svelte-gyqbuc"></div></div>');function Vs(s,t){dr(t,!1);const[e,r]=vr(),o=()=>De(gr,"$theme",e),n={cyberpunk:"🌆",watchdogs:"🔍",pixel:"🎮",terminal:"💻",arabic:"🕌"},a={cyberpunk:"Темная киберпанк тема с неоновыми акцентами",watchdogs:"Стиль в духе хакерских фильмов",pixel:"Ретро пиксельная графика",terminal:"Классический терминальный интерфейс",arabic:"Традиционный арабский стиль"};lr();var c=Us(),m=l(c);we(m,5,()=>ls,$e,(h,_)=>{var S=xs();let w;var $=l(S),I=l($),H=l(I),C=g(I,2),wt=l(C),Vt=l(wt),Pt=g(wt,2),kt=l(Pt),Ot=g($,2),Ct=l(Ot);const Nt=rt(()=>o()===f(_)?"primary":"outline"),Bt=rt(()=>o()===f(_));q(Ct,{get variant(){return f(Nt)},size:"sm",onclick:()=>ds(f(_)),get disabled(){return f(Bt)},children:(mt,Dt)=>{var nt=z();M(()=>b(nt,o()===f(_)?"✓ Активна":"Применить")),A(mt,nt)},$$slots:{default:!0}}),M((mt,Dt)=>{w=d(S,1,"theme-option svelte-gyqbuc",null,w,mt),b(H,n[f(_)]||"🎨"),b(Vt,Dt),b(kt,a[f(_)])},[()=>({active:o()===f(_)}),()=>f(_).toUpperCase()],rt),A(h,S)}),A(s,c),ur(),r()}async function wr(){try{if("databases"in indexedDB){const s=await indexedDB.databases();console.log(`Found ${s.length} IndexedDB database(s) to delete`);for(const t of s)if(t.name)try{const e=indexedDB.deleteDatabase(t.name);await new Promise((r,o)=>{e.onsuccess=()=>{console.log(`✓ IndexedDB database deleted: ${t.name}`),r()},e.onerror=n=>{console.error(`Error deleting IndexedDB database: ${t.name}`,n),o(new Error(`Failed to delete database: ${t.name}`))},e.onblocked=()=>{console.warn(`IndexedDB database deletion blocked: ${t.name}`),r()}})}catch(e){console.error(`Error deleting IndexedDB database: ${t.name}`,e)}}else{console.log("Modern databases() API not available, using fallback method");const s=["store_v3","store_v2","store_v1","store"];for(const t of s)try{const e=indexedDB.deleteDatabase(t);await new Promise((r,o)=>{e.onsuccess=()=>{console.log(`✓ IndexedDB database deleted: ${t}`),r()},e.onerror=()=>{console.log(`IndexedDB database not found or already deleted: ${t}`),r()},e.onblocked=()=>{console.warn(`IndexedDB database deletion blocked: ${t}`),r()}})}catch(e){console.error(`Error deleting IndexedDB database: ${t}`,e)}}console.log("✓ IndexedDB databases cleared")}catch(s){throw console.error("Error clearing IndexedDB databases:",s),s}}async function Ps(){try{if(localStorage.clear(),console.log("✓ localStorage cleared"),sessionStorage.clear(),console.log("✓ sessionStorage cleared"),"serviceWorker"in navigator){const s=await navigator.serviceWorker.getRegistrations();if(s.length>0){console.log(`Found ${s.length} service worker(s) to unregister`);for(const t of s)try{await t.unregister(),console.log("✓ Service worker unregistered:",t.scope)}catch(e){console.error("Error unregistering service worker:",e)}}else console.log("No service workers found")}else console.log("Service Workers not supported in this browser");if("indexedDB"in window)try{await wr()}catch(s){console.error("Error clearing IndexedDB:",s)}if("caches"in window)try{const s=await caches.keys();if(s.length>0){console.log(`Found ${s.length} cache(s) to delete`);for(const t of s)await caches.delete(t),console.log("✓ Cache deleted:",t)}else console.log("No caches found")}catch(s){console.error("Error clearing caches:",s)}console.log("🧹 App data clearing completed"),alert("Все данные приложения очищены! Страница будет перезагружена."),window.location.reload()}catch(s){console.error("Error during app data clearing:",s),alert("Ошибка при очистке данных: "+(s instanceof Error?s.message:String(s)))}}async function ks(){try{if("serviceWorker"in navigator){const s=await navigator.serviceWorker.getRegistrations();if(s.length>0){console.log(`Found ${s.length} service worker(s) to unregister`);for(const t of s)try{await t.unregister(),console.log("✓ Service worker unregistered:",t.scope)}catch(e){console.error("Error unregistering service worker:",e)}alert("Service Workers очищены! Страница будет перезагружена."),window.location.reload()}else alert("Service Workers не найдены")}else alert("Service Workers не поддерживаются в этом браузере")}catch(s){console.error("Error clearing service workers:",s),alert("Ошибка при очистке Service Workers: "+(s instanceof Error?s.message:String(s)))}}function Os(){try{localStorage.clear(),sessionStorage.clear(),console.log("✓ Storage cleared"),alert("Локальное хранилище очищено!")}catch(s){console.error("Error clearing storage:",s),alert("Ошибка при очистке хранилища: "+(s instanceof Error?s.message:String(s)))}}async function Cs(){try{"indexedDB"in window?(await wr(),alert("IndexedDB базы данных очищены!")):alert("IndexedDB не поддерживается в этом браузере")}catch(s){console.error("Error clearing IndexedDB:",s),alert("Ошибка при очистке IndexedDB: "+(s instanceof Error?s.message:String(s)))}}const Ns="_settingsContainer_1p21f_1",Bs="_settingsGrid_1p21f_10",js="_settingSection_1p21f_16",Ls="_sectionTitle_1p21f_22",qs="_settingItem_1p21f_33",zs="_settingHeader_1p21f_50",Gs="_settingName_1p21f_57",Hs="_settingIcon_1p21f_66",Ws="_settingDescription_1p21f_70",Fs="_settingActions_1p21f_77",Ys="_statusIndicator_1p21f_99",Qs="_statusActive_1p21f_110",Ks="_themeSelector_1p21f_122",Js="_clearOptions_1p21f_126",Xs="_versionResults_1p21f_180",Zs="_userList_1p21f_187",to="_userItem_1p21f_193",eo="_statsGrid_1p21f_199",ro="_errorMessage_1p21f_206",so="_authRequired_1p21f_214",oo="_authMessage_1p21f_222",no="_authDescription_1p21f_228",ao="_authActions_1p21f_233",io="_emptyMessage_1p21f_238",co="_migrationList_1p21f_245",lo="_migrationItem_1p21f_254",uo="_migrationHeader_1p21f_267",vo="_migrationDetails_1p21f_274",i={settingsContainer:Ns,settingsGrid:Bs,settingSection:js,sectionTitle:Ls,settingItem:qs,settingHeader:zs,settingName:Gs,settingIcon:Hs,settingDescription:Ws,settingActions:Fs,statusIndicator:Ys,statusActive:Qs,themeSelector:Ks,clearOptions:Js,versionResults:Xs,userList:Zs,userItem:to,statsGrid:eo,errorMessage:ro,authRequired:so,authMessage:oo,authDescription:no,authActions:ao,emptyMessage:io,migrationList:co,migrationItem:lo,migrationHeader:uo,migrationDetails:vo};var go=O("<div><!> <!> <!> <!></div>"),_o=O("<div><div><strong> </strong></div> <div><span> </span> <span> </span> <span> </span> <span> </span></div></div>"),mo=O("<h4>🔍 Детализация по миграциям</h4> <div></div>",1),fo=O("<div><h4>📋 Общая информация</h4> <div><div><strong>Общее время:</strong> </div> <div><strong>Последняя миграция:</strong> </div> <div><strong>Выполнено миграций:</strong> </div></div> <!></div>"),ho=O("<div> </div>"),po=O(`<div><div>🔐 Для просмотра версий необходимо авторизоваться</div> <div>Данные версий зашифрованы и требуют авторизации для
                            доступа.</div> <div><!></div></div>`),So=O("<div>База данных пуста</div>"),yo=O("<div> </div>"),wo=O("<div><h4>👥 Пользователи в системе:</h4> <div><!></div> <h4>📈 Статистика пользователей:</h4> <div><div> </div> <div> </div> <div> </div></div> <h4>👥 Статистика Friends (в памяти):</h4> <div><div> </div> <div> </div> <div> </div> <div> </div></div> <h4>🏠 Статистика Rooms (в памяти):</h4> <div><div> </div> <div> </div> <div> </div> <div> </div></div></div>"),Do=O(`<div><div><div><h2>🔧 Системные настройки</h2> <div><div><div><span>🎨</span> Темы интерфейса</div> <!></div> <div>Выберите тему интерфейса для персонализации внешнего вида
                    приложения. Изменения применяются мгновенно.</div> <div><!></div></div> <div><div><div><span>⚡</span> Статус системы</div> <span> </span></div> <div>Система работает в штатном режиме. Все модули функционируют
                    корректно.</div> <div><!></div></div></div> <div><h2>💾 Управление данными</h2> <div><div><div><span>💽</span> Очистка данных</div> <span>● ДОСТУПНО</span></div> <div>Управление локальными данными приложения, включая настройки,
                    кэш и пользовательские данные.</div> <div><!></div> <!></div></div> <div><h2>🗂️ Управление вкладками</h2> <div><div><div><span>📊</span> Мониторинг активных вкладок</div> <span> </span></div> <div>Отслеживание количества активных вкладок приложения в
                    реальном времени через SharedWorker. Счетчик автоматически
                    обновляется при открытии/закрытии вкладок.</div></div> <div><div><div><span>🚪</span> Закрытие вкладок</div> <span>● ДОСТУПНО</span></div> <div>Управление открытыми вкладками приложения через broadcast
                    сообщения. Позволяет закрывать вкладки синхронно через все
                    экземпляры приложения.</div> <div><!> <!></div> <div style="margin-top: 8px; font-size: 0.9em; color: var(--color-text-secondary);">⚠️ "Закрыть остальные вкладки" - закроет все вкладки кроме
                    текущей<br/> ⚠️ "Закрыть все вкладки" - закроет включая текущую вкладку</div></div></div> <div><h2>⏱️ Статистика миграций</h2> <div><div><div><span>📊</span> Время выполнения миграций</div> <span>● ДОСТУПНО</span></div> <div>Детальная информация о времени выполнения миграций базы
                    данных. Показывает продолжительность каждой миграции и общее
                    время.</div> <div><!></div> <!></div></div> <div><h2>🔍 Диагностика версий</h2> <div><div><div><span>📊</span> Проверка версий сущностей</div> <span>● ДОСТУПНО</span></div> <div>Проверка версий всех пользователей и сущностей в базе
                    данных. Показывает ID пользователей и их текущие версии.</div> <div><!></div> <!> <!> <!></div></div> <div><h2>🧭 Навигация</h2> <div><div><div><span>🏠</span> Главная страница</div></div> <div>Вернуться на главную страницу приложения.</div> <div><!></div></div></div></div></div>`);function $o(s,t){dr(t,!1);const[e,r]=vr(),o=()=>De(vs,"$appAuthStore",e),n=()=>De(gr,"$theme",e);let a="operational",c=K(!1),m=K(0),h=K(!1),_=K(!1),S=K(null),w=K(null),$=K(!1),I=K(!1),H=K(!1),C=K(null);us(()=>ms.tabs.subscribeActiveTabsCount(E=>{x(m,E)}));function wt(){x(c,!f(c))}async function Vt(){confirm("Вы уверены, что хотите очистить ВСЕ данные приложения? Это действие нельзя отменить.")&&await Ps()}async function Pt(){confirm("Очистить только Service Workers?")&&await ks()}function kt(){confirm("Очистить только локальное хранилище?")&&Os()}async function Ot(){confirm("Очистить только IndexedDB базы данных?")&&await Cs()}const Ct=()=>{alert("Диагностика системы будет реализована в следующих версиях")};function Nt(){confirm("Закрыть все остальные вкладки приложения? Текущая вкладка останется открытой.")&&or.closeAllOtherTabs()}function Bt(){confirm("Закрыть ВСЕ вкладки приложения включая текущую? Это действие закроет все открытые вкладки приложения.")&&or.closeAllTabsIncludingCurrent()}async function mt(){x(_,!0),x(w,null),x(S,null),x($,!1);try{const p=o();if(Object.keys(p.byId).length===0){x($,!0),x(h,!0);return}const D=await et.getConnection(),N=await gt.getUserReadinessStats(D,2),B=await ps.getVersionStats(D),Y=await gt.scanAllUserIds(D),T=Object.values(ir.friends_by_id),j=Object.values(ir.rooms_by_id),U={total:T.length,withVersion:T.filter(L=>L.version!==void 0).length,withoutVersion:T.filter(L=>L.version===void 0).length},at={total:j.length,withVersion:j.filter(L=>L.version!==void 0).length,withoutVersion:j.filter(L=>L.version===void 0).length};x(S,{userStats:N,versionStats:B,allUserIds:Array.from(Y),entitiesStats:{friends:U,rooms:at}}),x(h,!0)}catch(p){x(w,p instanceof Error?p.message:String(p))}finally{x(_,!1)}}async function Dt(){x(H,!0);try{const p=await Sr(Ut.MAIN_LES_STORE_V1);x(C,p),x(I,!0)}catch(p){console.error("Ошибка получения статистики миграций:",p),alert("Не удалось загрузить статистику миграций")}finally{x(H,!1)}}function nt(p){return p<1e3?`${p}мс`:p<6e4?`${(p/1e3).toFixed(1)}с`:`${(p/6e4).toFixed(1)}мин`}lr();var jt=Do(),Ie=l(jt),Lt=l(Ie),Ee=l(Lt),qt=g(Ee,2),zt=l(qt),Gt=l(zt),Dr=l(Gt),$r=g(Gt,2);const br=rt(()=>n().toUpperCase()),Ir=rt(()=>`${i.statusIndicator} ${i.statusActive}`);Ms($r,{status:"active",get text(){return f(br)},get className(){return f(Ir)}});var Ae=g(zt,2),Te=g(Ae,2),Er=l(Te);Vs(Er,{});var Re=g(qt,2),Ht=l(Re),Wt=l(Ht),Ar=l(Wt),Me=g(Wt,2),Tr=l(Me),xe=g(Ht,2),Ue=g(xe,2),Rr=l(Ue);q(Rr,{variant:"outline",size:"sm",onclick:Ct,children:(p,E)=>{var D=z("🔍 Диагностика");A(p,D)},$$slots:{default:!0}});var Ft=g(Lt,2),Ve=l(Ft),Pe=g(Ve,2),Yt=l(Pe),Qt=l(Yt),Mr=l(Qt),xr=g(Qt,2),ke=g(Yt,2),Kt=g(ke,2),Ur=l(Kt);q(Ur,{variant:"outline",size:"sm",onclick:wt,children:(p,E)=>{var D=z();M(()=>b(D,f(c)?"Скрыть опции":"Показать опции очистки")),A(p,D)},$$slots:{default:!0}});var Vr=g(Kt,2);{var Pr=p=>{var E=go(),D=l(E);q(D,{variant:"danger",size:"sm",onclick:Vt,children:(T,j)=>{var U=z("🗑️ Очистить все данные");A(T,U)},$$slots:{default:!0}});var N=g(D,2);q(N,{variant:"outline",size:"sm",onclick:Pt,children:(T,j)=>{var U=z("🔧 Очистить Service Workers");A(T,U)},$$slots:{default:!0}});var B=g(N,2);q(B,{variant:"outline",size:"sm",onclick:kt,children:(T,j)=>{var U=z("💾 Очистить локальное хранилище");A(T,U)},$$slots:{default:!0}});var Y=g(B,2);q(Y,{variant:"outline",size:"sm",onclick:Ot,children:(T,j)=>{var U=z("🗄️ Очистить IndexedDB");A(T,U)},$$slots:{default:!0}}),M(()=>d(E,1,u(i.clearOptions))),A(p,E)};st(Vr,p=>{f(c)&&p(Pr)})}var Jt=g(Ft,2),Oe=l(Jt),Xt=g(Oe,2),Zt=l(Xt),te=l(Zt),kr=l(te),Ce=g(te,2),Or=l(Ce),Cr=g(Zt,2),Ne=g(Xt,2),ee=l(Ne),re=l(ee),Nr=l(re),Br=g(re,2),Be=g(ee,2),se=g(Be,2),je=l(se);q(je,{variant:"outline",size:"sm",onclick:Nt,children:(p,E)=>{var D=z("🗂️ Закрыть остальные вкладки");A(p,D)},$$slots:{default:!0}});var jr=g(je,2);q(jr,{variant:"danger",size:"sm",onclick:Bt,children:(p,E)=>{var D=z("❌ Закрыть все вкладки");A(p,D)},$$slots:{default:!0}});var Lr=g(se,2),oe=g(Jt,2),Le=l(oe),qe=g(Le,2),ne=l(qe),ae=l(ne),qr=l(ae),zr=g(ae,2),ze=g(ne,2),ie=g(ze,2),Gr=l(ie);q(Gr,{variant:"outline",size:"sm",onclick:Dt,get disabled(){return f(H)},children:(p,E)=>{var D=z();M(()=>b(D,f(H)?"🔄 Загрузка...":"📈 Показать статистику")),A(p,D)},$$slots:{default:!0}});var Hr=g(ie,2);{var Wr=p=>{var E=fo(),D=g(l(E),2),N=l(D),B=g(l(N)),Y=g(N,2),T=g(l(Y)),j=g(Y,2),U=g(l(j)),at=g(D,2);{var L=it=>{var ct=mo(),dt=g(nr(ct),2);we(dt,5,()=>f(C).executedMigrations,$e,($t,Z)=>{var lt=_o(),ft=l(lt),bt=l(ft),ge=l(bt),It=g(ft,2),Et=l(It),At=l(Et),ht=g(Et,2),_e=l(ht),pt=g(ht,2),me=l(pt),Tt=g(pt,2),fe=l(Tt);M((he,pe,Q,tt)=>{d(lt,1,u(i.migrationItem)),d(ft,1,u(i.migrationHeader)),b(ge,`v${f(Z).version??""} - ${f(Z).fileName??""}`),d(It,1,u(i.migrationDetails)),b(At,`Схема: ${he??""}`),b(_e,`Данные: ${pe??""}`),b(me,`Общее: ${Q??""}`),b(fe,`Завершена: ${tt??""}`)},[()=>nt(f(Z).schemaDuration),()=>nt(f(Z).dataDuration),()=>nt(f(Z).schemaDuration+f(Z).dataDuration),()=>new Date(f(Z).endTime).toLocaleTimeString()],rt),A($t,lt)}),M(()=>d(dt,1,u(i.migrationList))),A(it,ct)};st(at,it=>{f(C).executedMigrations.length>0&&it(L)})}M((it,ct)=>{d(E,1,u(i.versionResults)),d(D,1,u(i.statsGrid)),b(B,` ${it??""}`),b(T,` ${ct??""}`),b(U,` ${f(C).executedMigrations.length??""}`)},[()=>nt(f(C).totalDuration),()=>f(C).lastMigrationDate?f(C).lastMigrationDate.toLocaleString():"Не выполнялась"],rt),A(p,E)};st(Hr,p=>{f(I)&&f(C)&&p(Wr)})}var ce=g(oe,2),Ge=l(ce),He=g(Ge,2),de=l(He),le=l(de),Fr=l(le),Yr=g(le,2),We=g(de,2),ue=g(We,2),Qr=l(ue);q(Qr,{variant:"outline",size:"sm",onclick:mt,get disabled(){return f(_)},children:(p,E)=>{var D=z();M(()=>b(D,f(_)?"⏳ Проверка...":"🔍 Проверить версии")),A(p,D)},$$slots:{default:!0}});var Fe=g(ue,2);{var Kr=p=>{var E=ho(),D=l(E);M(()=>{d(E,1,u(i.errorMessage)),b(D,`❌ Ошибка: ${f(w)??""}`)}),A(p,E)};st(Fe,p=>{f(w)&&p(Kr)})}var Ye=g(Fe,2);{var Jr=p=>{var E=po(),D=l(E),N=g(D,2),B=g(N,2),Y=l(B);rr(Y,{get href(){return sr.AUTH},children:(T,j)=>{q(T,{variant:"primary",size:"sm",children:(U,at)=>{var L=z("Перейти к авторизации");A(U,L)},$$slots:{default:!0}})},$$slots:{default:!0}}),M(()=>{d(E,1,u(i.authRequired)),d(D,1,u(i.authMessage)),d(N,1,u(i.authDescription)),d(B,1,u(i.authActions))}),A(p,E)};st(Ye,p=>{f(h)&&f($)&&p(Jr)})}var Xr=g(Ye,2);{var Zr=p=>{var E=wo(),D=g(l(E),2),N=l(D);{var B=Q=>{var tt=So();M(()=>d(tt,1,u(i.emptyMessage))),A(Q,tt)},Y=Q=>{var tt=gs(),rs=nr(tt);we(rs,1,()=>f(S).allUserIds,$e,(ss,os)=>{var Se=yo(),ns=l(Se);M(()=>{d(Se,1,u(i.userItem)),b(ns,`User ID: ${f(os)??""} | Version: ${f(S).userStats.completedUsers>0?"2":"1"}`)}),A(ss,Se)}),A(Q,tt)};st(N,Q=>{f(S).allUserIds.length===0?Q(B):Q(Y,!1)})}var T=g(D,4),j=l(T),U=l(j),at=g(j,2),L=l(at),it=g(at,2),ct=l(it),dt=g(T,4),$t=l(dt),Z=l($t),lt=g($t,2),ft=l(lt),bt=g(lt,2),ge=l(bt),It=g(bt,2),Et=l(It),At=g(dt,4),ht=l(At),_e=l(ht),pt=g(ht,2),me=l(pt),Tt=g(pt,2),fe=l(Tt),he=g(Tt,2),pe=l(he);M((Q,tt)=>{d(E,1,u(i.versionResults)),d(D,1,u(i.userList)),d(T,1,u(i.statsGrid)),b(U,`Всего пользователей: ${f(S).userStats.totalUsers??""}`),b(L,`Завершили миграцию: ${f(S).userStats.completedUsers??""}`),b(ct,`Готовность: ${f(S).userStats.completionPercentage??""}%`),d(dt,1,u(i.statsGrid)),b(Z,`Всего friends: ${f(S).entitiesStats.friends.total??""}`),b(ft,`С версией: ${f(S).entitiesStats.friends.withVersion??""}`),b(ge,`Без версии: ${f(S).entitiesStats.friends.withoutVersion??""}`),b(Et,`Готовность: ${Q??""}%`),d(At,1,u(i.statsGrid)),b(_e,`Всего rooms: ${f(S).entitiesStats.rooms.total??""}`),b(me,`С версией: ${f(S).entitiesStats.rooms.withVersion??""}`),b(fe,`Без версии: ${f(S).entitiesStats.rooms.withoutVersion??""}`),b(pe,`Готовность: ${tt??""}%`)},[()=>f(S).entitiesStats.friends.total>0?Math.round(f(S).entitiesStats.friends.withVersion/f(S).entitiesStats.friends.total*100):100,()=>f(S).entitiesStats.rooms.total>0?Math.round(f(S).entitiesStats.rooms.withVersion/f(S).entitiesStats.rooms.total*100):100],rt),A(p,E)};st(Xr,p=>{f(h)&&f(S)&&!f($)&&p(Zr)})}var Qe=g(ce,2),Ke=l(Qe),Je=g(Ke,2),ve=l(Je),Xe=l(ve),ts=l(Xe),Ze=g(ve,2),tr=g(Ze,2),es=l(tr);rr(es,{get href(){return sr.HOME},children:(p,E)=>{q(p,{variant:"outline",size:"sm",children:(D,N)=>{var B=z("Перейти на главную");A(D,B)},$$slots:{default:!0}})},$$slots:{default:!0}}),M(p=>{d(jt,1,u(i.settingsContainer)),d(Ie,1,u(i.settingsGrid)),d(Lt,1,u(i.settingSection)),d(Ee,1,u(i.sectionTitle)),d(qt,1,u(i.settingItem)),d(zt,1,u(i.settingHeader)),d(Gt,1,u(i.settingName)),d(Dr,1,u(i.settingIcon)),d(Ae,1,u(i.settingDescription)),d(Te,1,u(i.themeSelector)),d(Re,1,u(i.settingItem)),d(Ht,1,u(i.settingHeader)),d(Wt,1,u(i.settingName)),d(Ar,1,u(i.settingIcon)),d(Me,1,`${i.statusIndicator} ${i.statusActive}`),b(Tr,`● ${p??""}`),d(xe,1,u(i.settingDescription)),d(Ue,1,u(i.settingActions)),d(Ft,1,u(i.settingSection)),d(Ve,1,u(i.sectionTitle)),d(Pe,1,u(i.settingItem)),d(Yt,1,u(i.settingHeader)),d(Qt,1,u(i.settingName)),d(Mr,1,u(i.settingIcon)),d(xr,1,`${i.statusIndicator} ${i.statusActive}`),d(ke,1,u(i.settingDescription)),d(Kt,1,u(i.settingActions)),d(Jt,1,u(i.settingSection)),d(Oe,1,u(i.sectionTitle)),d(Xt,1,u(i.settingItem)),d(Zt,1,u(i.settingHeader)),d(te,1,u(i.settingName)),d(kr,1,u(i.settingIcon)),d(Ce,1,`${i.statusIndicator} ${i.statusActive}`),b(Or,`● ${f(m)??""} АКТИВНЫХ`),d(Cr,1,u(i.settingDescription)),d(Ne,1,u(i.settingItem)),d(ee,1,u(i.settingHeader)),d(re,1,u(i.settingName)),d(Nr,1,u(i.settingIcon)),d(Br,1,`${i.statusIndicator} ${i.statusActive}`),d(Be,1,u(i.settingDescription)),d(se,1,u(i.settingActions)),d(Lr,1,u(i.settingDescription)),d(oe,1,u(i.settingSection)),d(Le,1,u(i.sectionTitle)),d(qe,1,u(i.settingItem)),d(ne,1,u(i.settingHeader)),d(ae,1,u(i.settingName)),d(qr,1,u(i.settingIcon)),d(zr,1,`${i.statusIndicator} ${i.statusActive}`),d(ze,1,u(i.settingDescription)),d(ie,1,u(i.settingActions)),d(ce,1,u(i.settingSection)),d(Ge,1,u(i.sectionTitle)),d(He,1,u(i.settingItem)),d(de,1,u(i.settingHeader)),d(le,1,u(i.settingName)),d(Fr,1,u(i.settingIcon)),d(Yr,1,`${i.statusIndicator} ${i.statusActive}`),d(We,1,u(i.settingDescription)),d(ue,1,u(i.settingActions)),d(Qe,1,u(i.settingSection)),d(Ke,1,u(i.sectionTitle)),d(Je,1,u(i.settingItem)),d(ve,1,u(i.settingHeader)),d(Xe,1,u(i.settingName)),d(ts,1,u(i.settingIcon)),d(Ze,1,u(i.settingDescription)),d(tr,1,u(i.settingActions))},[()=>a.toUpperCase()],rt),A(s,jt),ur(),r()}function To(s){_s(s,{title:"СИСТЕМА_НАСТРОЕК",subtitle:"КОНФИГУРАЦИЯ_И_УПРАВЛЕНИЕ_СИСТЕМОЙ",pageName:"SettingsPage",children:(t,e)=>{$o(t,{})},$$slots:{default:!0}})}export{To as default};
