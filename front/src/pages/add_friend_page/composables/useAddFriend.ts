import { sharedWorkerApi } from "../api/shared_worker";

export interface AddFriendData {
    friendName: string;
    friendNickname: string;
    selectedAccountId: string;
}

export interface AddFriendResult {
    success: boolean;
    message: string;
    messageType: 'success' | 'error' | '';
}

export async function useAddFriend(data: AddFriendData, accounts: any[]): Promise<AddFriendResult> {
    const { friendName, selectedAccountId } = data;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!friendName.trim()) {
        return {
            success: false,
            message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞',
            messageType: 'error'
        };
    }

    if (!selectedAccountId) {
        return {
            success: false,
            message: '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç',
            messageType: 'error'
        };
    }

    // Timeout –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (10 —Å–µ–∫—É–Ω–¥)
    const timeout = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout: –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ 10 —Å–µ–∫—É–Ω–¥')), 10000);
    });

    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –≤ SharedWorker
        const selectedAccount = accounts.find(acc => acc.id === selectedAccountId);
        console.log('üë§ –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:', selectedAccount);
        
        if (selectedAccount) {
            console.log('üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');
        }

        console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ API...');
        const friendData = {
            namePub: friendName.trim(),
            myAccId: selectedAccountId,
            friendPubKeyLibp2p: '' // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–∑–∂–µ
        };
        console.log('üìù –î–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∞:', friendData);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º myAccId
        await Promise.race([
            sharedWorkerApi.friends.add({
                friends: [friendData],
                myAccId: selectedAccountId
            }),
            timeout
        ]);
        
        console.log('‚úÖ –î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        return {
            success: true,
            message: `–î—Ä—É–≥ "${friendName}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`,
            messageType: 'success'
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞:', error);
        console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', {
            message: (error as any)?.message,
            stack: (error as any)?.stack,
            name: (error as any)?.name,
            error
        });
        
        return {
            success: false,
            message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞: ${(error as any)?.message || String(error)}`,
            messageType: 'error'
        };
    }
}
