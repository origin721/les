import { encrypt_curve25519_from_pass, decrypt_curve25519_from_pass } from "../../core/crypt";
import { back_store } from "../../local_back/back_store";
import { indexdb_wrapper } from "../indexdb_wrapper";
import { get_accounts } from "./get_accounts";
import { forceLog } from "../../core/debug/logger";

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è friendsByIds
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
 */
export function migrateAccountsFriends(): Promise<void> {
  return indexdb_wrapper((db) => {
    return new Promise<void>(async (res, rej) => {
      try {
        forceLog('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è friendsByIds');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        const accounts = await get_accounts();
        let migratedCount = 0;
        
        if (accounts.length === 0) {
          forceLog('‚úÖ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
          res();
          return;
        }

        const transaction = db.transaction(["accounts"], "readwrite");
        const store = transaction.objectStore("accounts");
        
        for (const account of accounts) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ friendsByIds
          if (account.friendsByIds !== undefined) {
            forceLog(`‚è≠Ô∏è –ê–∫–∫–∞—É–Ω—Ç ${account.id} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ friendsByIds, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
          }

          forceLog(`üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç ${account.id} (${account.namePub})`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ friendsByIds
          const updatedAccount = {
            ...account,
            friendsByIds: [], // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
            date_updated: new Date(),
          };

          // –®–∏—Ñ—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          const newData = await encrypt_curve25519_from_pass({
            pass: account.pass,
            message: JSON.stringify(updatedAccount),
          });
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
          store.put({ id: account.id, data: newData });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º back_store
          back_store.accounts_by_id[account.id] = updatedAccount;
          
          migratedCount++;
        }

        transaction.oncomplete = function () {
          forceLog(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${migratedCount}`);
          res();
        };

        transaction.onerror = function (event) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:", event);
          rej(new Error(`–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${JSON.stringify(event)}`));
        };

      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ migrateAccountsFriends:', error);
        rej(error);
      }
    });
  }) as Promise<void>;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
 * @returns true –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –ø–æ–ª—è friendsByIds
 */
export async function checkAccountsMigrationNeeded(): Promise<boolean> {
  try {
    const accounts = await get_accounts();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –ø–æ–ª—è friendsByIds
    const needMigration = accounts.some(account => account.friendsByIds === undefined);
    
    if (needMigration) {
      forceLog('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –ø–æ–ª—è friendsByIds, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è');
    } else {
      forceLog('‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ friendsByIds');
    }
    
    return needMigration;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    return false;
  }
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export async function autoMigrateAccounts(): Promise<void> {
  try {
    const needMigration = await checkAccountsMigrationNeeded();
    
    if (needMigration) {
      forceLog('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
      await migrateAccountsFriends();
      forceLog('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
  }
}
