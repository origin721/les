import { decrypt_curve25519_from_pass } from "../../core/crypt";
import { indexdb_wrapper } from "../indexdb_wrapper";
import { get_accounts } from "./get_accounts";

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –µ–≥–æ ID, —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç back_store
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SharedWorker –≥–¥–µ back_store –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
 */
export function get_account_password_by_id(accountId: string): Promise<string | null> {
  return new Promise(async (resolve, reject) => {
    try {
      console.log('üîç get_account_password_by_id: –∏—â–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞', accountId);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
      const accounts = await get_accounts();
      console.log('üìã get_account_password_by_id: –ø–æ–ª—É—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', accounts.length);
      
      if (accounts.length === 0) {
        console.log('‚ùå get_account_password_by_id: –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        resolve(null);
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞
      const passwords = new Set<string>();
      for (const account of accounts) {
        if (account.pass) {
          passwords.add(account.pass);
        }
      }
      
      if (passwords.size === 0) {
        console.log('‚ùå get_account_password_by_id: –ø–∞—Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        resolve(null);
        return;
      }
      
      console.log('üîê get_account_password_by_id: –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π:', passwords.size);
      
      // –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ IndexDB
      indexdb_wrapper((db) => {
        return new Promise((dbResolve, dbReject) => {
          const transaction = db.transaction(["accounts"], "readonly");
          const store = transaction.objectStore("accounts");
          
          const getRequest = store.get(accountId);
          
          getRequest.onerror = function(event) {
            console.error('‚ùå get_account_password_by_id: –æ—à–∏–±–∫–∞ IndexDB:', event);
            dbReject(event);
          };
          
          getRequest.onsuccess = async function(event) {
            try {
              const entity = (event.target as IDBRequest).result;
              if (!entity) {
                console.log('‚ùå get_account_password_by_id: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ IndexDB:', accountId);
                resolve(null);
                dbResolve();
                return;
              }
              
              console.log('‚úÖ get_account_password_by_id: –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ IndexDB, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å');
              
              // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–º –ø–∞—Ä–æ–ª–µ–º
              for (const password of passwords) {
                try {
                  console.log('üîê get_account_password_by_id: –ø—Ä–æ–±—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π:', password.length);
                  
                  const decryptedData = await decrypt_curve25519_from_pass({
                    pass: password,
                    cipherText: entity.data,
                  });
                  
                  if (decryptedData) {
                    const account = JSON.parse(decryptedData);
                    if (account.id === accountId) {
                      console.log('‚úÖ get_account_password_by_id: –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:', accountId);
                      resolve(password);
                      dbResolve();
                      return;
                    }
                  }
                } catch (err) {
                  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä–æ–ª—å
                  console.log('üîÑ get_account_password_by_id: –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥–æ—à–µ–ª, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π');
                }
              }
              
              console.log('‚ùå get_account_password_by_id: –Ω–∏ –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥–æ—à–µ–ª –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:', accountId);
              resolve(null);
              dbResolve();
              
            } catch (err) {
              console.error('‚ùå get_account_password_by_id: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
              dbReject(err);
            }
          };
        });
      });
      
    } catch (err) {
      console.error('‚ùå get_account_password_by_id: –≤–Ω–µ—à–Ω—è—è –æ—à–∏–±–∫–∞:', err);
      reject(err);
    }
  });
}
