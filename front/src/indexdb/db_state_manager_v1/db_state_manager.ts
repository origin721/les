import { DB_NAMES, DB_UPDATE_STATUS } from '../constants';
import { prodInfo, prodError, debugLog } from '../../core/debug/logger';
import type { DbStateRecord, DbUpdateStatus } from './constants';


/**
 * –í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
 */
const DB_STATE_MANAGER_VERSION = 1;

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
 */
function openStateDatabase(): Promise<IDBDatabase> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAMES.DB_STATE_MANAGER_V1, DB_STATE_MANAGER_VERSION);
    
    request.onupgradeneeded = (event) => {
      const db = request.result;
      
      // –°–æ–∑–¥–∞–µ–º store –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
      if (!db.objectStoreNames.contains('db_states')) {
        const store = db.createObjectStore('db_states', { keyPath: 'id' });
        prodInfo('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ db_states');
      }
    };
    
    request.onsuccess = () => {
      resolve(request.result);
    };
    
    request.onerror = () => {
      prodError('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π:', request.error);
      reject(request.error);
    };
  });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏
 */
export async function getDbState(dbName: string): Promise<DbStateRecord | null> {
  try {
    const db = await openStateDatabase();
    
    return new Promise((resolve, reject) => {
      const transaction = db.transaction(['db_states'], 'readonly');
      const store = transaction.objectStore('db_states');
      const request = store.get(dbName);
      
      request.onsuccess = () => {
        resolve(request.result || null);
      };
      
      request.onerror = () => {
        reject(request.error);
      };
      
      transaction.oncomplete = () => {
        db.close();
      };
    });
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î:', error);
    return null;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
export async function updateDbState(stateRecord: DbStateRecord): Promise<void> {
  try {
    const db = await openStateDatabase();
    
    return new Promise((resolve, reject) => {
      const transaction = db.transaction(['db_states'], 'readwrite');
      const store = transaction.objectStore('db_states');
      
      stateRecord.lastUpdated = Date.now();
      const request = store.put(stateRecord);
      
      request.onsuccess = () => {
        prodInfo('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', {
          dbName: stateRecord.dbName,
          version: stateRecord.version,
          status: stateRecord.status
        });
        resolve();
      };
      
      request.onerror = () => {
        prodError('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î:', request.error);
        reject(request.error);
      };
      
      transaction.oncomplete = () => {
        db.close();
      };
    });
  } catch (error) {
    prodError('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î:', error);
    throw error;
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
export async function setUpdateStatus(
  dbName: string, 
  status: DbUpdateStatus, 
  version?: number, 
  targetVersion?: number,
  errorMessage?: string
): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    let stateRecord = await getDbState(dbName);
    
    if (!stateRecord) {
      stateRecord = {
        id: dbName,
        dbName,
        version: version || 0,
        status,
        lastUpdated: Date.now()
      };
    } else {
      stateRecord.status = status;
      if (version !== undefined) stateRecord.version = version;
      if (targetVersion !== undefined) stateRecord.targetVersion = targetVersion;
      if (errorMessage !== undefined) stateRecord.errorMessage = errorMessage;
    }
    
    await updateDbState(stateRecord);
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
 */
export async function getPreviousDbVersion(dbName: string): Promise<number> {
  const state = await getDbState(dbName);
  return state?.version || 0;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
export async function canStartUpdate(dbName: string): Promise<boolean> {
  const state = await getDbState(dbName);
  
  if (!state) return true; // –ù–æ–≤–∞—è –±–∞–∑–∞, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å
  
  // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "update_started"
  return state.status !== DB_UPDATE_STATUS.UPDATE_STARTED;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export async function getAllDbStates(): Promise<DbStateRecord[]> {
  try {
    const db = await openStateDatabase();
    
    return new Promise((resolve, reject) => {
      const transaction = db.transaction(['db_states'], 'readonly');
      const store = transaction.objectStore('db_states');
      const request = store.getAll();
      
      request.onsuccess = () => {
        resolve(request.result);
      };
      
      request.onerror = () => {
        reject(request.error);
      };
      
      transaction.oncomplete = () => {
        db.close();
      };
    });
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ë–î:', error);
    return [];
  }
}

/**
 * –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
 */
export async function startMigrationTimer(
  dbName: string, 
  fromVersion: number, 
  toVersion: number
): Promise<void> {
  try {
    let stateRecord = await getDbState(dbName);
    
    if (!stateRecord) {
      stateRecord = {
        id: dbName,
        dbName,
        version: fromVersion,
        status: DB_UPDATE_STATUS.UPDATE_STARTED,
        lastUpdated: Date.now()
      };
    }
    
    stateRecord.migrationStartTime = Date.now();
    stateRecord.targetVersion = toVersion;
    stateRecord.executedMigrations = [];
    stateRecord.migratedTables = [];
    
    await updateDbState(stateRecord);
    prodInfo('‚è±Ô∏è –ù–∞—á–∞—Ç —Ç–∞–π–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏:', { dbName, fromVersion, toVersion });
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –ó–∞–ø–∏—Å–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–µ–µ –≤—Ä–µ–º—è
 */
export async function endMigrationTimer(dbName: string): Promise<void> {
  try {
    const stateRecord = await getDbState(dbName);
    if (!stateRecord || !stateRecord.migrationStartTime) {
      prodError('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏:', dbName);
      return;
    }
    
    const endTime = Date.now();
    stateRecord.migrationEndTime = endTime;
    stateRecord.migrationDurationMs = endTime - stateRecord.migrationStartTime;
    
    await updateDbState(stateRecord);
    prodInfo('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω —Ç–∞–π–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏:', { 
      dbName, 
      durationMs: stateRecord.migrationDurationMs,
      durationSec: Math.round(stateRecord.migrationDurationMs / 1000)
    });
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –ó–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export async function recordMigrationStep(
  dbName: string,
  stepInfo: {
    version: number;
    fileName: string; 
    schemaDuration: number;
    dataDuration: number;
  }
): Promise<void> {
  try {
    const stateRecord = await getDbState(dbName);
    if (!stateRecord) {
      prodError('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –¥–ª—è –∑–∞–ø–∏—Å–∏ —à–∞–≥–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', dbName);
      return;
    }
    
    if (!stateRecord.executedMigrations) {
      stateRecord.executedMigrations = [];
    }
    
    const now = Date.now();
    stateRecord.executedMigrations.push({
      version: stepInfo.version,
      fileName: stepInfo.fileName,
      schemaDuration: stepInfo.schemaDuration,
      dataDuration: stepInfo.dataDuration,
      startTime: now - stepInfo.schemaDuration - stepInfo.dataDuration,
      endTime: now
    });
    
    await updateDbState(stateRecord);
    prodInfo('üìù –ó–∞–ø–∏—Å–∞–Ω —à–∞–≥ –º–∏–≥—Ä–∞—Ü–∏–∏:', stepInfo);
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —à–∞–≥–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π (—Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç)
 */
export async function detectStuckMigrations(dbName: string): Promise<boolean> {
  try {
    const stateRecord = await getDbState(dbName);
    if (!stateRecord || stateRecord.status !== DB_UPDATE_STATUS.UPDATE_STARTED) {
      return false;
    }
    
    const STUCK_TIMEOUT_MS = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
    const now = Date.now();
    const migrationAge = stateRecord.migrationStartTime ? 
      now - stateRecord.migrationStartTime : 
      now - stateRecord.lastUpdated;
    
    const isStuck = migrationAge > STUCK_TIMEOUT_MS;
    
    if (isStuck) {
      prodInfo('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–≤–∏—Å—à–∞—è –º–∏–≥—Ä–∞—Ü–∏—è:', {
        dbName,
        ageMinutes: Math.round(migrationAge / 60000),
        lastUpdated: new Date(stateRecord.lastUpdated).toISOString()
      });
    }
    
    return isStuck;
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    return false;
  }
}

/**
 * –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–∏—Å—à–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export async function resetStuckMigration(dbName: string): Promise<void> {
  try {
    const stateRecord = await getDbState(dbName);
    if (!stateRecord) {
      prodInfo('‚ÑπÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–±—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:', dbName);
      return;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ IDLE
    stateRecord.status = DB_UPDATE_STATUS.IDLE;
    stateRecord.errorMessage = '–ú–∏–≥—Ä–∞—Ü–∏—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∏–∑-–∑–∞ –∑–∞–≤–∏—Å–∞–Ω–∏—è';
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    delete stateRecord.migrationStartTime;
    delete stateRecord.migrationEndTime;
    delete stateRecord.migrationDurationMs;
    delete stateRecord.targetVersion;
    
    await updateDbState(stateRecord);
    prodInfo('üîÑ –°–±—Ä–æ—à–µ–Ω–∞ –∑–∞–≤–∏—Å—à–∞—è –º–∏–≥—Ä–∞—Ü–∏—è:', dbName);
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∑–∞–≤–∏—Å—à–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
 */
export async function updateMigratedTables(dbName: string, tables: string[]): Promise<void> {
  try {
    const stateRecord = await getDbState(dbName);
    if (!stateRecord) {
      prodError('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', dbName);
      return;
    }
    
    if (!stateRecord.migratedTables) {
      stateRecord.migratedTables = [];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    tables.forEach(table => {
      if (!stateRecord.migratedTables!.includes(table)) {
        stateRecord.migratedTables!.push(table);
      }
    });
    
    await updateDbState(stateRecord);
    prodInfo('üìä –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:', { dbName, tables });
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è UI
 */
export async function getMigrationStats(dbName: string): Promise<{
  totalDuration: number;
  lastMigrationDate: Date | null;
  executedMigrations: Array<{
    version: number;
    fileName: string;
    schemaDuration: number;
    dataDuration: number;
    startTime: number;
    endTime: number;
  }>;
}> {
  try {
    const stateRecord = await getDbState(dbName);
    
    if (!stateRecord) {
      return {
        totalDuration: 0,
        lastMigrationDate: null,
        executedMigrations: []
      };
    }
    
    return {
      totalDuration: stateRecord.migrationDurationMs || 0,
      lastMigrationDate: stateRecord.migrationEndTime ? new Date(stateRecord.migrationEndTime) : null,
      executedMigrations: stateRecord.executedMigrations || []
    };
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    return {
      totalDuration: 0,
      lastMigrationDate: null,
      executedMigrations: []
    };
  }
}
