import { UserStateManager } from '../db_state_manager_v1/user_state_manager';

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
 */
export class AllUsersChecker {
  /**
   * –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å accounts —Ç–∞–±–ª–∏—Ü—É, –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ
   */
  static async scanAllUserIds(db: IDBDatabase): Promise<Set<string>> {
    return new Promise((resolve, reject) => {
      const transaction = db.transaction(['accounts'], 'readonly');
      const store = transaction.objectStore('accounts');
      const request = store.getAll();
      
      request.onsuccess = () => {
        const accounts = request.result;
        const userIds = new Set(accounts.map((account: any) => account.id));
        resolve(userIds);
      };
      
      request.onerror = () => reject(request.error);
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
   */
  static async allUsersReady(db: IDBDatabase, version: number): Promise<boolean> {
    try {
      // 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ accounts —Ç–∞–±–ª–∏—Ü—ã
      const allSystemUserIds = await this.scanAllUserIds(db);
      
      // 2. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –º–∏–≥—Ä–∞—Ü–∏—é
      const completedUserIds = new Set(await UserStateManager.getUsersCompletedVersion(version));
      
      // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —Ä–∞–≤–Ω—ã –ò –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
      const result = allSystemUserIds.size === completedUserIds.size && 
                     [...allSystemUserIds].every(id => completedUserIds.has(id));
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${version}:`);
      console.log(`   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${allSystemUserIds.size}`);
      console.log(`   - –ó–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –º–∏–≥—Ä–∞—Ü–∏—é: ${completedUserIds.size}`);
      console.log(`   - –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result ? '‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤—ã' : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ'}`);
      
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—é
   */
  static async getPendingUsers(db: IDBDatabase, version: number): Promise<string[]> {
    const allSystemUserIds = await this.scanAllUserIds(db);
    const completedUserIds = new Set(await UserStateManager.getUsersCompletedVersion(version));
    
    return [...allSystemUserIds].filter(id => !completedUserIds.has(id));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  static async getUserReadinessStats(db: IDBDatabase, version: number): Promise<{
    totalUsers: number;
    completedUsers: number;
    pendingUsers: string[];
    completionPercentage: number;
    isReady: boolean;
  }> {
    try {
      const allSystemUserIds = await this.scanAllUserIds(db);
      const completedUserIds = new Set(await UserStateManager.getUsersCompletedVersion(version));
      const pendingUsers = [...allSystemUserIds].filter(id => !completedUserIds.has(id));
      
      const totalUsers = allSystemUserIds.size;
      const completedUsers = completedUserIds.size;
      const completionPercentage = totalUsers > 0 ? Math.round((completedUsers / totalUsers) * 100) : 100;
      const isReady = totalUsers === completedUsers && totalUsers > 0;
      
      return {
        totalUsers,
        completedUsers,
        pendingUsers,
        completionPercentage,
        isReady
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return {
        totalUsers: 0,
        completedUsers: 0,
        pendingUsers: [],
        completionPercentage: 0,
        isReady: false
      };
    }
  }
}
