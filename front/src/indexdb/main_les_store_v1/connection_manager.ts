import { debugLog, prodError, prodInfo } from '../../core/debug/logger';
import { 
  getCurrentDbVersion, 
  preloadMigrations, 
  runSchemaMigrations, 
  getMaxVersion
} from './migrations/migrations';
import { runEmergencyMigrations } from './migrations/emergency_migrations';
import { DB_NAMES, DB_UPDATE_STATUS } from '../constants';
import { 
  getPreviousDbVersion, 
  setUpdateStatus, 
  canStartUpdate,
  startMigrationTimer,
  endMigrationTimer,
  recordMigrationStep,
  detectStuckMigrations,
  resetStuckMigration as resetStuckMigrationState
} from '../db_state_manager_v1/db_state_manager';
import { REQUIRED_STORES } from "./REQUIRED_STORES";
import { RecoveryManager } from './recovery_manager';
import { VersionManager } from './version_manager';

const isDebugMode = false;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
let cachedConnection: IDBDatabase | null = null;
let connectionPromise: Promise<IDBDatabase> | null = null;
let closeTimer: NodeJS.Timeout | null = null;
let isClosing = false;

// –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
let activeRequestsCount = 0;

const IDLE_TIMEOUT = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ IndexedDB
 * Promise-based –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ç lifecycle —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export class ConnectionManager {
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î
   */
  static async getConnection(): Promise<IDBDatabase> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–±–æ–µ–≤
    await ConnectionManager.checkAndRecoverFromFailures();
    
    // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ
    if (cachedConnection && !isClosing) {
      return cachedConnection;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (connectionPromise) {
      return connectionPromise;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connectionPromise = ConnectionManager.createNewConnection();
    
    try {
      const db = await connectionPromise;
      cachedConnection = db;
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      ConnectionManager.setupConnectionHandlers(db);

      return db;
    } catch (error) {
      connectionPromise = null;
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  static async checkAndRecoverFromFailures(): Promise<void> {
    try {
      const dbName = DB_NAMES.MAIN_LES_STORE_V1;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å—à–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
      const hasStuckMigration = await detectStuckMigrations(dbName);
      
      if (hasStuckMigration) {
        prodInfo('üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–≤–∏—Å—à–∞—è –º–∏–≥—Ä–∞—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...');
        await ConnectionManager.resetStuckMigration(dbName);
      }

      // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ Recovery Manager
      await RecoveryManager.checkOnAppStart();
      
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î:', error);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  static async resetStuckMigration(dbName: string): Promise<void> {
    try {
      await resetStuckMigrationState(dbName);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (cachedConnection) {
        cachedConnection.close();
        cachedConnection = null;
      }
      connectionPromise = null;
      
      prodInfo('‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞');
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ indexdb_wrapper)
   */
  private static async createNewConnection(): Promise<IDBDatabase> {
    return new Promise(async (resolve, reject) => {
      try {
        const dbName = DB_NAMES.MAIN_LES_STORE_V1;

        // 0. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const canStart = await canStartUpdate(dbName);
        if (!canStart) {
          throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
        }

        // 1. –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const currentVersion = await getCurrentDbVersion(dbName);
        const previousStateVersion = await getPreviousDbVersion(dbName);
        const targetVersion = getMaxVersion();
        
        prodInfo('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏—è—Ö –ë–î:', {
          currentVersion,
          previousStateVersion,
          targetVersion,
          needsMigration: currentVersion < targetVersion
        });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π
        const reliableOldVersion = Math.max(currentVersion, previousStateVersion);
        
        // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è + –í–†–ï–ú–Ø
        if (reliableOldVersion < targetVersion) {
          await setUpdateStatus(dbName, DB_UPDATE_STATUS.UPDATE_STARTED, reliableOldVersion, targetVersion);
          await startMigrationTimer(dbName, reliableOldVersion, targetVersion);
        }

        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
        let preloadedMigrations = new Map();

        // 3. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏
        if (reliableOldVersion < targetVersion) {
          const preloadStart = Date.now();
          prodInfo('üîÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –º–∏–≥—Ä–∞—Ü–∏–π c –≤–µ—Ä—Å–∏–∏:', reliableOldVersion);
          preloadedMigrations = await preloadMigrations(reliableOldVersion, targetVersion);
          const preloadDuration = Date.now() - preloadStart;
          prodInfo(`‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${preloadDuration}–º—Å`);
        }

        // 4. –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ü–µ–ª–µ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π
        let openRequest = indexedDB.open(dbName, targetVersion);
        let actualOldVersion = currentVersion;

        openRequest.onupgradeneeded = function (event) {
          const db = openRequest.result;
          const realOldVersion = event.oldVersion ?? 0;
          const newVersion = event.newVersion ?? targetVersion;
          
          actualOldVersion = realOldVersion;
          
          prodInfo('üîÑ IndexDB onupgradeneeded:', {
            oldVersion: realOldVersion,
            newVersion,
            existingStores: Array.from(db.objectStoreNames),
            detectedCurrentVersion: currentVersion,
            usingRealOldVersion: realOldVersion
          });
          
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
          if (realOldVersion !== currentVersion) {
            prodInfo('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:', {
              detectedVersion: currentVersion,
              realVersion: realOldVersion
            });
            preloadedMigrations = new Map();
          }
          
          // 5. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
          if (realOldVersion < newVersion) {
            try {
              if (preloadedMigrations.size === 0) {
                runEmergencyMigrations({ db, realOldVersion, newVersion });
              } else {
                ConnectionManager.runSchemaMigrationsWithTiming(
                  db, realOldVersion, newVersion, preloadedMigrations, dbName
                );
              }
            } catch (error) {
              prodError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã IndexedDB:', error);
              throw error;
            }
          }
        };

        openRequest.onerror = async function () {
          prodError("IndexDB openRequest error:", openRequest.error);
          await setUpdateStatus(dbName, DB_UPDATE_STATUS.UPDATE_FAILED, undefined, undefined, openRequest.error?.message);
          reject(openRequest.error);
        };

        openRequest.onsuccess = async function () {
          let db = openRequest.result;

          prodInfo('‚úÖ IndexDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–µ—Ä—Å–∏—è –ë–î:', db.version);

          try {
            const missingStores = REQUIRED_STORES.filter(storeName => !db.objectStoreNames.contains(storeName));
            
            if (missingStores.length > 0) {
              prodError('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ object stores:', missingStores);
              prodInfo('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
              
              db.close();
              
              const deleteRequest = indexedDB.deleteDatabase(dbName);
              deleteRequest.onsuccess = () => {
                prodInfo('‚úÖ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è –±–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞');
                setTimeout(() => {
                  prodInfo('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã...');
                  ConnectionManager.createNewConnection().then(resolve).catch(reject);
                }, 100);
              };
              
              deleteRequest.onerror = () => {
                prodError('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π –±–∞–∑—ã:', deleteRequest.error);
                reject(deleteRequest.error);
              };
              
              return;
            }

            // 6. –í –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ü–µ–Ω—Ç—Ä–∏—á–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è 
            // —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ accounts_service.onLogin()
            // ConnectionManager –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã
            prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ë–î –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
            prodInfo('‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            
            // 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è + –í–†–ï–ú–Ø
            await setUpdateStatus(dbName, DB_UPDATE_STATUS.UPDATE_SUCCESS, db.version);
            await endMigrationTimer(dbName);
            
            resolve(db);
            
          } catch (error) {
            prodError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö:', error);
            const errorMessage = error instanceof Error ? error.message : String(error);
            await setUpdateStatus(dbName, DB_UPDATE_STATUS.UPDATE_FAILED, undefined, undefined, errorMessage);
            db.close();
            reject(error);
          }
        };

        openRequest.onblocked = function () {
          debugLog('Database connection blocked');
          reject(new Error('Database connection blocked'));
        };
        
      } catch (error) {
        prodError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IndexDB:', error);
        reject(error);
      }
    });
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã —Å –∑–∞–ø–∏—Å—å—é –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞–∂–¥–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  private static runSchemaMigrationsWithTiming(
    db: IDBDatabase,
    oldVersion: number,
    newVersion: number,
    preloadedMigrations: Map<number, any>,
    dbName: string
  ): void {
    prodInfo('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã IndexedDB:', {
      oldVersion,
      newVersion,
      existingStores: Array.from(db.objectStoreNames)
    });

    try {
      for (let version = oldVersion; version < newVersion; version++) {
        const targetVersion = version + 1;
        
        prodInfo(`üìã –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã —Å –≤–µ—Ä—Å–∏–∏ ${version} –¥–æ ${targetVersion}`);
        
        const migrationModule = preloadedMigrations.get(version);
        
        if (!migrationModule) {
          throw new Error(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }

        // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã
        const schemaStart = Date.now();
        migrationModule.migrationScheme(db);
        const schemaDuration = Date.now() - schemaStart;
        
        prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã ${migrationModule.migrationInfo.fileName} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${schemaDuration}–º—Å`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã (–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ –≤ –¥–∞–Ω–Ω—ã—Ö)
        migrationModule._schemaDuration = schemaDuration;
      }

      prodInfo('üèÅ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã IndexedDB –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', 
        Array.from(db.objectStoreNames));
      
    } catch (error) {
      prodError('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã IndexedDB:', error);
      throw error;
    }
  }


  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private static setupConnectionHandlers(db: IDBDatabase): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–∑–≤–Ω–µ
    db.onversionchange = function () {
      prodInfo('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è IndexDB (version change)');
      if (closeTimer) {
        clearTimeout(closeTimer);
        closeTimer = null;
      }
      isClosing = true;
      activeRequestsCount = 0;
      db.close();
      cachedConnection = null;
      connectionPromise = null;
      isClosing = false;
    };

    db.onclose = function () {
      prodInfo('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ IndexDB –∑–∞–∫—Ä—ã—Ç–æ');
      if (closeTimer) {
        clearTimeout(closeTimer);
        closeTimer = null;
      }
      activeRequestsCount = 0;
      cachedConnection = null;
      connectionPromise = null;
      isClosing = false;
    };
  }

  /**
   * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  static incrementActiveRequests(): void {
    activeRequestsCount++;
    if (isDebugMode) {
      debugLog(`üìà –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${activeRequestsCount}`);
    }
    
    if (closeTimer) {
      clearTimeout(closeTimer);
      closeTimer = null;
      if (isDebugMode) {
        debugLog('‚è∞ –¢–∞–π–º–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è —Å–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ –Ω–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
      }
    }
  }

  /**
   * –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  static decrementActiveRequests(): void {
    activeRequestsCount = Math.max(0, activeRequestsCount - 1);
    if (isDebugMode) {
      debugLog(`üìâ –£–º–µ–Ω—å—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${activeRequestsCount}`);
    }
    
    if (activeRequestsCount === 0) {
      ConnectionManager.startCloseTimer();
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private static startCloseTimer(): void {
    if (closeTimer) {
      clearTimeout(closeTimer);
    }
    
    closeTimer = setTimeout(() => {
      if (cachedConnection && !isClosing && activeRequestsCount === 0) {
        prodInfo(`üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è IndexDB –ø–æ —Ç–∞–π–º–∞—É—Ç—É (5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤). –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${activeRequestsCount}`);
        isClosing = true;
        cachedConnection.close();
        cachedConnection = null;
        connectionPromise = null;
        closeTimer = null;
        isClosing = false;
      } else if (activeRequestsCount > 0) {
        if (isDebugMode) {
          debugLog(`‚è∞ –¢–∞–π–º–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${activeRequestsCount}`);
        }
      }
    }, IDLE_TIMEOUT);
    
    if (isDebugMode) {
      debugLog(`‚è∞ –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ 5 –º–∏–Ω—É—Ç. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${activeRequestsCount}`);
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ª–∞–¥–∫–∏)
   */
  static forceCloseConnection(): void {
    if (cachedConnection) {
      prodInfo('üîí –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è IndexDB');
      if (closeTimer) {
        clearTimeout(closeTimer);
        closeTimer = null;
      }
      isClosing = true;
      activeRequestsCount = 0;
      cachedConnection.close();
      cachedConnection = null;
      connectionPromise = null;
      isClosing = false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  static getConnectionInfo() {
    return {
      hasConnection: !!cachedConnection,
      isClosing,
      activeRequestsCount,
      hasCloseTimer: !!closeTimer,
      connectionPromiseActive: !!connectionPromise
    };
  }
}
