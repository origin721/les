import { encrypt_curve25519_from_pass } from "../../../../core/crypt";
import { indexdb_wrapper } from "../../indexdb_wrapper";
import { back_store } from "../../../../local_back/back_store/back_store";
import { prodError, prodInfo, devDB, devCrypto, devAuth } from "../../../../core/debug/logger";
import { get_accounts } from "../accounts/get_accounts";
import type { RoomEntityFull } from "./add_room";
import { rooms_store_utils } from "../../../../local_back/back_store";

export function put_rooms(
  update_list: RoomEntityFull[],
  explicitMyAccId?: string // –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID –∞–∫–∫–∞—É–Ω—Ç–∞
): Promise<void> {
  devDB('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –Ω–∞—á–∞—Ç–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', update_list.length, 'explicitMyAccId:', explicitMyAccId);
  devDB('üîç back_store.accounts_by_id:', back_store.accounts_by_id);
  
  return new Promise((mRes, mRej) => {
    indexdb_wrapper((db) => {
      return new Promise(async (res, rej) => {
        try {
          devDB('üì¶ IndexDB transaction —Å–æ–∑–¥–∞–Ω–∞');
          const transaction = db.transaction(["rooms"], "readwrite");
          const store = transaction.objectStore("rooms");
          
          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ back_store –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
          if (Object.keys(back_store.accounts_by_id).length === 0) {
            devDB('üîÑ back_store.accounts_by_id –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã...');
            const accounts = await get_accounts();
            for (let ac of accounts) {
              back_store.accounts_by_id[ac.id] = ac;
            }
            devDB('‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ back_store:', Object.keys(back_store.accounts_by_id));
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
          for (let item of update_list) {
            devDB('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', item);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–±–æ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π myAccId, –ª–∏–±–æ –±–µ—Ä–µ–º –∏–∑ item
            const accountId = explicitMyAccId || item.myAccId;
            devDB('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º accountId:', accountId);
            
            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏–∑ –∫–µ—à–∞ back_store
            let accountPassword: string | null = null;
            
            const cachedAccount = back_store.accounts_by_id[accountId];
            if (cachedAccount && cachedAccount.pass) {
              accountPassword = cachedAccount.pass;
              devAuth('üöÄ –ü–∞—Ä–æ–ª—å –ø–æ–ª—É—á–µ–Ω –∏–∑ back_store –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:', accountId);
            } else {
              devAuth('‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ back_store:', accountId);
              accountPassword = null;
            }
            
            if (!accountPassword) {
              prodError('‚ùå –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', accountId);
              mRej(new Error(`–ü–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω`));
              rej(new Error(`–ü–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω`));
              return;
            }
            
            devCrypto('üîê –ù–∞—á–∏–Ω–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...');
            const dataToEncrypt = {
              ...item,
              date_updated: new Date(),
            };
            devCrypto('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', dataToEncrypt);
            devCrypto('üîê –ü–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω–æ–π:', accountPassword.length, '—Å–∏–º–≤–æ–ª–æ–≤');
            
            try {
              devCrypto('‚è∞ –í—ã–∑—ã–≤–∞–µ–º encrypt_curve25519_from_pass...');
              const encryptStartTime = Date.now();
              
              const newData = await encrypt_curve25519_from_pass({
                pass: accountPassword,
                message: JSON.stringify(dataToEncrypt),
              });
              
              const encryptDuration = Date.now() - encryptStartTime;
              devCrypto('‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞', encryptDuration, '–º—Å');
              devCrypto('üìä –†–∞–∑–º–µ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', newData?.length || 'undefined');
              
              devDB('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –≤ IndexDB...');
              const storeStartTime = Date.now();
              
              const putRequest = store.put({ id: item.id, data: newData });
              
              putRequest.onsuccess = function() {
                const storeDuration = Date.now() - storeStartTime;
                devDB('‚úÖ store.put —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞', storeDuration, '–º—Å –¥–ª—è ID:', item.id);
              };
              
              putRequest.onerror = function(event) {
                devDB('‚ùå store.put –æ—à–∏–±–∫–∞ –¥–ª—è ID:', item.id, 'event:', event);
              };
              
            } catch (encryptError) {
              prodError('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', encryptError);
              mRej(encryptError);
              rej(encryptError);
              return;
            }
          }

          transaction.oncomplete = function () {
            devDB("üéâ Transaction oncomplete triggered!");
            devDB("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤ IndexDB");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—ã –≤ back_store —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            rooms_store_utils.put(update_list);
            
            devDB('‚úÖ –ö–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ back_store —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å');
            devDB('üéØ –í—ã–∑—ã–≤–∞–µ–º res() –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è put_rooms');
            prodInfo('‚úÖ –ö–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
            mRes();
            res();
          };

          transaction.onerror = function (event) {
            devDB("‚ùå Transaction onerror triggered!");
            prodError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ IndexDB:", event);
            const error = new Error(`IndexDB error: ${JSON.stringify(event)}`);
            mRej(error);
            rej(error);
          };

          transaction.onabort = function (event) {
            devDB("‚ùå Transaction onabort triggered!");
            prodError("‚ùå Transaction –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞:", event);
            const error = new Error(`IndexDB transaction aborted: ${JSON.stringify(event)}`);
            mRej(error);
            rej(error);
          };
        } catch (error) {
          prodError('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ put_rooms:', error);
          mRej(error);
          rej(error);
        }
      });
    });
  });
}
