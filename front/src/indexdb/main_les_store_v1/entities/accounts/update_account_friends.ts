import { encrypt_curve25519_from_pass } from "../../../../core/crypt";
import { back_store } from "../../../../local_back/back_store/back_store";
import { indexdb_wrapper } from "../../indexdb_wrapper";
import { prodError, prodInfo, devDB } from "../../../../core/debug/logger";

export type UpdateAccountFriendsOperation = {
  add?: string[];
  remove?: string[];
};

/**
 * –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –≤ –∞–∫–∫–∞—É–Ω—Ç–µ
 * @param accountId ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param operation –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
 */
export function updateAccountFriendsList(
  accountId: string, 
  operation: UpdateAccountFriendsOperation
): Promise<void> {
  return indexdb_wrapper((db) => {
    return new Promise<void>(async (res, rej) => {
      try {
        devDB(`üîÑ updateAccountFriendsList –ù–ê–ß–ê–õ–û –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`, operation);
        
        const transaction = db.transaction(["accounts"], "readwrite");
        const store = transaction.objectStore("accounts");
        
        devDB(`üîÑ IndexDB transaction —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ back_store
        const existingAccount = back_store.accounts_by_id[accountId];
        if (!existingAccount) {
          prodError(`‚ùå –ê–∫–∫–∞—É–Ω—Ç ${accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ back_store`);
          throw new Error(`Account ${accountId} not found in back_store`);
        }
        
        devDB(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ back_store: ${accountId}`, existingAccount.friendsByIds);

        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
        let currentFriends = existingAccount.friendsByIds || [];
        devDB(`üîç –¢–µ–∫—É—â–∏–µ –¥—Ä—É–∑—å—è: ${currentFriends}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π
        if (operation.add) {
          devDB(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∑–µ–π: ${operation.add}`);
          for (const friendId of operation.add) {
            if (!currentFriends.includes(friendId)) {
              currentFriends.push(friendId);
            }
          }
        }
        
        // –£–¥–∞–ª—è–µ–º –¥—Ä—É–∑–µ–π
        if (operation.remove) {
          devDB(`‚ûñ –£–¥–∞–ª—è–µ–º –¥—Ä—É–∑–µ–π: ${operation.remove}`);
          currentFriends = currentFriends.filter(
            friendId => !operation.remove!.includes(friendId)
          );
        }

        devDB(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π: ${currentFriends}`);

        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –∞–∫–∫–∞—É–Ω—Ç–∞
        const updatedAccount = {
          ...existingAccount,
          friendsByIds: currentFriends,
          date_updated: new Date(),
        };

        devDB(`üîê –ù–∞—á–∏–Ω–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`);
        
        // –®–∏—Ñ—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const encryptStartTime = Date.now();
        const newData = await encrypt_curve25519_from_pass({
          pass: existingAccount.pass,
          message: JSON.stringify(updatedAccount),
        });
        const encryptDuration = Date.now() - encryptStartTime;
        
        devDB(`‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${encryptDuration} –º—Å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
        devDB(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexDB –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`);
        const putStartTime = Date.now();
        const putRequest = store.put({ id: accountId, data: newData });

        putRequest.onsuccess = function() {
          const putDuration = Date.now() - putStartTime;
          devDB(`‚úÖ store.put —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${putDuration} –º—Å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`);
        };

        putRequest.onerror = function(event) {
          prodError(`‚ùå store.put –æ—à–∏–±–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`, event);
          prodError("‚ùå Error in store.put:", event);
          rej(new Error(`IndexDB put error: ${JSON.stringify(event)}`));
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º back_store
        back_store.accounts_by_id[accountId] = updatedAccount;
        devDB(`‚úÖ back_store –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`);

        transaction.oncomplete = function () {
          prodInfo(`üéâ Transaction oncomplete –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`);
          prodInfo(`‚úÖ Account ${accountId} friends list updated successfully`);
          res();
        };

        transaction.onerror = function (event) {
          prodError(`‚ùå Transaction onerror –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`, event);
          prodError("‚ùå Error updating account friends list:", event);
          rej(new Error(`IndexDB error: ${JSON.stringify(event)}`));
        };

        transaction.onabort = function (event) {
          prodError(`‚ùå Transaction onabort –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`, event);
          prodError("‚ùå Transaction was aborted:", event);
          rej(new Error(`IndexDB transaction aborted: ${JSON.stringify(event)}`));
        };

      } catch (error) {
        prodError(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ updateAccountFriendsList –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountId}`, error);
        prodError('‚ùå Critical error in updateAccountFriendsList:', error);
        rej(error);
      }
    });
  }) as Promise<void>;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
 * @param accountId ID –∞–∫–∫–∞—É–Ω—Ç–∞
 * @returns –°–ø–∏—Å–æ–∫ ID –¥—Ä—É–∑–µ–π
 */
export function getAccountFriendsList(accountId: string): string[] {
  const account = back_store.accounts_by_id[accountId];
  return account?.friendsByIds || [];
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π ID –¥—Ä—É–≥–æ–º –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
 * @param accountId ID –∞–∫–∫–∞—É–Ω—Ç–∞
 * @param friendId ID –¥—Ä—É–≥–∞
 * @returns true –µ—Å–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–º
 */
export function isAccountFriend(accountId: string, friendId: string): boolean {
  const friends = getAccountFriendsList(accountId);
  return friends.includes(friendId);
}
