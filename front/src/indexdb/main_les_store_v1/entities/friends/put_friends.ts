import { encrypt_curve25519_from_pass } from "../../../../core/crypt";
import { back_store } from "../../../../local_back/back_store/back_store";
import { indexdb_wrapper } from "../../indexdb_wrapper";
import type { FriendEntity } from "./add_friend";
import { prodError, prodInfo, devDB, devCrypto, devAuth } from "../../../../core/debug/logger";

export type FriendEntityPut = {
  id: string;
  namePub: string;
  myAccId: string;
  friendPubKeyLibp2p: string;
  date_updated?: Date;
}

export function put_friends(new_list: FriendEntityPut[]) {
  devDB('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –Ω–∞—á–∞—Ç–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', new_list.length);
  devDB('üîç back_store.accounts_by_id:', back_store.accounts_by_id);
  
  return indexdb_wrapper((db) => {
    return new Promise(async (res, rej) => {
      try {
        devDB('üì¶ IndexDB transaction —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è PUT');
        const transaction = db.transaction(["friends"], "readwrite");
        const store = transaction.objectStore("friends");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
        for (let item of new_list) {
          devDB('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞:', item);
          
          const acc = back_store.accounts_by_id[item.myAccId];
          devAuth('üë§ –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', acc);
          
          if (!acc) {
            prodError('‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ back_store –¥–ª—è ID:', item.myAccId);
            prodError('‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:', Object.keys(back_store.accounts_by_id));
            rej(new Error(`–ê–∫–∫–∞—É–Ω—Ç ${item.myAccId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ back_store`));
            return;
          }
          
          if (!acc.pass) {
            prodError('‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –ø–∞—Ä–æ–ª—è:', acc);
            rej(new Error(`–£ –∞–∫–∫–∞—É–Ω—Ç–∞ ${item.myAccId} –Ω–µ—Ç –ø–∞—Ä–æ–ª—è`));
            return;
          }
          
          devCrypto('üîê –ù–∞—á–∏–Ω–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
          const dataToEncrypt = {
            ...item,
            date_updated: new Date(),
          };
          devCrypto('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', dataToEncrypt);
          
          const newData = await encrypt_curve25519_from_pass({
            pass: acc.pass,
            message: JSON.stringify(dataToEncrypt),
          });
          devCrypto('‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
          
          devDB('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –≤ IndexDB...');
          store.put({ id: item.id, data: newData });
        }

        transaction.oncomplete = function () {
          devDB("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤ IndexDB");
          prodInfo("‚úÖ –î—Ä—É–∑—å—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
          res();
        };

        transaction.onerror = function (event) {
          prodError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ IndexDB:", event);
          rej(new Error(`IndexDB PUT error: ${JSON.stringify(event)}`));
        };
      } catch (error) {
        prodError('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ put_friends:', error);
        rej(error);
      }
    });
  })
}
