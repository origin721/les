//import { AES } from "../../../core/crypt";
import { encrypt_curve25519_from_pass } from "../../../../core/crypt";
import type { FriendEntity, FriendEntityFull } from "./types";
import { gen_pass } from "../../../../core/random/gen_pass";
import { uuidv4 } from "../../../../core/uuid";
import { indexdb_wrapper } from "../../indexdb_wrapper";
import {
  privateKeyToString,
  recommendedGenerateKeyPair,
} from "../../../../libs/libp2p";
import { back_store } from "../../../../local_back/back_store/back_store";
import { FRIENDS_VERSION } from "./constants";
import { prodInfo, prodError, devDB } from "../../../../core/debug/logger";

// 1. –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å myId –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
export function add_friend(
  new_list: FriendEntity[],
  myAccId?: string,
): Promise<FriendEntityFull[]> {
  return indexdb_wrapper((db) => {
    return new Promise(async (res, rej) => {
      try {
        prodInfo(
          `üîÑ add_friend –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è: –¥–æ–±–∞–≤–ª—è–µ–º ${new_list.length} –¥—Ä—É–∑–µ–π, myAccId=${myAccId}`,
        );
        devDB("üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", new_list);
        devDB(
          "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ back_store:",
          Object.keys(back_store.accounts_by_id),
        );

        const transaction = db.transaction(["friends"], "readwrite");
        const store = transaction.objectStore("friends");

        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
        const addedFriends: FriendEntityFull[] = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        for (let item of new_list) {
          const newId = uuidv4();
          //const libp2p_keyPair = await recommendedGenerateKeyPair();

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π myAccId –∏–ª–∏ —Ç–æ—Ç —á—Ç–æ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ
          const effectiveMyAccId = myAccId || item.myAccId;
          devDB(
            `üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∞: ${item.namePub}, effectiveMyAccId: ${effectiveMyAccId}`,
          );

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
          const acc = back_store.accounts_by_id[effectiveMyAccId];
          if (!acc) {
            const error = `‚ùå –ê–∫–∫–∞—É–Ω—Ç ${effectiveMyAccId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ back_store`;
            prodError(error);
            prodError(
              "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
              Object.keys(back_store.accounts_by_id),
            );
            throw new Error(error);
          }

          if (!acc.pass) {
            const error = `‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ ${effectiveMyAccId} –Ω–µ—Ç –ø–∞—Ä–æ–ª—è`;
            prodError(error);
            throw new Error(error);
          }

          devDB(
            `üîê –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∞ —Å –ø–∞—Ä–æ–ª–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞ ${effectiveMyAccId}`,
          );

          const friendData = {
            ...item,
            id: newId,
            myAccId: effectiveMyAccId, // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π myAccId —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
            //_pass: gen_pass(),
            //_libp2p_keyPair: privateKeyToString(libp2p_keyPair),
            date_created: new Date(),
            date_updated: new Date(),
            version: FRIENDS_VERSION,
          };

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ back_store
          addedFriends.push(friendData);

          const newData = await encrypt_curve25519_from_pass({
            pass: acc.pass,
            message: JSON.stringify(friendData),
          });

          store.add({ id: newId, data: newData });
          prodInfo(`‚úÖ –î—Ä—É–≥ ${item.namePub} –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: ${newId}`);
        }

        transaction.oncomplete = function () {
          prodInfo("‚úÖ add_friend: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤ IndexedDB");

          // –û–±–Ω–æ–≤–ª—è–µ–º back_store –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏
          for (const friendData of addedFriends) {
            back_store.friends_by_id[friendData.id] = friendData;
            devDB(
              `üìä –î—Ä—É–≥ ${friendData.namePub} –¥–æ–±–∞–≤–ª–µ–Ω –≤ back_store —Å ID: ${friendData.id}`,
            );
          }

          prodInfo(
            `‚úÖ add_friend: ${addedFriends.length} –¥—Ä—É–∑–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å back_store`,
          );
          res(addedFriends); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        };

        transaction.onerror = function (event) {
          const errorCode = (event.target as any)?.errorCode;
          const error = `‚ùå add_friend: –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ IndexedDB: ${errorCode}`;
          prodError(error);
          rej(new Error(error));
        };
      } catch (error) {
        prodError("‚ùå add_friend: –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", error);
        rej(error);
      }
    });
  });
}
