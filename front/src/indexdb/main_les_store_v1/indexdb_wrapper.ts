import { indexdb_order } from "./indexdb_order";
import { debugLog, prodError, prodInfo, devDB } from '../../core/debug/logger';
import { 
  getCurrentDbVersion, 
  preloadMigrations, 
  runSchemaMigrations, 
  runDataMigrations,
  getMaxVersion
} from './migrations/migrations';
import { DB_NAMES, DB_UPDATE_STATUS } from '../constants';
import { 
  getPreviousDbVersion, 
  setUpdateStatus, 
  canStartUpdate 
} from '../db_state_manager_v1/db_state_manager';

const counterInfo = {
  open: 0,
  close: 0,
  success: 0,
  error: 0,
}

const isDebugMode = false;

export async function indexdb_wrapper(
  onChange: (db: IDBDatabase) => Promise<void>,
) {
  if(isDebugMode) {
    ++counterInfo.open;
    debugLog({counterInfo});
  }

  const resultPromise = new Promise(async (_res, _rej) => {
    const res = (_data: any) => {
      _res(_data);
      
      if(!isDebugMode) return

      ++counterInfo.close;
      ++counterInfo.success;
      debugLog({counterInfo});
    }
    const rej = (_err: any) => {
      _rej(_err);

      if(!isDebugMode) return

      ++counterInfo.close;
      ++counterInfo.error;
      debugLog({counterInfo});
    }

    try {
      indexdb_order(async (onFinishOrder) => {
        const dbName = DB_NAMES.MAIN_LES_STORE_V1;

        resultPromise.finally(onFinishOrder);

        try {
          // 0. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          const canStart = await canStartUpdate(dbName);
          if (!canStart) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
          }

          // 1. –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
          const currentVersion = await getCurrentDbVersion(dbName);
          const previousStateVersion = await getPreviousDbVersion(dbName);
          const targetVersion = getMaxVersion();
          
          prodInfo('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏—è—Ö –ë–î:', {
            currentVersion,
            previousStateVersion,
            targetVersion,
            needsMigration: currentVersion < targetVersion
          });

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π
          const reliableOldVersion = Math.max(currentVersion, previousStateVersion);
          
          // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          if (reliableOldVersion < targetVersion) {
            await setUpdateStatus(dbName, DB_UPDATE_STATUS.UPDATE_STARTED, reliableOldVersion, targetVersion);
          }

          // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
          let preloadedMigrations = new Map();

          // 3. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–¥–µ–∂–Ω—É—é –≤–µ—Ä—Å–∏—é
          if (reliableOldVersion < targetVersion) {
            prodInfo('üîÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –º–∏–≥—Ä–∞—Ü–∏–π c –≤–µ—Ä—Å–∏–∏:', reliableOldVersion);
            preloadedMigrations = await preloadMigrations(reliableOldVersion, targetVersion);
          }

          // 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ü–µ–ª–µ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π
          let openRequest = indexedDB.open(dbName, targetVersion);
          
          // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑ onupgradeneeded
          let actualOldVersion = currentVersion;

          openRequest.onupgradeneeded = function (event) {
            const db = openRequest.result;
            const realOldVersion = event.oldVersion ?? 0;
            const newVersion = event.newVersion ?? targetVersion;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ onsuccess
            actualOldVersion = realOldVersion;
            
            prodInfo('üîÑ IndexDB onupgradeneeded:', {
              oldVersion: realOldVersion,
              newVersion,
              existingStores: Array.from(db.objectStoreNames),
              detectedCurrentVersion: currentVersion,
              usingRealOldVersion: realOldVersion
            });
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π
            if (realOldVersion !== currentVersion) {
              prodInfo('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:', {
                detectedVersion: currentVersion,
                realVersion: realOldVersion
              });
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
              preloadedMigrations = new Map();
            }
            
            // 4. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
            if (realOldVersion < newVersion) {
              try {
                // –ï—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
                if (preloadedMigrations.size === 0) {
                  prodInfo('üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã');
                  
                  // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç 0 –¥–æ –Ω—É–∂–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                  for (let migrationVersion = 0; migrationVersion < newVersion; migrationVersion++) {
                    
                    // –ú–∏–≥—Ä–∞—Ü–∏—è 0: —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö stores
                    if (migrationVersion === 0 && realOldVersion <= 0) {
                      prodInfo('üì¶ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã 0: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â');
                      
                      if (!db.objectStoreNames.contains('accounts')) {
                        db.createObjectStore('accounts', { keyPath: 'id' });
                        prodInfo('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ accounts —Å–æ–∑–¥–∞–Ω–æ');
                      }
                      
                      if (!db.objectStoreNames.contains('friends')) {
                        db.createObjectStore('friends', { keyPath: 'id' });
                        prodInfo('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ friends —Å–æ–∑–¥–∞–Ω–æ');
                      }
                      
                      if (!db.objectStoreNames.contains('rooms')) {
                        db.createObjectStore('rooms', { keyPath: 'id' });
                        prodInfo('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ rooms —Å–æ–∑–¥–∞–Ω–æ');
                      }
                      
                      prodInfo('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã 0 –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                    }
                    
                    // –ú–∏–≥—Ä–∞—Ü–∏—è 1: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
                    if (migrationVersion === 1 && realOldVersion <= 1) {
                      prodInfo('üì¶ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤');
                      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                      prodInfo('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                    }
                  }
                  
                  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                  prodInfo('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â...');
                  if (!db.objectStoreNames.contains('accounts')) {
                    db.createObjectStore('accounts', { keyPath: 'id' });
                    prodInfo('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ accounts');
                  }
                  
                  if (!db.objectStoreNames.contains('friends')) {
                    db.createObjectStore('friends', { keyPath: 'id' });
                    prodInfo('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ friends');
                  }
                  
                  if (!db.objectStoreNames.contains('rooms')) {
                    db.createObjectStore('rooms', { keyPath: 'id' });
                    prodInfo('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ rooms');
                  }
                } else {
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Å–æ–±—ã—Ç–∏—è
                  runSchemaMigrations(db, realOldVersion, newVersion, preloadedMigrations);
                }
              } catch (error) {
                prodError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã IndexedDB:', error);
                throw error;
              }
            }
          };

          openRequest.onerror = async function () {
            prodError("IndexDB openRequest error:", openRequest.error);
            await setUpdateStatus(dbName, DB_UPDATE_STATUS.UPDATE_FAILED, undefined, undefined, openRequest.error?.message);
            rej(openRequest.error);
          };

          openRequest.onsuccess = async function () {
            let db = openRequest.result;

            prodInfo('‚úÖ IndexDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–µ—Ä—Å–∏—è –ë–î:', db.version);

            try {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö object stores
              const requiredStores = ['accounts', 'friends', 'rooms'];
              const missingStores = requiredStores.filter(storeName => !db.objectStoreNames.contains(storeName));
              
              if (missingStores.length > 0) {
                prodError('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ object stores:', missingStores);
                prodInfo('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                db.close();
                
                // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é –±–∞–∑—É
                const deleteRequest = indexedDB.deleteDatabase(dbName);
                deleteRequest.onsuccess = () => {
                  prodInfo('‚úÖ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è –±–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞');
                  
                  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã
                  setTimeout(() => {
                    prodInfo('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã...');
                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
                    indexdb_wrapper(onChange).then(res).catch(rej);
                  }, 100);
                };
                
                deleteRequest.onerror = () => {
                  prodError('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π –±–∞–∑—ã:', deleteRequest.error);
                  rej(deleteRequest.error);
                };
                
                return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
              }

              // –ï—Å–ª–∏ –±—ã–ª–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
              if (actualOldVersion !== currentVersion || preloadedMigrations.size === 0) {
                prodInfo('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏:', actualOldVersion);
                preloadedMigrations = await preloadMigrations(actualOldVersion, targetVersion);
              }

              // 5. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
              if (actualOldVersion < targetVersion && preloadedMigrations.size > 0) {
                await runDataMigrations(db, actualOldVersion, targetVersion, preloadedMigrations);
              }

              prodInfo('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ë–î –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
              
              // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
              await setUpdateStatus(dbName, DB_UPDATE_STATUS.UPDATE_SUCCESS, db.version);
              
              // 7. –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π callback
              await onChange(db);
              
              // 8. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
              db.close();
              res(undefined);
              
            } catch (error) {
              prodError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ onChange:', error);
              const errorMessage = error instanceof Error ? error.message : String(error);
              await setUpdateStatus(dbName, DB_UPDATE_STATUS.UPDATE_FAILED, undefined, undefined, errorMessage);
              db.close();
              rej(error);
            }

            db.onversionchange = function () {
              db.close();
            };
          };

          openRequest.onblocked = function () {
            debugLog('Database connection blocked');
            rej(new Error('Database connection blocked'));
          };
          
        } catch (error) {
          prodError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IndexDB:', error);
          rej(error);
        }
      });
      
    } catch (error) {
      prodError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ indexdb_wrapper:', error);
      rej(error);
    }
  });

  return resultPromise;
}
