import { prodInfo, prodError, devMigration, devDB } from '../../../../core/debug/logger';

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export const migrationInfo = {
  version: 2,
  name: 'tmp_test',
  description: '–¢–µ—Å—Ç–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã tmp_test –∏ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã',
  fileName: '-1_tmp_test.ts'
};

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã tmp_test
 */
export function migrationScheme(db: IDBDatabase): void {
  prodInfo('üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã tmp_test: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã');
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ tmp_test
  if (!db.objectStoreNames.contains('tmp_test')) {
    const store = db.createObjectStore('tmp_test', { keyPath: 'id', autoIncrement: true });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç—ã
    store.createIndex('message', 'message', { unique: false });
    store.createIndex('timestamp', 'timestamp', { unique: false });
    store.createIndex('type', 'type', { unique: false });
    
    devDB('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ tmp_test —Å–æ–∑–¥–∞–Ω–æ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏: message, timestamp, type');
    prodInfo('‚úÖ –¢–∞–±–ª–∏—Ü–∞ tmp_test —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } else {
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
    prodInfo('üìã –¢–∞–±–ª–∏—Ü–∞ tmp_test —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã');
  }
  
  prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã tmp_test –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É tmp_test
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å IndexedDB
 */
export async function migrationData(db: IDBDatabase): Promise<void> {
  prodInfo('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö tmp_test: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π');
  
  return new Promise<void>((resolve, reject) => {
    try {
      const transaction = db.transaction(["tmp_test"], "readwrite");
      const store = transaction.objectStore("tmp_test");
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
      const countRequest = store.count();
      
      countRequest.onsuccess = function() {
        const existingCount = countRequest.result;
        
        if (existingCount > 0) {
          prodInfo(`üìã –í —Ç–∞–±–ª–∏—Ü–µ tmp_test —É–∂–µ –µ—Å—Ç—å ${existingCount} –∑–∞–ø–∏—Å–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ`);
          resolve();
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const testData = [
          {
            message: 'hi',
            type: 'greeting',
            timestamp: new Date('2025-01-01T10:00:00'),
            metadata: { source: 'migration', version: 1 }
          },
          {
            message: 'hi',
            type: 'greeting',
            timestamp: new Date('2025-01-01T11:00:00'),
            metadata: { source: 'migration', version: 1, additional: 'second record' }
          },
          {
            message: 'hi',
            type: 'greeting',
            timestamp: new Date('2025-01-01T12:00:00'),
            metadata: { source: 'migration', version: 1, additional: 'third record', special: true }
          },
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
          {
            message: 'hello world',
            type: 'example',
            timestamp: new Date(),
            metadata: { source: 'migration', description: '–ü—Ä–∏–º–µ—Ä –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏' }
          },
          {
            message: 'test record',
            type: 'test',
            timestamp: new Date(),
            metadata: { source: 'migration', description: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞' }
          }
        ];
        
        let addedCount = 0;
        let hasError = false;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –æ–¥–Ω–æ–π
        testData.forEach((data, index) => {
          const addRequest = store.add(data);
          
          addRequest.onsuccess = function() {
            addedCount++;
            devDB(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å ${index + 1}: "${data.message}" (ID: ${addRequest.result})`);
            
            // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            if (addedCount === testData.length && !hasError) {
              performDemoOperations(store, resolve, reject);
            }
          };
          
          addRequest.onerror = function() {
            if (!hasError) {
              hasError = true;
              prodError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ ${index + 1}:`, addRequest.error);
              reject(addRequest.error);
            }
          };
        });
      };
      
      countRequest.onerror = function() {
        prodError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π:", countRequest.error);
        reject(countRequest.error);
      };

    } catch (error) {
      prodError('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ migrationData:', error);
      reject(error);
    }
  });
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å IndexedDB
 */
function performDemoOperations(store: IDBObjectStore, resolve: () => void, reject: (error: any) => void): void {
  prodInfo('üéØ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏');
  
  // –ü—Ä–∏–º–µ—Ä 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
  const getAllRequest = store.getAll();
  getAllRequest.onsuccess = function() {
    const allRecords = getAllRequest.result;
    prodInfo(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${allRecords.length}`);
    
    // –ü—Ä–∏–º–µ—Ä 2: –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É message
    const messageIndex = store.index('message');
    const hiRecordsRequest = messageIndex.getAll('hi');
    
    hiRecordsRequest.onsuccess = function() {
      const hiRecords = hiRecordsRequest.result;
      prodInfo(`üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "hi": ${hiRecords.length}`);
      
      // –ü—Ä–∏–º–µ—Ä 3: –ü–æ–∏—Å–∫ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –≤—Ä–µ–º–µ–Ω–∏
      const timestampIndex = store.index('timestamp');
      const today = new Date();
      const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
      
      const rangeRequest = timestampIndex.getAll(IDBKeyRange.lowerBound(yesterday));
      
      rangeRequest.onsuccess = function() {
        const recentRecords = rangeRequest.result;
        prodInfo(`üìÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: ${recentRecords.length}`);
        
        // –ü—Ä–∏–º–µ—Ä 4: –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø—É
        const typeIndex = store.index('type');
        const greetingCountRequest = typeIndex.count('greeting');
        
        greetingCountRequest.onsuccess = function() {
          const greetingCount = greetingCountRequest.result;
          prodInfo(`üëã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π: ${greetingCount}`);
          
          // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          demonstrateUsageExamples(allRecords);
          
          prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö tmp_test –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          resolve();
        };
        
        greetingCountRequest.onerror = function() {
          prodError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π:", greetingCountRequest.error);
          reject(greetingCountRequest.error);
        };
      };
      
      rangeRequest.onerror = function() {
        prodError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –≤—Ä–µ–º–µ–Ω–∏:", rangeRequest.error);
        reject(rangeRequest.error);
      };
    };
    
    hiRecordsRequest.onerror = function() {
      prodError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π 'hi':", hiRecordsRequest.error);
      reject(hiRecordsRequest.error);
    };
  };
  
  getAllRequest.onerror = function() {
    prodError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π:", getAllRequest.error);
    reject(getAllRequest.error);
  };
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */
function demonstrateUsageExamples(records: any[]): void {
  prodInfo('üìö –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏:');
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É
  const groupedByType = records.reduce((acc, record) => {
    acc[record.type] = (acc[record.type] || 0) + 1;
    return acc;
  }, {});
  
  devDB('üè∑Ô∏è  –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º:', groupedByType);
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const sortedByTime = [...records].sort((a, b) => 
    new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()
  );
  
  devDB('‚è∞ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏:', {
    message: sortedByTime[0]?.message,
    timestamp: sortedByTime[0]?.timestamp
  });
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
  const recordsWithSpecial = records.filter(record => 
    record.metadata?.special === true
  );
  
  devDB('‚≠ê –ó–∞–ø–∏—Å–∏ —Å –æ—Å–æ–±—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏:', recordsWithSpecial.length);
  
  // –ü–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ
  const searchResults = records.filter(record => 
    record.message.toLowerCase().includes('h')
  );
  
  devDB('üîé –ó–∞–ø–∏—Å–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –±—É–∫–≤—É "h":', searchResults.length);
  
  prodInfo('‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.');
}
