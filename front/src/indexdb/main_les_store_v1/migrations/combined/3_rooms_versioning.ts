import { prodInfo, prodError, devMigration } from '../../../../core/debug/logger';
import { decrypt_curve25519_from_pass, encrypt_curve25519_from_pass } from '../../../../core/crypt';
import type { MigrationContext } from '../../../db_state_manager_v1/constants';
import { ROOMS_VERSION } from '../../../main_les_store_v1/entities/rooms/constants';

export const migrationInfo = {
  version: 3,
  name: 'rooms_versioning',
  description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è version –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º rooms',
  fileName: '3_rooms_versioning.ts'
};

export function migrationScheme(db: IDBDatabase): void {
  prodInfo('üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã 3: –°—Ö–µ–º–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è');
  // –°—Ö–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–π –∂–µ, –∏–∑–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ
  prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã 3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
}

export async function migrationData(context: MigrationContext): Promise<void> {
  const { db, currentUser } = context;
  prodInfo(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö 3 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentUser.id}`);

  return new Promise<void>((resolve, reject) => {
    try {
      const transaction = db.transaction(["rooms"], "readwrite");
      const store = transaction.objectStore("rooms");
      const getAllRequest = store.getAll();

      getAllRequest.onsuccess = async function() {
        try {
          const allRoomRecords = getAllRequest.result;

          if (allRoomRecords.length === 0) {
            prodInfo(`‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π rooms –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
            resolve();
            return;
          }

          prodInfo(`üìã –ù–∞–π–¥–µ–Ω–æ ${allRoomRecords.length} –∑–∞–ø–∏—Å–µ–π rooms –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

          let migratedCount = 0;

          for (const record of allRoomRecords) {
            devMigration(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å rooms ${record.id}`);

            // –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            const decryptedData = await decrypt_curve25519_from_pass({
              pass: currentUser.pass,
              cipherText: record.data
            });

            if (!decryptedData) {
              devMigration(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å rooms ${record.id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
              continue;
            }

            const roomData = JSON.parse(decryptedData);

            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (roomData.myAccId !== currentUser.id) {
              devMigration(`‚è≠Ô∏è –ó–∞–ø–∏—Å—å rooms ${record.id} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (${roomData.myAccId}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ version
            if (roomData.version !== undefined) {
              devMigration(`‚è≠Ô∏è –ó–∞–ø–∏—Å—å rooms ${record.id} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ version: ${roomData.version}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
              continue;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º version
            const updatedRoomData = {
              ...roomData,
              version: ROOMS_VERSION,
              date_updated: new Date(),
            };

            // –®–∏—Ñ—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const encryptedData = await encrypt_curve25519_from_pass({
              pass: currentUser.pass,
              message: JSON.stringify(updatedRoomData),
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ IndexedDB
            const updatedRecord = {
              id: record.id,
              data: encryptedData
            };

            store.put(updatedRecord);
            migratedCount++;

            devMigration(`‚úÖ –ó–∞–ø–∏—Å—å rooms ${record.id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å version: ${ROOMS_VERSION}`);
          }

          transaction.oncomplete = function() {
            prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö 3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${migratedCount} –∑–∞–ø–∏—Å–µ–π rooms`);
            resolve();
          };

          transaction.onerror = function() {
            prodError(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}:`, transaction.error);
            reject(transaction.error);
          };

        } catch (error) {
          prodError(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}:`, error);
          reject(error);
        }
      };

      getAllRequest.onerror = function() {
        prodError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ rooms –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}:`, getAllRequest.error);
        reject(getAllRequest.error);
      };

    } catch (error) {
      prodError(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ migrationData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}:`, error);
      reject(error);
    }
  });
}
