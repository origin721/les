import {
  prodInfo,
  prodError,
  devMigration,
} from "../../../../core/debug/logger";
import {
  decrypt_curve25519_from_pass,
  encrypt_curve25519_from_pass,
} from "../../../../core/crypt";
import type { MigrationContext } from "../../../db_state_manager_v1/constants";

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export const migrationInfo = {
  version: 4,
  name: "accounts_room_ids",
  description: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è roomIds –∫ accounts",
  fileName: "4_accounts_room_ids.ts",
};

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ö–µ–º—ã
 */
export function migrationScheme(db: IDBDatabase): void {
  prodInfo("üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã 4: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π");
  prodInfo("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã 4 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è roomIds –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º accounts
 */
export async function migrationData(context: MigrationContext): Promise<void> {
  const { db, currentUser } = context;
  prodInfo(
    `üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö 4 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentUser.id}`,
  );

  return new Promise<void>((resolve, reject) => {
    try {
      const transaction = db.transaction(["accounts"], "readwrite");
      const store = transaction.objectStore("accounts");
      const getAllRequest = store.getAll();

      getAllRequest.onsuccess = async function () {
        try {
          const allAccountRecords = getAllRequest.result;

          if (allAccountRecords.length === 0) {
            prodInfo(`‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π accounts –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
            resolve();
            return;
          }

          prodInfo(`üìã –ù–∞–π–¥–µ–Ω–æ ${allAccountRecords.length} –∑–∞–ø–∏—Å–µ–π accounts`);

          let migratedCount = 0;

          for (const record of allAccountRecords) {
            devMigration(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å account ${record.id}`);

            // –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            const decryptedData = await decrypt_curve25519_from_pass({
              pass: currentUser.pass,
              cipherText: record.data,
            });

            if (!decryptedData) {
              prodError(`üí• –ü–û–í–†–ï–ñ–î–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï: account ${record.id}`);
              continue;
            }

            const accountData = JSON.parse(decryptedData);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
            if (accountData.version >= 2) {
              devMigration(
                `‚è≠Ô∏è –ó–∞–ø–∏—Å—å account ${record.id} —É–∂–µ –∏–º–µ–µ—Ç –≤–µ—Ä—Å–∏—é ${accountData.version}`,
              );
              continue;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º roomIds
            const updatedAccountData = {
              ...accountData,
              roomIds: [],
              version: 2,
              date_updated: new Date(),
            };

            // –®–∏—Ñ—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const encryptedData = await encrypt_curve25519_from_pass({
              pass: currentUser.pass,
              message: JSON.stringify(updatedAccountData),
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ IndexedDB
            const updatedRecord = {
              id: record.id,
              data: encryptedData,
            };

            store.put(updatedRecord);
            migratedCount++;

            devMigration(`‚úÖ –ó–∞–ø–∏—Å—å account ${record.id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å roomIds`);
          }

          transaction.oncomplete = function () {
            prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö 4 –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            prodInfo(`üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migratedCount} accounts`);
            resolve();
          };

          transaction.onerror = function () {
            prodError(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:`, transaction.error);
            reject(transaction.error);
          };
        } catch (error) {
          prodError(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:`, error);
          reject(error);
        }
      };

      getAllRequest.onerror = function () {
        prodError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ accounts:`, getAllRequest.error);
        reject(getAllRequest.error);
      };
    } catch (error) {
      prodError(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ migrationData:`, error);
      reject(error);
    }
  });
}
