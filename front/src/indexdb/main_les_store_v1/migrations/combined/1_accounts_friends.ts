import { prodInfo, prodError, devMigration } from '../../../../core/debug/logger';
import { decrypt_curve25519_from_pass, encrypt_curve25519_from_pass } from '../../../../core/crypt';
import type { MigrationContext } from '../../../db_state_manager_v1/constants';
import { FRIENDS_VERSION } from '../../../main_les_store_v1/entities/friends/constants';

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export const migrationInfo = {
  version: 1,
  name: 'accounts_friends',
  description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è version –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º friends',
  fileName: '1_accounts_friends.ts'
};

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏–π —Å—Ö–µ–º—ã
 */
export function migrationScheme(db: IDBDatabase): void {
  prodInfo('üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤');
  
  // –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º
  // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å—Ö–µ–º–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ –≤–µ—Ä—Å–∏–∏ 0, —Ç–∞–∫ —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –º–æ–∂–Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å
  // –ù–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ç–æ –∫–æ–¥ –±—ã–ª –±—ã —Ç–∞–∫–æ–π:
  
  // if (db.objectStoreNames.contains('accounts')) {
  //   const accountsStore = transaction.objectStore('accounts');
  //   if (!accountsStore.indexNames.contains('byEmail')) {
  //     accountsStore.createIndex('byEmail', 'email', { unique: true });
  //   }
  // }
  
  prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è version –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º friends
 */
export async function migrationData(context: MigrationContext): Promise<void> {
  const { db, currentUser } = context;
  prodInfo(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö 1 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentUser.id}`);
  
  return new Promise<void>((resolve, reject) => {
    try {
      const transaction = db.transaction(["friends"], "readwrite");
      const store = transaction.objectStore("friends");
      const getAllRequest = store.getAll();

      getAllRequest.onsuccess = async function() {
        try {
          const allFriendRecords = getAllRequest.result;
          
          if (allFriendRecords.length === 0) {
            prodInfo(`‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π friends –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
            resolve();
            return;
          }
          
          prodInfo(`üìã –ù–∞–π–¥–µ–Ω–æ ${allFriendRecords.length} –∑–∞–ø–∏—Å–µ–π friends –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
          
          let migratedCount = 0;
          
          for (const record of allFriendRecords) {
            devMigration(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å friends ${record.id}`);
            
            // –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            const decryptedData = await decrypt_curve25519_from_pass({
              pass: currentUser.pass,
              cipherText: record.data
            });
            
            if (!decryptedData) {
              devMigration(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å friends ${record.id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
              continue;
            }
            
            const friendData = JSON.parse(decryptedData);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (friendData.myAccId !== currentUser.id) {
              devMigration(`‚è≠Ô∏è –ó–∞–ø–∏—Å—å friends ${record.id} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (${friendData.myAccId}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
              continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ version
            if (friendData.version !== undefined) {
              devMigration(`‚è≠Ô∏è –ó–∞–ø–∏—Å—å friends ${record.id} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ version: ${friendData.version}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
              continue;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º version
            const updatedFriendData = {
              ...friendData,
              version: FRIENDS_VERSION,
              date_updated: new Date(),
            };
            
            // –®–∏—Ñ—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const encryptedData = await encrypt_curve25519_from_pass({
              pass: currentUser.pass,
              message: JSON.stringify(updatedFriendData),
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ IndexedDB
            const updatedRecord = {
              id: record.id,
              data: encryptedData
            };
            
            store.put(updatedRecord);
            migratedCount++;
            
            devMigration(`‚úÖ –ó–∞–ø–∏—Å—å friends ${record.id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å version: ${FRIENDS_VERSION}`);
          }
          
          transaction.oncomplete = function() {
            prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${migratedCount} –∑–∞–ø–∏—Å–µ–π friends`);
            resolve();
          };
          
          transaction.onerror = function() {
            prodError(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}:`, transaction.error);
            reject(transaction.error);
          };
          
        } catch (error) {
          prodError(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}:`, error);
          reject(error);
        }
      };
      
      getAllRequest.onerror = function() {
        prodError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ friends –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}:`, getAllRequest.error);
        reject(getAllRequest.error);
      };

    } catch (error) {
      prodError(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ migrationData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}:`, error);
      reject(error);
    }
  });
}
