import { prodInfo, prodError, devMigration } from '../../../../core/debug/logger';
import type { MigrationContext } from '../../../db_state_manager_v1/constants';

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export const migrationInfo = {
  version: 1,
  name: 'accounts_friends',
  description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –º–∏–≥—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—è friendsByIds',
  fileName: '1_accounts_friends.ts'
};

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏–π —Å—Ö–µ–º—ã
 */
export function migrationScheme(db: IDBDatabase): void {
  prodInfo('üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤');
  
  // –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º
  // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å—Ö–µ–º–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ –≤–µ—Ä—Å–∏–∏ 0, —Ç–∞–∫ —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –º–æ–∂–Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å
  // –ù–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ç–æ –∫–æ–¥ –±—ã–ª –±—ã —Ç–∞–∫–æ–π:
  
  // if (db.objectStoreNames.contains('accounts')) {
  //   const accountsStore = transaction.objectStore('accounts');
  //   if (!accountsStore.indexNames.contains('byEmail')) {
  //     accountsStore.createIndex('byEmail', 'email', { unique: true });
  //   }
  // }
  
  prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è friendsByIds –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–∞–º
 */
export async function migrationData(context: MigrationContext): Promise<void> {
  const { db, currentUser } = context;
  prodInfo(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö 1 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentUser.id}`);
  
  return new Promise<void>((resolve, reject) => {
    try {
      const transaction = db.transaction(["accounts"], "readwrite");
      const store = transaction.objectStore("accounts");
      const getAllRequest = store.getAll();

      getAllRequest.onsuccess = function() {
        const allAccountRecords = getAllRequest.result;
        
        // ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const userAccounts = allAccountRecords.filter(account => account.id === currentUser.id);
        
        if (userAccounts.length === 0) {
          prodInfo(`‚úÖ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
          resolve();
          return;
        }
        
        prodInfo(`üìã –ù–∞–π–¥–µ–Ω–æ ${userAccounts.length} –∑–∞–ø–∏—Å–µ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
        
        // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å currentUser.pass
        // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        // –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ friendsByIds):
        // for (const account of userAccounts) {
        //   if (!account.friendsByIds) {
        //     account.friendsByIds = [];
        //     // –î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å currentUser.pass
        //     // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
        //   }
        // }
        
        prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
        resolve();
      };
      
      getAllRequest.onerror = function() {
        prodError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}:`, getAllRequest.error);
        reject(getAllRequest.error);
      };

    } catch (error) {
      prodError(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ migrationData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}:`, error);
      reject(error);
    }
  })
}
