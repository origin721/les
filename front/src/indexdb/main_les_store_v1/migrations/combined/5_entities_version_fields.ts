import {
  prodInfo,
  prodError,
  devMigration,
} from "../../../../core/debug/logger";
import {
  decrypt_curve25519_from_pass,
  encrypt_curve25519_from_pass,
} from "../../../../core/crypt";
import type { MigrationContext } from "../../../db_state_manager_v1/constants";

export const migrationInfo = {
  version: 5,
  name: "entities_version_fields",
  description:
    "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π version –∏ lastUpdated –∫–æ –≤—Å–µ–º —Å—É—â–Ω–æ—Å—Ç—è–º (accounts, rooms, friends)",
  fileName: "5_entities_version_fields.ts",
};

export function migrationScheme(db: IDBDatabase): void {
  prodInfo("üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã 5: –°—Ö–µ–º–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è");
  // –°—Ö–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–π –∂–µ, –∏–∑–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ
  prodInfo("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã 5 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
}

export async function migrationData(context: MigrationContext): Promise<void> {
  const { db, currentUser } = context;
  prodInfo(
    `üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö 5 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentUser.id}`,
  );

  const currentTimestamp = Date.now();
  const defaultVersion = 1;

  try {
    // –ú–∏–≥—Ä–∞—Ü–∏—è accounts
    await migrateAccounts(db, currentUser, defaultVersion, currentTimestamp);

    // –ú–∏–≥—Ä–∞—Ü–∏—è rooms
    await migrateRooms(db, currentUser, defaultVersion, currentTimestamp);

    // –ú–∏–≥—Ä–∞—Ü–∏—è friends
    await migrateFriends(db, currentUser, defaultVersion, currentTimestamp);

    prodInfo(
      `‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö 5 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`,
    );
  } catch (error) {
    prodError(
      `‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö 5 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}:`,
      error,
    );
    throw error;
  }
}

async function migrateAccounts(
  db: IDBDatabase,
  currentUser: any,
  defaultVersion: number,
  currentTimestamp: number,
): Promise<void> {
  return new Promise<void>((resolve, reject) => {
    try {
      const transaction = db.transaction(["accounts"], "readwrite");
      const store = transaction.objectStore("accounts");
      const getAllRequest = store.getAll();

      getAllRequest.onsuccess = async function () {
        try {
          const allRecords = getAllRequest.result;
          const userRecords = allRecords.filter(
            (record) => record.id === currentUser.id,
          );

          if (userRecords.length === 0) {
            prodInfo(
              `‚úÖ –ù–µ—Ç accounts –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`,
            );
            resolve();
            return;
          }

          prodInfo(
            `üìã –ù–∞–π–¥–µ–Ω–æ ${userRecords.length} –∑–∞–ø–∏—Å–µ–π accounts –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`,
          );

          let stats = {
            total: userRecords.length,
            processed: 0,
            migrated: 0,
            corrupted: 0,
            alreadyVersioned: 0,
            corruptedIds: [] as string[],
          };

          for (const record of userRecords) {
            stats.processed++;
            devMigration(
              `üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º account ${record.id} (${stats.processed}/${stats.total})`,
            );

            const decryptedData = await decrypt_curve25519_from_pass({
              pass: currentUser.pass,
              cipherText: record.data,
            });

            if (!decryptedData) {
              stats.corrupted++;
              stats.corruptedIds.push(record.id);
              prodError(`üí• –ü–û–í–†–ï–ñ–î–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï: account ${record.id}`);
              continue;
            }

            const accountData = JSON.parse(decryptedData);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if (
              accountData.version !== undefined &&
              accountData.lastUpdated !== undefined
            ) {
              stats.alreadyVersioned++;
              devMigration(
                `‚è≠Ô∏è Account ${record.id} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`,
              );
              continue;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            const updatedAccountData = {
              ...accountData,
              version: defaultVersion,
              lastUpdated: currentTimestamp,
              date_updated: new Date(),
            };

            const encryptedData = await encrypt_curve25519_from_pass({
              pass: currentUser.pass,
              message: JSON.stringify(updatedAccountData),
            });

            const updatedRecord = {
              id: record.id,
              data: encryptedData,
            };

            store.put(updatedRecord);
            stats.migrated++;
            devMigration(
              `‚úÖ Account ${record.id} –æ–±–Ω–æ–≤–ª–µ–Ω —Å version: ${defaultVersion}`,
            );
          }

          transaction.oncomplete = function () {
            prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è accounts –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            prodInfo(
              `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ accounts: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${stats.processed}, –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${stats.migrated}, —É–∂–µ —Å –≤–µ—Ä—Å–∏–µ–π ${stats.alreadyVersioned}, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ ${stats.corrupted}`,
            );
            if (stats.corruptedIds.length > 0) {
              prodError(`üí• ID –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö accounts:`, stats.corruptedIds);
            }
            resolve();
          };

          transaction.onerror = function () {
            prodError(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ accounts:`, transaction.error);
            reject(transaction.error);
          };
        } catch (error) {
          prodError(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ accounts:`, error);
          reject(error);
        }
      };

      getAllRequest.onerror = function () {
        prodError(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è accounts:`, getAllRequest.error);
        reject(getAllRequest.error);
      };
    } catch (error) {
      prodError(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ accounts:`, error);
      reject(error);
    }
  });
}

async function migrateRooms(
  db: IDBDatabase,
  currentUser: any,
  defaultVersion: number,
  currentTimestamp: number,
): Promise<void> {
  return new Promise<void>((resolve, reject) => {
    try {
      const transaction = db.transaction(["rooms"], "readwrite");
      const store = transaction.objectStore("rooms");
      const getAllRequest = store.getAll();

      getAllRequest.onsuccess = async function () {
        try {
          const allRecords = getAllRequest.result;
          const userRecords = allRecords.filter((record) =>
            record.id.startsWith(currentUser.id),
          );

          if (userRecords.length === 0) {
            prodInfo(
              `‚úÖ –ù–µ—Ç rooms –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`,
            );
            resolve();
            return;
          }

          prodInfo(
            `üìã –ù–∞–π–¥–µ–Ω–æ ${userRecords.length} –∑–∞–ø–∏—Å–µ–π rooms –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`,
          );

          let stats = {
            total: userRecords.length,
            processed: 0,
            migrated: 0,
            corrupted: 0,
            alreadyVersioned: 0,
            corruptedIds: [] as string[],
          };

          for (const record of userRecords) {
            stats.processed++;
            devMigration(
              `üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º room ${record.id} (${stats.processed}/${stats.total})`,
            );

            const decryptedData = await decrypt_curve25519_from_pass({
              pass: currentUser.pass,
              cipherText: record.data,
            });

            if (!decryptedData) {
              stats.corrupted++;
              stats.corruptedIds.push(record.id);
              prodError(`üí• –ü–û–í–†–ï–ñ–î–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï: room ${record.id}`);
              continue;
            }

            const roomData = JSON.parse(decryptedData);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if (
              roomData.version !== undefined &&
              roomData.lastUpdated !== undefined
            ) {
              stats.alreadyVersioned++;
              devMigration(
                `‚è≠Ô∏è Room ${record.id} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`,
              );
              continue;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            const updatedRoomData = {
              ...roomData,
              version: defaultVersion,
              lastUpdated: currentTimestamp,
            };

            const encryptedData = await encrypt_curve25519_from_pass({
              pass: currentUser.pass,
              message: JSON.stringify(updatedRoomData),
            });

            const updatedRecord = {
              id: record.id,
              data: encryptedData,
            };

            store.put(updatedRecord);
            stats.migrated++;
            devMigration(
              `‚úÖ Room ${record.id} –æ–±–Ω–æ–≤–ª–µ–Ω —Å version: ${defaultVersion}`,
            );
          }

          transaction.oncomplete = function () {
            prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è rooms –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            prodInfo(
              `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rooms: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${stats.processed}, –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${stats.migrated}, —É–∂–µ —Å –≤–µ—Ä—Å–∏–µ–π ${stats.alreadyVersioned}, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ ${stats.corrupted}`,
            );
            if (stats.corruptedIds.length > 0) {
              prodError(`üí• ID –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö rooms:`, stats.corruptedIds);
            }
            resolve();
          };

          transaction.onerror = function () {
            prodError(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ rooms:`, transaction.error);
            reject(transaction.error);
          };
        } catch (error) {
          prodError(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ rooms:`, error);
          reject(error);
        }
      };

      getAllRequest.onerror = function () {
        prodError(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è rooms:`, getAllRequest.error);
        reject(getAllRequest.error);
      };
    } catch (error) {
      prodError(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ rooms:`, error);
      reject(error);
    }
  });
}

async function migrateFriends(
  db: IDBDatabase,
  currentUser: any,
  defaultVersion: number,
  currentTimestamp: number,
): Promise<void> {
  return new Promise<void>((resolve, reject) => {
    try {
      const transaction = db.transaction(["friends"], "readwrite");
      const store = transaction.objectStore("friends");
      const getAllRequest = store.getAll();

      getAllRequest.onsuccess = async function () {
        try {
          const allRecords = getAllRequest.result;
          const userRecords = allRecords.filter((record) =>
            record.id.startsWith(currentUser.id),
          );

          if (userRecords.length === 0) {
            prodInfo(
              `‚úÖ –ù–µ—Ç friends –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`,
            );
            resolve();
            return;
          }

          prodInfo(
            `üìã –ù–∞–π–¥–µ–Ω–æ ${userRecords.length} –∑–∞–ø–∏—Å–µ–π friends –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`,
          );

          let stats = {
            total: userRecords.length,
            processed: 0,
            migrated: 0,
            corrupted: 0,
            alreadyVersioned: 0,
            corruptedIds: [] as string[],
          };

          for (const record of userRecords) {
            stats.processed++;
            devMigration(
              `üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º friend ${record.id} (${stats.processed}/${stats.total})`,
            );

            const decryptedData = await decrypt_curve25519_from_pass({
              pass: currentUser.pass,
              cipherText: record.data,
            });

            if (!decryptedData) {
              stats.corrupted++;
              stats.corruptedIds.push(record.id);
              prodError(`üí• –ü–û–í–†–ï–ñ–î–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï: friend ${record.id}`);
              continue;
            }

            const friendData = JSON.parse(decryptedData);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if (
              friendData.version !== undefined &&
              friendData.lastUpdated !== undefined
            ) {
              stats.alreadyVersioned++;
              devMigration(
                `‚è≠Ô∏è Friend ${record.id} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`,
              );
              continue;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            const updatedFriendData = {
              ...friendData,
              version: defaultVersion,
              lastUpdated: currentTimestamp,
            };

            const encryptedData = await encrypt_curve25519_from_pass({
              pass: currentUser.pass,
              message: JSON.stringify(updatedFriendData),
            });

            const updatedRecord = {
              id: record.id,
              data: encryptedData,
            };

            store.put(updatedRecord);
            stats.migrated++;
            devMigration(
              `‚úÖ Friend ${record.id} –æ–±–Ω–æ–≤–ª–µ–Ω —Å version: ${defaultVersion}`,
            );
          }

          transaction.oncomplete = function () {
            prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è friends –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            prodInfo(
              `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ friends: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${stats.processed}, –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${stats.migrated}, —É–∂–µ —Å –≤–µ—Ä—Å–∏–µ–π ${stats.alreadyVersioned}, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ ${stats.corrupted}`,
            );
            if (stats.corruptedIds.length > 0) {
              prodError(`üí• ID –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö friends:`, stats.corruptedIds);
            }
            resolve();
          };

          transaction.onerror = function () {
            prodError(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ friends:`, transaction.error);
            reject(transaction.error);
          };
        } catch (error) {
          prodError(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ friends:`, error);
          reject(error);
        }
      };

      getAllRequest.onerror = function () {
        prodError(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è friends:`, getAllRequest.error);
        reject(getAllRequest.error);
      };
    } catch (error) {
      prodError(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ friends:`, error);
      reject(error);
    }
  });
}
