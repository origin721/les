// TODO: –≤–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç–∫—Ä–∞–Ω —á—Ç–æ –±—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–æ–æ–±—â–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã –ª–∏ –æ–Ω–∏ —Å–µ–π—á–∞—Å –Ω–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è!!!!!!
import { prodInfo, prodError, devMigration } from '../../../core/debug/logger';
import { MIGRATIONS_REGISTRY, MIN_CURRENT_VERSION } from './MIGRATIONS_REGISTRY';
import { 
  startMigrationTimer, 
  endMigrationTimer, 
  recordMigrationStep 
} from '../../db_state_manager_v1/db_state_manager';
import { VersionManager } from '../version_manager';
import { REQUIRED_STORES } from '../REQUIRED_STORES';

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export interface MigrationInfo {
  version: number;
  name: string;
  description: string;
  fileName: string;
}

/**
 * –§—É–Ω–∫—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è
 */
export interface MigrationModule {
  migrationInfo: MigrationInfo;
  migrationScheme: (db: IDBDatabase) => void;
  migrationData: (db: IDBDatabase) => Promise<void>;
}

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç legacy —Ä–µ–µ—Å—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–π
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
async function loadLegacyRegistry(): Promise<Record<number, string>> {
  try {
    devMigration('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º legacy —Ä–µ–µ—Å—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–π...');
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç legacy —Ä–µ–µ—Å—Ç—Ä–∞
    const legacyModule = await import('./LEGASY_MIGRATIONS_REGISTRY');
    
    if (!legacyModule.LEGACY_MIGRATIONS_REGISTRY) {
      throw new Error('Legacy —Ä–µ–µ—Å—Ç—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç LEGACY_MIGRATIONS_REGISTRY');
    }
    
    prodInfo('‚úÖ Legacy —Ä–µ–µ—Å—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return legacyModule.LEGACY_MIGRATIONS_REGISTRY;
    
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ legacy —Ä–µ–µ—Å—Ç—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–µ—Ä—Å–∏–π
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ legacy –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function getCombinedRegistry(
  oldVersion: number, 
  newVersion: number
): Promise<Record<number, string>> {
  const needsLegacy = oldVersion < MIN_CURRENT_VERSION;
  
  if (!needsLegacy) {
    prodInfo('üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–µ—Å—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–π (legacy –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)');
    return { ...MIGRATIONS_REGISTRY };
  }
  
  prodInfo('üì¶ –¢—Ä–µ–±—É—é—Ç—Å—è legacy –º–∏–≥—Ä–∞—Ü–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä:', {
    oldVersion,
    newVersion,
    minCurrentVersion: MIN_CURRENT_VERSION
  });
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º legacy —Ä–µ–µ—Å—Ç—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  const legacyRegistry = await loadLegacyRegistry();
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–µ—Å—Ç—Ä—ã: legacy + current
  const combinedRegistry = {
    ...legacyRegistry,
    ...MIGRATIONS_REGISTRY
  };
  
  prodInfo('‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —Å–æ–∑–¥–∞–Ω:', {
    legacyCount: Object.keys(legacyRegistry).length,
    currentCount: Object.keys(MIGRATIONS_REGISTRY).length,
    totalCount: Object.keys(combinedRegistry).length
  });
  
  return combinedRegistry;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –µ—ë –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export async function getCurrentDbVersion(dbName: string): Promise<number> {
  return new Promise((resolve, reject) => {
    try {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ë–î –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
      const checkRequest = indexedDB.open(dbName);
      
      checkRequest.onsuccess = () => {
        const currentVersion = checkRequest.result.version;
        checkRequest.result.close(); // –°—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        resolve(currentVersion);
      };
      
      checkRequest.onerror = () => {
        reject(checkRequest.error);
      };
      
      // –ï—Å–ª–∏ –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, onupgradeneeded –Ω–µ –≤—ã–∑–æ–≤–µ—Ç—Å—è –∏ –º—ã –ø–æ–ª—É—á–∏–º –≤–µ—Ä—Å–∏—é 1
      checkRequest.onupgradeneeded = () => {
        checkRequest.result.close();
        resolve(0); // –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      };
      
    } catch (error) {
      reject(error);
    }
  });
}

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
 */
async function loadMigrationModule(
  version: number, 
  combinedRegistry: Record<number, string>
): Promise<MigrationModule> {
  const fileName = combinedRegistry[version];
  
  if (!fileName) {
    throw new Error(`–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ`);
  }

  try {
    devMigration(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏: ${fileName}`);
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    const module = await import(`./combined/${fileName}.ts`);
    
    if (!module.migrationInfo || !module.migrationScheme || !module.migrationData) {
      throw new Error(`–ú–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏ ${fileName} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã (migrationInfo, migrationScheme, migrationData)`);
    }
    
    prodInfo(`‚úÖ –ú–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏ ${fileName} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
    return module as MigrationModule;
    
  } catch (error) {
    prodError(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${fileName}:`, error);
    throw error;
  }
}

/**
 * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–µ—Ä—Å–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π legacy –º–∏–≥—Ä–∞—Ü–∏–π
 */
export async function preloadMigrations(
  oldVersion: number, 
  newVersion: number
): Promise<Map<number, MigrationModule>> {
  const loadedMigrations = new Map<number, MigrationModule>();
  
  prodInfo('üîÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –º–∏–≥—Ä–∞—Ü–∏–π:', {
    oldVersion,
    newVersion
  });

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä (—Å legacy –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const combinedRegistry = await getCombinedRegistry(oldVersion, newVersion);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    for (let version = oldVersion; version < newVersion; version++) {
      const migrationModule = await loadMigrationModule(version, combinedRegistry);
      loadedMigrations.set(version, migrationModule);
    }
    
    prodInfo(`‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${loadedMigrations.size} –º–æ–¥—É–ª–µ–π –º–∏–≥—Ä–∞—Ü–∏–π`);
    return loadedMigrations;
    
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã IndexedDB —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
 * –í–ê–ñ–ù–û: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ version change transaction
 */
export function runSchemaMigrations(
  db: IDBDatabase, 
  oldVersion: number, 
  newVersion: number,
  preloadedMigrations: Map<number, MigrationModule>
): void {
  prodInfo('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã IndexedDB:', {
    oldVersion,
    newVersion,
    existingStores: Array.from(db.objectStoreNames)
  });

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç oldVersion –¥–æ newVersion
    for (let version = oldVersion; version < newVersion; version++) {
      const targetVersion = version + 1;
      
      prodInfo(`üìã –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã —Å –≤–µ—Ä—Å–∏–∏ ${version} –¥–æ ${targetVersion}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏
      const migrationModule = preloadedMigrations.get(version);
      
      if (!migrationModule) {
        throw new Error(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      const startTime = Date.now();
      migrationModule.migrationScheme(db);
      const executionTime = Date.now() - startTime;
      
      prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã ${migrationModule.migrationInfo.fileName} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${executionTime}–º—Å`);
    }

    prodInfo('üèÅ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã IndexedDB –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', 
      Array.from(db.objectStoreNames));
    
  } catch (error) {
    prodError('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã IndexedDB:', error);
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
 * –í–∫–ª—é—á–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –∫ –∑–∞–ø–∏—Å—è–º
 */
export async function runDataMigrations(
  db: IDBDatabase, 
  oldVersion: number, 
  newVersion: number,
  preloadedMigrations: Map<number, MigrationModule>,
  dbName: string
): Promise<void> {
  prodInfo('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö IndexedDB:', {
    oldVersion,
    newVersion
  });

  try {
    const migratedTables: string[] = [];

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç oldVersion –¥–æ newVersion
    for (let version = oldVersion; version < newVersion; version++) {
      const targetVersion = version + 1;
      
      prodInfo(`üìã –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ—Ä—Å–∏–∏ ${version} –¥–æ ${targetVersion}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏
      const migrationModule = preloadedMigrations.get(version);
      
      if (!migrationModule) {
        throw new Error(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      const startTime = Date.now();
      await migrationModule.migrationData(db);
      const dataDuration = Date.now() - startTime;
      
      prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ${migrationModule.migrationInfo.fileName} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${dataDuration}–º—Å`);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
      await recordMigrationStep(dbName, {
        version: targetVersion,
        fileName: migrationModule.migrationInfo.fileName,
        schemaDuration: (migrationModule as any)._schemaDuration || 0,
        dataDuration
      });

      migratedTables.push(migrationModule.migrationInfo.fileName);
    }

    // –î–û–ë–ê–í–õ–Ø–ï–ú –í–ï–†–°–ò–ò –ö–û –í–°–ï–ú –ó–ê–ü–ò–°–Ø–ú –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    prodInfo('üîñ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ version –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º...');
    for (const storeName of Array.from(db.objectStoreNames)) {
      if (REQUIRED_STORES.includes(storeName)) {
        await VersionManager.addVersionToAllRecords(db, storeName, newVersion);
        prodInfo(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è ${newVersion} –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º –≤ ${storeName}`);
      }
    }

    prodInfo('üèÅ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö IndexedDB –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    prodError('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö IndexedDB:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ö–µ–º—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–µ—Å—Ç—Ä (–Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏)
 */
export function getMaxVersion(): number {
  const versions = Object.keys(MIGRATIONS_REGISTRY).map(Number);
  return versions.length > 0 ? Math.max(...versions) + 1 : 1;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–µ—Å—Ç—Ä)
 * –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è legacy –º–∏–≥—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ getCombinedAvailableMigrations
 */
export function getAvailableMigrations(): Record<number, string> {
  return { ...MIGRATIONS_REGISTRY };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –≤–∫–ª—é—á–∞—è legacy
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
 */
export async function getCombinedAvailableMigrations(): Promise<Record<number, string>> {
  try {
    const legacyRegistry = await loadLegacyRegistry();
    return {
      ...legacyRegistry,
      ...MIGRATIONS_REGISTRY
    };
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    // Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–µ—Å—Ç—Ä
    return { ...MIGRATIONS_REGISTRY };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–µ—Å—Ç—Ä)
 * –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∫–ª—é—á–∞—è legacy –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ hasCombinedMigration
 */
export function hasMigration(version: number): boolean {
  return version in MIGRATIONS_REGISTRY;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤–∫–ª—é—á–∞—è legacy
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export async function hasCombinedMigration(version: number): Promise<boolean> {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–µ—Å—Ç—Ä (–±—ã—Å—Ç—Ä–æ)
  if (version in MIGRATIONS_REGISTRY) {
    return true;
  }
  
  // –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º legacy
  if (version < MIN_CURRENT_VERSION) {
    try {
      const legacyRegistry = await loadLegacyRegistry();
      return version in legacyRegistry;
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ legacy –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      return false;
    }
  }
  
  return false;
}
