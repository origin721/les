import { UserStateManager } from '../db_state_manager_v1/user_state_manager';
import { MIGRATIONS_REGISTRY } from './migrations/MIGRATIONS_REGISTRY';
import { getMaxVersion } from './migrations/migrations';
import type { MigrationContext, UserMigrationRecord } from '../db_state_manager_v1/constants';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥—É–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –≤–µ—Ä—Å–∏–µ–π (–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ types.ts)
 */
interface MigrationModule {
  migrationInfo: {
    version: number;
    name: string;
    description: string;
    fileName: string;
  };
  migrationScheme?: (db: IDBDatabase) => void;
  migrationData?: (context: MigrationContext) => Promise<void>;
  version: number; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –≤–µ—Ä—Å–∏–∏
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ü–µ–Ω—Ç—Ä–∏—á–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */
export class UserMigrationManager {
  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  private static async loadMigrationModule(version: number): Promise<MigrationModule> {
    const fileName = MIGRATIONS_REGISTRY[version];
    
    if (!fileName) {
      throw new Error(`–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ`);
    }

    try {
      console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏: ${fileName}`);
      
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
      const module = await import(`./migrations/combined/${fileName}.ts`);
      
      if (!module.migrationInfo) {
        throw new Error(`–ú–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏ ${fileName} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç migrationInfo`);
      }
      
      console.log(`‚úÖ –ú–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏ ${fileName} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      return module as MigrationModule;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${fileName}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  static async getAllMigrations(): Promise<MigrationModule[]> {
    const migrations: MigrationModule[] = [];
    
    for (const version of Object.keys(MIGRATIONS_REGISTRY).map(Number)) {
      try {
        const migration = await this.loadMigrationModule(version);
        migrations.push({
          ...migration,
          version: version + 1 // –í–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ 1 –±–æ–ª—å—à–µ –∏–Ω–¥–µ–∫—Å–∞
        });
      } catch (error) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –≤–µ—Ä—Å–∏–∏ ${version}:`, error);
      }
    }
    
    return migrations.sort((a, b) => a.version - b.version);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async checkUserMigrations(userId: string): Promise<number[]> {
    const userState = await UserStateManager.getUserState(userId);
    const currentVersion = userState?.currentVersion || 0;
    
    const maxVersion = getMaxVersion();
    
    const neededMigrations: number[] = [];
    for (let version = currentVersion + 1; version <= maxVersion; version++) {
      if (!userState?.completedMigrations?.includes(version)) {
        neededMigrations.push(version);
      }
    }
    
    return neededMigrations;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async migrateUser(context: MigrationContext): Promise<void> {
    const { currentUser, db, oldVersion, newVersion } = context;
    const userId = currentUser.id;
    
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –≤–µ—Ä—Å–∏–∏ ${oldVersion} –¥–æ ${newVersion}`);
    
    // –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏
    await UserStateManager.updateUserState(userId, {
      migrationStartTime: Date.now(),
      currentVersion: oldVersion
    });

    try {
      const neededMigrations = await this.checkUserMigrations(userId);
      
      for (const version of neededMigrations) {
        if (version > newVersion) break;
        
        await this.executeUserMigration(context, version);
        
        // –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        const userState = await UserStateManager.getUserState(userId) || {
          userId,
          currentVersion: oldVersion,
          completedMigrations: [],
          migrationHistory: []
        };
        
        await UserStateManager.updateUserState(userId, {
          currentVersion: version,
          completedMigrations: [...userState.completedMigrations, version]
        });
      }

      // –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏
      await UserStateManager.updateUserState(userId, {
        migrationEndTime: Date.now(),
        currentVersion: newVersion
      });

      console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      
      await UserStateManager.updateUserState(userId, {
        migrationEndTime: Date.now(),
        errorMessage: error instanceof Error ? error.message : 'Unknown error'
      });
      
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static async executeUserMigration(context: MigrationContext, version: number): Promise<void> {
    const { currentUser } = context;
    
    console.log(`üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤–µ—Ä—Å–∏–∏ ${version} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
    
    const startTime = Date.now();
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    const migrationIndex = version - 1; // –í–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ 1 –±–æ–ª—å—à–µ –∏–Ω–¥–µ–∫—Å–∞
    const migration = await this.loadMigrationModule(migrationIndex);
    
    if (!migration) {
      throw new Error(`–ú–∏–≥—Ä–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ ${version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    // –í—ã–ø–æ–ª–Ω–∏—Ç—å migrationData —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (migration.migrationData) {
      await migration.migrationData(context);
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ ${version} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}–º—Å`);
    
    // –ó–∞–ø–∏—Å–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    const userState = await UserStateManager.getUserState(currentUser.id);
    if (userState) {
      const historyEntry = {
        version,
        fileName: migration.migrationInfo?.fileName || `migration_${version}`,
        schemaDuration: 0, // Schema —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
        dataDuration: duration,
        startTime,
        endTime
      };
      
      await UserStateManager.updateUserState(currentUser.id, {
        migrationHistory: [...userState.migrationHistory, historyEntry]
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü)
   */
  static async allUsersCompletedVersion(version: number): Promise<boolean> {
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ accounts —Ç–∞–±–ª–∏—Ü—ã
    const allSystemUserIds = await this.scanAllUserIds();
    
    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –≤–µ—Ä—Å–∏—é
    const completedUserIds = new Set(await UserStateManager.getUsersCompletedVersion(version));
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —Ä–∞–≤–Ω—ã –ò –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
    return allSystemUserIds.size === completedUserIds.size && 
           [...allSystemUserIds].every(id => completedUserIds.has(id));
  }

  /**
   * –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å accounts —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É accounts —Ç–∞–±–ª–∏—Ü—ã
   */
  private static async scanAllUserIds(): Promise<Set<string>> {
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.warn('‚ö†Ô∏è scanAllUserIds() —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É accounts');
    return new Set<string>();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserMigrationStats(userId: string): Promise<UserMigrationRecord | null> {
    return await UserStateManager.getUserState(userId);
  }
}
