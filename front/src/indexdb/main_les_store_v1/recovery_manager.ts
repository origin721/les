import { prodInfo, prodError, debugLog } from '../../core/debug/logger';
import { DB_NAMES } from '../constants';
import { 
  detectStuckMigrations, 
  resetStuckMigration, 
  getDbState,
  getAllDbStates 
} from '../db_state_manager_v1/db_state_manager';
import { getCurrentDbVersion } from './migrations/migrations';

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±–æ–µ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
 */
export class RecoveryManager {
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  static async checkOnAppStart(): Promise<void> {
    try {
      prodInfo('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞–≤–∏—Å—à–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
      const allStates = await getAllDbStates();
      
      for (const state of allStates) {
        const isStuck = await detectStuckMigrations(state.dbName);
        
        if (isStuck) {
          prodInfo('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–≤–∏—Å—à–∞—è –º–∏–≥—Ä–∞—Ü–∏—è, –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', state.dbName);
          await this.recoverFromIncompleteUpdate(state.dbName);
        } else {
          await this.validateVersionConsistency(state.dbName);
        }
      }
      
      prodInfo('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    }
  }
  
  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   */
  static async recoverFromIncompleteUpdate(dbName: string): Promise<void> {
    try {
      prodInfo('üîÑ –ù–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', dbName);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const state = await getDbState(dbName);
      if (!state) {
        prodInfo('‚ÑπÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:', dbName);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–∏—Å–ª–∞
      const isStuck = await detectStuckMigrations(dbName);
      if (!isStuck) {
        prodInfo('‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–∏—Å–ª–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:', dbName);
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ë–î
      const realDbVersion = await getCurrentDbVersion(dbName);
      prodInfo('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', {
        dbName,
        stateVersion: state.version,
        realDbVersion,
        targetVersion: state.targetVersion
      });
      
      // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ë–î —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤–æ–π, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ
      if (state.targetVersion && realDbVersion >= state.targetVersion) {
        prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å:', dbName);
        await resetStuckMigration(dbName);
        return;
      }
      
      // –ò–Ω–∞—á–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à—É—é –º–∏–≥—Ä–∞—Ü–∏—é
      await resetStuckMigration(dbName);
      prodInfo('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –º–∏–≥—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞:', dbName);
      
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', error);
      
      // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
      try {
        await resetStuckMigration(dbName);
        prodInfo('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω:', dbName);
      } catch (resetError) {
        prodError('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–±—Ä–æ—Å–µ:', resetError);
      }
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
   */
  static async validateVersionConsistency(dbName: string): Promise<boolean> {
    try {
      const state = await getDbState(dbName);
      if (!state) {
        return true; // –ù–æ–≤–∞—è –ë–î, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      }
      
      const realDbVersion = await getCurrentDbVersion(dbName);
      
      if (state.version !== realDbVersion) {
        prodInfo('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π:', {
          dbName,
          stateVersion: state.version,
          realDbVersion
        });
        
        // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ–ª—å—à–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (realDbVersion > state.version) {
          state.version = realDbVersion;
          await import('../db_state_manager_v1/db_state_manager').then(({ updateDbState }) => 
            updateDbState(state)
          );
          prodInfo('‚úÖ –í–µ—Ä—Å–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ —Ä–µ–∞–ª—å–Ω–æ–π:', realDbVersion);
        }
        
        return false;
      }
      
      return true;
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π:', error);
      return false;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  static async validateDataIntegrity(db: IDBDatabase): Promise<boolean> {
    try {
      prodInfo('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ë–î:', db.name);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ stores —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      const { REQUIRED_STORES } = await import('./REQUIRED_STORES');
      const missingStores = REQUIRED_STORES.filter(storeName => 
        !db.objectStoreNames.contains(storeName)
      );
      
      if (missingStores.length > 0) {
        prodError('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ object stores:', missingStores);
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å stores –¥–ª—è —á—Ç–µ–Ω–∏—è
      let integrityValid = true;
      
      for (const storeName of REQUIRED_STORES) {
        try {
          const transaction = db.transaction([storeName], 'readonly');
          const store = transaction.objectStore(storeName);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
          const countRequest = store.count();
          await new Promise((resolve, reject) => {
            countRequest.onsuccess = () => resolve(countRequest.result);
            countRequest.onerror = () => reject(countRequest.error);
          });
          
        } catch (error) {
          prodError(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ store ${storeName}:`, error);
          integrityValid = false;
        }
      }
      
      if (integrityValid) {
        prodInfo('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–∞:', db.name);
      } else {
        prodError('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', db.name);
      }
      
      return integrityValid;
      
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  }
  
  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å—à–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
   */
  static async forceResetAllStuckMigrations(): Promise<void> {
    try {
      prodInfo('üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –∑–∞–≤–∏—Å—à–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π...');
      
      const allStates = await getAllDbStates();
      let resetCount = 0;
      
      for (const state of allStates) {
        const isStuck = await detectStuckMigrations(state.dbName);
        if (isStuck) {
          await resetStuckMigration(state.dbName);
          resetCount++;
        }
      }
      
      prodInfo(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: ${resetCount}`);
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–±—Ä–æ—Å–µ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  static async getDiagnosticInfo(): Promise<{
    databases: Array<{
      name: string;
      stateVersion: number;
      realVersion: number;
      isStuck: boolean;
      versionConsistent: boolean;
    }>;
    summary: {
      total: number;
      stuck: number;
      inconsistent: number;
    };
  }> {
    try {
      const allStates = await getAllDbStates();
      const databases = [];
      let stuckCount = 0;
      let inconsistentCount = 0;
      
      for (const state of allStates) {
        const isStuck = await detectStuckMigrations(state.dbName);
        const realVersion = await getCurrentDbVersion(state.dbName);
        const versionConsistent = state.version === realVersion;
        
        if (isStuck) stuckCount++;
        if (!versionConsistent) inconsistentCount++;
        
        databases.push({
          name: state.dbName,
          stateVersion: state.version,
          realVersion,
          isStuck,
          versionConsistent
        });
      }
      
      return {
        databases,
        summary: {
          total: databases.length,
          stuck: stuckCount,
          inconsistent: inconsistentCount
        }
      };
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
      return {
        databases: [],
        summary: { total: 0, stuck: 0, inconsistent: 0 }
      };
    }
  }
}
