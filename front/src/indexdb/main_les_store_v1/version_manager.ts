import { prodInfo, prodError, debugLog } from '../../core/debug/logger';

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ IndexedDB
 */
export class VersionManager {
  
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è version –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º –≤ store
   */
  static async addVersionToAllRecords(
    db: IDBDatabase, 
    storeName: string, 
    version: number
  ): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        prodInfo(`üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ ${version} –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º –≤ ${storeName}...`);
        
        const transaction = db.transaction([storeName], 'readwrite');
        const store = transaction.objectStore(storeName);
        
        let processedCount = 0;
        let updatedCount = 0;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        const getAllRequest = store.getAll();
        
        getAllRequest.onsuccess = () => {
          const records = getAllRequest.result;
          processedCount = records.length;
          
          if (records.length === 0) {
            prodInfo(`‚úÖ Store ${storeName} –ø—É—Å—Ç, –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
            resolve();
            return;
          }
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
          let pendingUpdates = 0;
          
          records.forEach(record => {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
            if (!record.hasOwnProperty('version')) {
              record.version = version;
              pendingUpdates++;
              
              const putRequest = store.put(record);
              
              putRequest.onsuccess = () => {
                updatedCount++;
                pendingUpdates--;
                
                // –ï—Å–ª–∏ –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                if (pendingUpdates === 0) {
                  prodInfo(`‚úÖ –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${storeName} –∑–∞–≤–µ—Ä—à–µ–Ω–æ:`, {
                    processed: processedCount,
                    updated: updatedCount,
                    version
                  });
                  resolve();
                }
              };
              
              putRequest.onerror = () => {
                prodError(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ ${storeName}:`, putRequest.error);
                reject(putRequest.error);
              };
            }
          });
          
          // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          if (pendingUpdates === 0) {
            prodInfo(`‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ ${storeName} —É–∂–µ –∏–º–µ—é—Ç –≤–µ—Ä—Å–∏—é`);
            resolve();
          }
        };
        
        getAllRequest.onerror = () => {
          prodError(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ ${storeName}:`, getAllRequest.error);
          reject(getAllRequest.error);
        };
        
        transaction.onerror = () => {
          prodError(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${storeName}:`, transaction.error);
          reject(transaction.error);
        };
        
      } catch (error) {
        prodError(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${storeName}:`, error);
        reject(error);
      }
    });
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
   */
  static async validateRecordVersions(
    db: IDBDatabase, 
    expectedVersion: number
  ): Promise<boolean> {
    try {
      prodInfo(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –∑–∞–ø–∏—Å–µ–π, –æ–∂–∏–¥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: ${expectedVersion}`);
      
      const storeNames = Array.from(db.objectStoreNames);
      let allValid = true;
      const validationResults: Array<{
        storeName: string;
        totalRecords: number;
        recordsWithoutVersion: number;
        recordsWithOldVersion: number;
        isValid: boolean;
      }> = [];
      
      for (const storeName of storeNames) {
        const result = await this.validateStoreVersions(db, storeName, expectedVersion);
        validationResults.push(result);
        
        if (!result.isValid) {
          allValid = false;
        }
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (allValid) {
        prodInfo('‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–µ—Ä—Å–∏–∏');
      } else {
        prodInfo('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏:', validationResults);
      }
      
      return allValid;
      
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π –∑–∞–ø–∏—Å–µ–π:', error);
      return false;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –∑–∞–ø–∏—Å–µ–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º store
   */
  private static async validateStoreVersions(
    db: IDBDatabase, 
    storeName: string, 
    expectedVersion: number
  ): Promise<{
    storeName: string;
    totalRecords: number;
    recordsWithoutVersion: number;
    recordsWithOldVersion: number;
    isValid: boolean;
  }> {
    return new Promise((resolve, reject) => {
      try {
        const transaction = db.transaction([storeName], 'readonly');
        const store = transaction.objectStore(storeName);
        const getAllRequest = store.getAll();
        
        getAllRequest.onsuccess = () => {
          const records = getAllRequest.result;
          let recordsWithoutVersion = 0;
          let recordsWithOldVersion = 0;
          
          records.forEach(record => {
            if (!record.hasOwnProperty('version')) {
              recordsWithoutVersion++;
            } else if (record.version < expectedVersion) {
              recordsWithOldVersion++;
            }
          });
          
          const isValid = recordsWithoutVersion === 0 && recordsWithOldVersion === 0;
          
          resolve({
            storeName,
            totalRecords: records.length,
            recordsWithoutVersion,
            recordsWithOldVersion,
            isValid
          });
        };
        
        getAllRequest.onerror = () => {
          reject(getAllRequest.error);
        };
        
      } catch (error) {
        reject(error);
      }
    });
  }
  
  /**
   * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –≤–æ –≤—Å–µ—Ö stores
   */
  static async updateAllStoresVersions(
    db: IDBDatabase, 
    newVersion: number,
    storeNames?: string[]
  ): Promise<void> {
    try {
      const targetStores = storeNames || Array.from(db.objectStoreNames);
      
      prodInfo(`üîÑ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –¥–æ ${newVersion} –≤ stores:`, targetStores);
      
      for (const storeName of targetStores) {
        await this.addVersionToAllRecords(db, storeName, newVersion);
      }
      
      prodInfo(`‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è ${targetStores.length} stores`);
      
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π:', error);
      throw error;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä—Å–∏–π –ø–æ –≤—Å–µ–º stores
   */
  static async getVersionStats(db: IDBDatabase): Promise<{
    stores: Array<{
      name: string;
      totalRecords: number;
      versionsDistribution: Record<string, number>;
      recordsWithoutVersion: number;
    }>;
    summary: {
      totalStores: number;
      totalRecords: number;
      totalWithoutVersion: number;
    };
  }> {
    try {
      const storeNames = Array.from(db.objectStoreNames);
      const stores = [];
      let totalRecords = 0;
      let totalWithoutVersion = 0;
      
      for (const storeName of storeNames) {
        const stats = await this.getStoreVersionStats(db, storeName);
        stores.push(stats);
        totalRecords += stats.totalRecords;
        totalWithoutVersion += stats.recordsWithoutVersion;
      }
      
      return {
        stores,
        summary: {
          totalStores: storeNames.length,
          totalRecords,
          totalWithoutVersion
        }
      };
      
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä—Å–∏–π:', error);
      return {
        stores: [],
        summary: { totalStores: 0, totalRecords: 0, totalWithoutVersion: 0 }
      };
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä—Å–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ store
   */
  private static async getStoreVersionStats(
    db: IDBDatabase, 
    storeName: string
  ): Promise<{
    name: string;
    totalRecords: number;
    versionsDistribution: Record<string, number>;
    recordsWithoutVersion: number;
  }> {
    return new Promise((resolve, reject) => {
      try {
        const transaction = db.transaction([storeName], 'readonly');
        const store = transaction.objectStore(storeName);
        const getAllRequest = store.getAll();
        
        getAllRequest.onsuccess = () => {
          const records = getAllRequest.result;
          const versionsDistribution: Record<string, number> = {};
          let recordsWithoutVersion = 0;
          
          records.forEach(record => {
            if (!record.hasOwnProperty('version')) {
              recordsWithoutVersion++;
            } else {
              const version = String(record.version);
              versionsDistribution[version] = (versionsDistribution[version] || 0) + 1;
            }
          });
          
          resolve({
            name: storeName,
            totalRecords: records.length,
            versionsDistribution,
            recordsWithoutVersion
          });
        };
        
        getAllRequest.onerror = () => {
          reject(getAllRequest.error);
        };
        
      } catch (error) {
        reject(error);
      }
    });
  }
  
  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è version –∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–∫–∞—Ç–∞)
   */
  static async removeVersionFromAllRecords(
    db: IDBDatabase, 
    storeName: string
  ): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        prodInfo(`üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è version –∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ ${storeName}...`);
        
        const transaction = db.transaction([storeName], 'readwrite');
        const store = transaction.objectStore(storeName);
        
        const getAllRequest = store.getAll();
        
        getAllRequest.onsuccess = () => {
          const records = getAllRequest.result;
          let processedCount = 0;
          let updatedCount = 0;
          
          if (records.length === 0) {
            prodInfo(`‚úÖ Store ${storeName} –ø—É—Å—Ç`);
            resolve();
            return;
          }
          
          records.forEach(record => {
            if (record.hasOwnProperty('version')) {
              delete record.version;
              
              const putRequest = store.put(record);
              
              putRequest.onsuccess = () => {
                updatedCount++;
                processedCount++;
                
                if (processedCount === records.length) {
                  prodInfo(`‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –∏–∑ ${storeName} –∑–∞–≤–µ—Ä—à–µ–Ω–æ:`, {
                    updated: updatedCount
                  });
                  resolve();
                }
              };
              
              putRequest.onerror = () => {
                reject(putRequest.error);
              };
            } else {
              processedCount++;
              
              if (processedCount === records.length) {
                resolve();
              }
            }
          });
        };
        
        getAllRequest.onerror = () => {
          reject(getAllRequest.error);
        };
        
      } catch (error) {
        reject(error);
      }
    });
  }
}
