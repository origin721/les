import { indexdb_wrapper } from "../indexdb_wrapper";
import { back_store } from "../../local_back/back_store/back_store";
import { prodError, prodInfo, devDB } from "../../core/debug/logger";

export function delete_room(roomId: string): Promise<void> {
  devDB('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–∞—á–∞—Ç–æ, ID:', roomId);
  
  return new Promise((mRes, mRej) => {
    indexdb_wrapper((db) => {
      return new Promise((res, rej) => {
        const transaction = db.transaction(["rooms"], "readwrite");
        const store = transaction.objectStore("rooms");

        devDB('üíæ –£–¥–∞–ª—è–µ–º –∏–∑ IndexDB...');
        const deleteRequest = store.delete(roomId);

        deleteRequest.onsuccess = function() {
          devDB('‚úÖ store.delete —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ID:', roomId);
        };

        deleteRequest.onerror = function(event) {
          devDB('‚ùå store.delete –æ—à–∏–±–∫–∞ –¥–ª—è ID:', roomId, 'event:', event);
        };

        transaction.oncomplete = function () {
          devDB("üéâ Transaction oncomplete triggered!");
          devDB("‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑ IndexDB");
          
          // –£–¥–∞–ª—è–µ–º –∏–∑ back_store —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
          back_store.rooms.delete([roomId]);
          
          devDB('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ back_store —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å');
          devDB('üéØ –í—ã–∑—ã–≤–∞–µ–º res() –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è delete_room');
          prodInfo('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          mRes();
          res();
        };

        transaction.onerror = function (event) {
          devDB("‚ùå Transaction onerror triggered!");
          prodError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ IndexDB:", event);
          const error = new Error(`IndexDB error: ${JSON.stringify(event)}`);
          mRej(error);
          rej(error);
        };

        transaction.onabort = function (event) {
          devDB("‚ùå Transaction onabort triggered!");
          prodError("‚ùå Transaction –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞:", event);
          const error = new Error(`IndexDB transaction aborted: ${JSON.stringify(event)}`);
          mRej(error);
          rej(error);
        };
      });
    });
  });
}
