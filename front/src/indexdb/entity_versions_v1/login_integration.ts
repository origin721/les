/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π —Å –ª–æ–≥–∏–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É
 */

import { prodInfo, prodError, debugLog } from '../../core/debug/logger';
import {
  getEntityVersion,
  setEntityVersion,
  needsMigration,
  initializeEntityVersionsForUser,
  getAllEntityVersions,
  updateMigrationProgress
} from './entity_versions_manager';
import type { EntityType } from './types';
import { CURRENT_ENTITY_VERSIONS } from './types';

/** –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ */
export interface LoginMigrationResult {
  /** –ù—É–∂–Ω—ã –ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ */
  migrationsNeeded: boolean;
  /** –°—É—â–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ */
  entitiesToMigrate: EntityType[];
  /** –°–≤–æ–¥–∫–∞ –≤–µ—Ä—Å–∏–π –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏ */
  versionsBefore: Record<EntityType, number>;
  /** –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º—Å */
  checkDuration: number;
}

/** –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π */
export interface EntityMigrationProgress {
  /** –¢–µ–∫—É—â–∞—è –º–∏–≥—Ä–∏—Ä—É–µ–º–∞—è —Å—É—â–Ω–æ—Å—Ç—å */
  currentEntity?: EntityType;
  /** –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ */
  completedEntities: EntityType[];
  /** –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (0-100) */
  overallProgress: number;
  /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º –¥–µ–π—Å—Ç–≤–∏–∏ */
  currentAction: string;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
 */
export async function checkEntityMigrationsOnLogin(userId: string): Promise<LoginMigrationResult> {
  const startTime = Date.now();

  try {
    prodInfo('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', { userId });

    const entityTypes: EntityType[] = ['accounts', 'rooms', 'friends'];
    const entitiesToMigrate: EntityType[] = [];
    const versionsBefore: Record<EntityType, number> = {} as any;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—É—â–Ω–æ—Å—Ç—å
    for (const entityType of entityTypes) {
      const currentVersion = await getEntityVersion(userId, entityType);
      versionsBefore[entityType] = currentVersion;

      const needsUpdate = await needsMigration(userId, entityType);
      if (needsUpdate) {
        entitiesToMigrate.push(entityType);
      }
    }

    const checkDuration = Date.now() - startTime;
    const migrationsNeeded = entitiesToMigrate.length > 0;

    const result: LoginMigrationResult = {
      migrationsNeeded,
      entitiesToMigrate,
      versionsBefore,
      checkDuration
    };

    if (migrationsNeeded) {
      prodInfo('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π:', {
        userId,
        entities: entitiesToMigrate,
        versions: versionsBefore
      });
    } else {
      prodInfo('‚úÖ –í—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã:', { userId, versions: versionsBefore });
    }

    return result;
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', { userId, error });
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function performEntityMigrations(
  userId: string,
  entitiesToMigrate: EntityType[],
  onProgress?: (progress: EntityMigrationProgress) => void
): Promise<void> {
  const startTime = Date.now();

  try {
    prodInfo('üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π:', { userId, entities: entitiesToMigrate });

    const completedEntities: EntityType[] = [];
    const totalEntities = entitiesToMigrate.length;

    for (let i = 0; i < entitiesToMigrate.length; i++) {
      const entityType = entitiesToMigrate[i];
      const currentVersion = await getEntityVersion(userId, entityType);
      const targetVersion = CURRENT_ENTITY_VERSIONS[entityType];

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress: EntityMigrationProgress = {
        currentEntity: entityType,
        completedEntities: [...completedEntities],
        overallProgress: Math.round((i / totalEntities) * 100),
        currentAction: `–ú–∏–≥—Ä–∞—Ü–∏—è ${entityType} —Å –≤–µ—Ä—Å–∏–∏ ${currentVersion} –¥–æ ${targetVersion}`
      };

      onProgress?.(progress);

      // –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏
      await updateMigrationProgress(userId, entityType, {
        inProgress: targetVersion,
        migrationStartTime: Date.now()
      });

      try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–Ω–æ—Å—Ç–∏
        await migrateEntity(userId, entityType, currentVersion, targetVersion);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –æ—Ç–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await setEntityVersion(userId, entityType, targetVersion, {
          totalRecords: await getEntityRecordsCount(userId, entityType),
          lastMigrationDuration: Date.now() - startTime
        });

        await updateMigrationProgress(userId, entityType, {
          inProgress: undefined,
          migrationStartTime: undefined
        });

        completedEntities.push(entityType);

        prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
          userId,
          entityType,
          fromVersion: currentVersion,
          toVersion: targetVersion
        });

      } catch (error) {
        prodError('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏:', { userId, entityType, error });

        // –û—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏
        await updateMigrationProgress(userId, entityType, {
          inProgress: undefined,
          migrationStartTime: undefined,
          failed: [targetVersion]
        });

        throw error;
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    const finalProgress: EntityMigrationProgress = {
      completedEntities,
      overallProgress: 100,
      currentAction: '–ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã'
    };

    onProgress?.(finalProgress);

    const totalDuration = Date.now() - startTime;
    prodInfo('üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã:', {
      userId,
      entities: entitiesToMigrate,
      duration: totalDuration
    });

  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π:', { userId, error });
    throw error;
  }
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
 */
async function migrateEntity(
  userId: string,
  entityType: EntityType,
  fromVersion: number,
  toVersion: number
): Promise<void> {
  // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
  // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç entityType –∏ –≤–µ—Ä—Å–∏–π –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ä–∞–∑–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏

  debugLog('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏:', {
    userId,
    entityType,
    fromVersion,
    toVersion
  });

  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –º–∏–≥—Ä–∞—Ü–∏–∏
  await new Promise(resolve => setTimeout(resolve, 100));

  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
  switch (entityType) {
    case 'accounts':
      await migrateAccountsEntity(userId, fromVersion, toVersion);
      break;
    case 'rooms':
      await migrateRoomsEntity(userId, fromVersion, toVersion);
      break;
    case 'friends':
      await migrateFriendsEntity(userId, fromVersion, toVersion);
      break;
  }
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ accounts
 */
async function migrateAccountsEntity(userId: string, fromVersion: number, toVersion: number): Promise<void> {
  debugLog('üìÅ –ú–∏–≥—Ä–∞—Ü–∏—è accounts:', { userId, fromVersion, toVersion });

  // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ accounts
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π version –∏ lastUpdated –≤–æ –≤—Å–µ—Ö –∑–∞–ø–∏—Å—è—Ö
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ rooms
 */
async function migrateRoomsEntity(userId: string, fromVersion: number, toVersion: number): Promise<void> {
  debugLog('üè† –ú–∏–≥—Ä–∞—Ü–∏—è rooms:', { userId, fromVersion, toVersion });

  // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ rooms
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ friends
 */
async function migrateFriendsEntity(userId: string, fromVersion: number, toVersion: number): Promise<void> {
  debugLog('üë• –ú–∏–≥—Ä–∞—Ü–∏—è friends:', { userId, fromVersion, toVersion });

  // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ friends
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
async function getEntityRecordsCount(userId: string, entityType: EntityType): Promise<number> {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
  return 0;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function initializeEntityVersionsOnLogin(userId: string): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingVersions = await getAllEntityVersions(userId);

    if (existingVersions.length === 0) {
      prodInfo('üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      await initializeEntityVersionsForUser(userId);
    } else {
      debugLog('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –∑–∞–ø–∏—Å–∏ –≤–µ—Ä—Å–∏–π:', {
        userId,
        existingCount: existingVersions.length
      });
    }
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', { userId, error });
    throw error;
  }
}

/**
 * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
 */
export async function handleEntityVersionsOnLogin(
  userId: string,
  onProgress?: (progress: EntityMigrationProgress) => void
): Promise<LoginMigrationResult> {
  try {
    prodInfo('üîë –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', userId);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await initializeEntityVersionsOnLogin(userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationResult = await checkEntityMigrationsOnLogin(userId);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (migrationResult.migrationsNeeded) {
      await performEntityMigrations(
        userId,
        migrationResult.entitiesToMigrate,
        onProgress
      );
    }

    return migrationResult;
  } catch (error) {
    prodError('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä—Å–∏–π –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', { userId, error });
    throw error;
  }
}
