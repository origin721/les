/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä—Å–∏—è–º–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */

import { prodInfo, prodError, debugLog } from "../../core/debug/logger";
import { back_store } from "../../local_back/back_store/back_store";
import type {
  EntityVersionRecord,
  EntityType,
  EntityMigrationProgress,
  EntityMigrationStatus,
} from "./types";
import {
  ENTITY_VERSIONS_CONSTANTS,
  CURRENT_ENTITY_VERSIONS,
  createEntityVersionId,
} from "./types";

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π
 */
function openEntityVersionsDB(): Promise<IDBDatabase> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(
      ENTITY_VERSIONS_CONSTANTS.DB_NAME,
      ENTITY_VERSIONS_CONSTANTS.VERSION,
    );

    request.onupgradeneeded = (event) => {
      const db = request.result;

      // –°–æ–∑–¥–∞–µ–º store –¥–ª—è –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π
      if (
        !db.objectStoreNames.contains(
          ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS,
        )
      ) {
        const store = db.createObjectStore(
          ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS,
          { keyPath: "id" },
        );

        // –ò–Ω–¥–µ–∫—Å –ø–æ userId –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        store.createIndex("userId", "userId", { unique: false });

        prodInfo("‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ entity_versions");
      }
    };

    request.onsuccess = () => {
      resolve(request.result);
    };

    request.onerror = () => {
      reject(request.error);
    };
  });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getEntityVersion(
  userId: string,
  entityType: EntityType,
): Promise<number> {
  try {
    const db = await openEntityVersionsDB();
    const transaction = db.transaction(
      [ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS],
      "readonly",
    );
    const store = transaction.objectStore(
      ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS,
    );

    const id = createEntityVersionId(userId, entityType);
    const request = store.get(id);

    return new Promise((resolve, reject) => {
      request.onsuccess = () => {
        const record = request.result as EntityVersionRecord | undefined;
        resolve(record?.lastVersion || 0);
      };

      request.onerror = () => {
        reject(request.error);
      };
    });
  } catch (error) {
    prodError("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏:", {
      userId,
      entityType,
      error,
    });
    return 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–µ—Ä—Å–∏—è 0
  }
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function setEntityVersion(
  userId: string,
  entityType: EntityType,
  version: number,
  debugInfo?: EntityVersionRecord["debugInfo"],
): Promise<void> {
  try {
    const db = await openEntityVersionsDB();
    const transaction = db.transaction(
      [ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS],
      "readwrite",
    );
    const store = transaction.objectStore(
      ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS,
    );

    const id = createEntityVersionId(userId, entityType);

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    const getRequest = store.get(id);

    return new Promise((resolve, reject) => {
      getRequest.onsuccess = () => {
        const existingRecord = getRequest.result as
          | EntityVersionRecord
          | undefined;

        const record: EntityVersionRecord = {
          id,
          userId,
          entityType,
          lastVersion: version,
          migrationProgress: existingRecord?.migrationProgress || {
            completed: [],
            failed: [],
          },
          lastUpdated: Date.now(),
          debugInfo,
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ completed –µ—Å–ª–∏ –µ—ë —Ç–∞–º –Ω–µ—Ç
        if (!record.migrationProgress.completed.includes(version)) {
          record.migrationProgress.completed.push(version);
          record.migrationProgress.completed.sort((a, b) => a - b);
        }

        const putRequest = store.put(record);

        putRequest.onsuccess = () => {
          prodInfo("‚úÖ –í–µ—Ä—Å–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", {
            userId,
            entityType,
            version,
          });
          resolve();
        };

        putRequest.onerror = () => {
          reject(putRequest.error);
        };
      };

      getRequest.onerror = () => {
        reject(getRequest.error);
      };
    });
  } catch (error) {
    prodError("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä—Å–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏:", {
      userId,
      entityType,
      version,
      error,
    });
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏
 */
export async function needsMigration(
  userId: string,
  entityType: EntityType,
): Promise<boolean> {
  const currentVersion = await getEntityVersion(userId, entityType);
  const targetVersion = CURRENT_ENTITY_VERSIONS[entityType];

  return currentVersion < targetVersion;
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export async function updateMigrationProgress(
  userId: string,
  entityType: EntityType,
  updates: Partial<EntityMigrationProgress>,
): Promise<void> {
  try {
    const db = await openEntityVersionsDB();
    const transaction = db.transaction(
      [ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS],
      "readwrite",
    );
    const store = transaction.objectStore(
      ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS,
    );

    const id = createEntityVersionId(userId, entityType);
    const getRequest = store.get(id);

    return new Promise((resolve, reject) => {
      getRequest.onsuccess = () => {
        const record = getRequest.result as EntityVersionRecord | undefined;

        if (!record) {
          reject(new Error(`–ó–∞–ø–∏—Å—å –≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${id}`));
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏
        record.migrationProgress = {
          ...record.migrationProgress,
          ...updates,
        };
        record.lastUpdated = Date.now();

        const putRequest = store.put(record);

        putRequest.onsuccess = () => {
          debugLog("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω:", {
            userId,
            entityType,
            updates,
          });
          resolve();
        };

        putRequest.onerror = () => {
          reject(putRequest.error);
        };
      };

      getRequest.onerror = () => {
        reject(getRequest.error);
      };
    });
  } catch (error) {
    prodError("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", {
      userId,
      entityType,
      error,
    });
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–µ—Ä—Å–∏–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
export async function getAllEntityVersions(
  userId: string,
): Promise<EntityVersionRecord[]> {
  try {
    const db = await openEntityVersionsDB();
    const transaction = db.transaction(
      [ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS],
      "readonly",
    );
    const store = transaction.objectStore(
      ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS,
    );
    const index = store.index("userId");

    const request = index.getAll(userId);

    return new Promise((resolve, reject) => {
      request.onsuccess = () => {
        resolve(request.result as EntityVersionRecord[]);
      };

      request.onerror = () => {
        reject(request.error);
      };
    });
  } catch (error) {
    prodError("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π:", { userId, error });
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –≤–µ—Ä—Å–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export async function getEntityVersionsSummary(userId: string): Promise<{
  accounts: number;
  rooms: number;
  friends: number;
}> {
  try {
    const [accountsVersion, roomsVersion, friendsVersion] = await Promise.all([
      getEntityVersion(userId, "accounts"),
      getEntityVersion(userId, "rooms"),
      getEntityVersion(userId, "friends"),
    ]);

    return {
      accounts: accountsVersion,
      rooms: roomsVersion,
      friends: friendsVersion,
    };
  } catch (error) {
    prodError("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –≤–µ—Ä—Å–∏–π:", { userId, error });
    return {
      accounts: 0,
      rooms: 0,
      friends: 0,
    };
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function initializeEntityVersionsForUser(
  userId: string,
): Promise<void> {
  try {
    await Promise.all([
      setEntityVersion(userId, "accounts", CURRENT_ENTITY_VERSIONS.accounts),
      setEntityVersion(userId, "rooms", CURRENT_ENTITY_VERSIONS.rooms),
      setEntityVersion(userId, "friends", CURRENT_ENTITY_VERSIONS.friends),
    ]);

    prodInfo("‚úÖ –í–µ—Ä—Å–∏–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
  } catch (error) {
    prodError("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π:", { userId, error });
    throw error;
  }
}

/**
 * –°–±—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
 */
export async function resetStuckMigrations(userId: string): Promise<void> {
  try {
    const records = await getAllEntityVersions(userId);
    const db = await openEntityVersionsDB();
    const transaction = db.transaction(
      [ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS],
      "readwrite",
    );
    const store = transaction.objectStore(
      ENTITY_VERSIONS_CONSTANTS.STORES.ENTITY_VERSIONS,
    );

    for (const record of records) {
      if (record.migrationProgress.inProgress) {
        record.migrationProgress.inProgress = undefined;
        record.migrationProgress.migrationStartTime = undefined;
        record.lastUpdated = Date.now();

        store.put(record);
      }
    }

    prodInfo("üîÑ –°–±—Ä–æ—à–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
  } catch (error) {
    prodError("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π:", { userId, error });
    throw error;
  }
}

/**
 * –¢–∏–ø –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π
 */
export type EntityVersionStats = {
  version: number;
  count: number;
};

/**
 * –¢–∏–ø –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–π –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
 */
export type EntityVersionsAnalysis = {
  accounts: EntityVersionStats[];
  rooms: EntityVersionStats[];
  friends: EntityVersionStats[];
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ back_store (–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏)
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –≤–µ—Ä—Å–∏—è–º
 */
export function getEntityVersions(): EntityVersionsAnalysis {
  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    const accountsStats = new Map<number, number>();
    for (const account of Object.values(back_store.accounts_by_id)) {
      const version = account.version || 0;
      accountsStats.set(version, (accountsStats.get(version) || 0) + 1);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã
    const roomsStats = new Map<number, number>();
    for (const room of Object.values(back_store.rooms_by_id)) {
      const version = room.version || 0;
      roomsStats.set(version, (roomsStats.get(version) || 0) + 1);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä—É–∑–µ–π
    const friendsStats = new Map<number, number>();
    for (const friend of Object.values(back_store.friends_by_id)) {
      const version = friend.version || 0;
      friendsStats.set(version, (friendsStats.get(version) || 0) + 1);
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Å–∏—è–º
    const result: EntityVersionsAnalysis = {
      accounts: Array.from(accountsStats.entries())
        .map(([version, count]) => ({ version, count }))
        .sort((a, b) => a.version - b.version),

      rooms: Array.from(roomsStats.entries())
        .map(([version, count]) => ({ version, count }))
        .sort((a, b) => a.version - b.version),

      friends: Array.from(friendsStats.entries())
        .map(([version, count]) => ({ version, count }))
        .sort((a, b) => a.version - b.version),
    };

    prodInfo("üìä –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω:", {
      accountsTotal: Object.keys(back_store.accounts_by_id).length,
      roomsTotal: Object.keys(back_store.rooms_by_id).length,
      friendsTotal: Object.keys(back_store.friends_by_id).length,
      result,
    });

    return result;
  } catch (error) {
    prodError("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π:", error);
    return {
      accounts: [],
      rooms: [],
      friends: [],
    };
  }
}
