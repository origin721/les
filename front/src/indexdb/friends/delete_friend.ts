import { indexdb_wrapper } from "../indexdb_wrapper";
import { updateAccountFriendsList } from "../accounts/update_account_friends";
import { back_store } from "../../local_back/back_store";
import { forceLog } from "../../core/debug/logger";

export function delete_friend(friendIds: string[]): Promise<void> {
  return indexdb_wrapper((db) => {
    return new Promise<void>(async (res, rej) => {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–∑—å—è—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        const friendsToDelete: Array<{ friendId: string; myAccId: string }> = [];
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π –∏–∑ back_store –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for (const accId in back_store.friends_by_account) {
          for (const friendId of friendIds) {
            if (back_store.friends_by_account[accId][friendId]) {
              friendsToDelete.push({ friendId, myAccId: accId });
            }
          }
        }

        const transaction = db.transaction(["friends"], "readwrite");
        const store = transaction.objectStore("friends");
        
        let completedOperations = 0;
        const totalOperations = friendIds.length;
        
        if (totalOperations === 0) {
          res();
          return;
        }
        
        for (const friendId of friendIds) {
          const request = store.delete(friendId);
          
          request.onsuccess = function () {
            completedOperations++;
            if (completedOperations === totalOperations) {
              // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ IndexedDB —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
              syncAccountsAfterDelete();
            }
          };

          request.onerror = function (event) {
            rej(event);
          };
        }

        async function syncAccountsAfterDelete() {
          try {
            forceLog("‚úÖ –î—Ä—É–∑—å—è —É–¥–∞–ª–µ–Ω—ã –∏–∑ IndexedDB, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤");
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥—Ä—É–∑–µ–π –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            const friendsByAccount: Record<string, string[]> = {};
            
            for (const { friendId, myAccId } of friendsToDelete) {
              if (!friendsByAccount[myAccId]) {
                friendsByAccount[myAccId] = [];
              }
              friendsByAccount[myAccId].push(friendId);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç
            for (const [accountId, friendIdsToRemove] of Object.entries(friendsByAccount)) {
              forceLog('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', accountId, '—É–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π:', friendIdsToRemove);
              
              await updateAccountFriendsList(accountId, {
                remove: friendIdsToRemove
              });
            }
            
            forceLog('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            res();
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –¥—Ä—É–∑—å—è —É–∂–µ —É–¥–∞–ª–µ–Ω—ã
            res();
          }
        }
      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ delete_friend:', error);
        rej(error);
      }
    });
  }) as Promise<void>;
}
