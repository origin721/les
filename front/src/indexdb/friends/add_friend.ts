//import { AES } from "../../../core/crypt";
import { encrypt_curve25519_from_pass } from "../../core/crypt";
import { gen_pass } from "../../core/random/gen_pass";
import { uuidv4 } from "../../core/uuid";
import { indexdb_wrapper } from "../indexdb_wrapper";
import { privateKeyToString, recommendedGenerateKeyPair } from "../../libs/libp2p";
import { back_store } from "../../local_back/back_store";
import { updateAccountFriendsList } from "../accounts/update_account_friends";

export type FriendEntityFull = {
  id: string;
} & FriendEntity;

export type FriendEntity = {
  namePub: string;
  // TODO: —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á—Ç–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π accId —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç –µ—Å–ª–∏ –±—É–¥—É –ø–æ —Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –∏–¥—Ç–∏
  myAccId: string;
  friendPubKeyLibp2p: string;
}
// 1. –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å myId –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
export function add_friend(
  new_list: FriendEntity[],
) {
  console.log('üî• add_friend –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏:', new_list);
  console.log('üîç back_store.accounts_by_id:', back_store.accounts_by_id);
  
  return indexdb_wrapper((db) => {
    return new Promise(async (res, rej) => {
      try {
        console.log('üì¶ IndexDB transaction —Å–æ–∑–¥–∞–Ω–∞');
        const transaction = db.transaction(["friends"], "readwrite");
        const store = transaction.objectStore("friends");
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const friendsWithIds: Array<{ item: FriendEntity; id: string }> = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        for (let item of new_list) {
          console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∞:', item);
          const newId = uuidv4();
          console.log('üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ID:', newId);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          friendsWithIds.push({ item, id: newId });
          
          const acc = back_store.accounts_by_id[item.myAccId];
          console.log('üë§ –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:', acc);
          
          if (!acc) {
            console.error('‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ back_store –¥–ª—è ID:', item.myAccId);
            console.error('‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:', Object.keys(back_store.accounts_by_id));
            rej(new Error(`–ê–∫–∫–∞—É–Ω—Ç ${item.myAccId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ back_store`));
            return;
          }
          
          if (!acc.pass) {
            console.error('‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –ø–∞—Ä–æ–ª—è:', acc);
            rej(new Error(`–£ –∞–∫–∫–∞—É–Ω—Ç–∞ ${item.myAccId} –Ω–µ—Ç –ø–∞—Ä–æ–ª—è`));
            return;
          }
          
          console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...');
          const dataToEncrypt = {
            ...item,
            id: newId,
            date_created: new Date(),
          };
          console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', dataToEncrypt);
          
          const newData = await encrypt_curve25519_from_pass({
            pass: acc.pass,
            message: JSON.stringify(dataToEncrypt),
          });
          console.log('‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
          
          console.log('üíæ –î–æ–±–∞–≤–ª—è–µ–º –≤ IndexDB...');
          store.add({ id: newId, data: newData });
        }

        transaction.oncomplete = async function () {
          console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤ IndexDB");
          
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ - –¥–æ–±–∞–≤–ª—è–µ–º ID –¥—Ä—É–∑–µ–π –≤ friendsByIds
          try {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥—Ä—É–∑–µ–π –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            const friendsByAccount: Record<string, string[]> = {};
            
            for (const { item, id } of friendsWithIds) {
              if (!friendsByAccount[item.myAccId]) {
                friendsByAccount[item.myAccId] = [];
              }
              friendsByAccount[item.myAccId].push(id);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç
            for (const [accountId, friendIds] of Object.entries(friendsByAccount)) {
              console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', accountId, '—Å –¥—Ä—É–∑—å—è–º–∏:', friendIds);
              
              await updateAccountFriendsList(accountId, {
                add: friendIds
              });
            }
            
            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:', error);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –¥—Ä—É–∑—å—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
          }
          
          res();
        };

        transaction.onerror = function (event) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ IndexDB:", event);
          rej(new Error(`IndexDB error: ${JSON.stringify(event)}`));
        };
      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ add_friend:', error);
        rej(error);
      }
    });
  })
}
