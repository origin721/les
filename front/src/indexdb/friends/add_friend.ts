//import { AES } from "../../../core/crypt";
import { encrypt_curve25519_from_pass } from "../../core/crypt";
import { gen_pass } from "../../core/random/gen_pass";
import { uuidv4 } from "../../core/uuid";
import { indexdb_wrapper } from "../indexdb_wrapper";
import { privateKeyToString, recommendedGenerateKeyPair } from "../../libs/libp2p";
import { back_store } from "../../local_back/back_store/back_store";
import { prodError, prodInfo, devDB, devCrypto, devAuth } from "../../core/debug/logger";
import { get_accounts } from "../accounts/get_accounts";

export type FriendEntityFull = {
  id: string;
} & FriendEntity;

export type FriendEntity = {
  namePub: string;
  // TODO: —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á—Ç–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π accId —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç –µ—Å–ª–∏ –±—É–¥—É –ø–æ —Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –∏–¥—Ç–∏
  myAccId: string;
  friendPubKeyLibp2p: string;
}
// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π myAccId –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
export function add_friend(
  new_list: FriendEntity[],
  explicitMyAccId?: string // –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID –∞–∫–∫–∞—É–Ω—Ç–∞
) {
  devDB('üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –Ω–∞—á–∞—Ç–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', new_list.length, 'explicitMyAccId:', explicitMyAccId);
  devDB('üîç back_store.accounts_by_id:', back_store.accounts_by_id);
  
  return indexdb_wrapper((db) => {
    return new Promise(async (res, rej) => {
      try {
        devDB('üì¶ IndexDB transaction —Å–æ–∑–¥–∞–Ω–∞');
        const transaction = db.transaction(["friends"], "readwrite");
        const store = transaction.objectStore("friends");
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ back_store –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if (Object.keys(back_store.accounts_by_id).length === 0) {
          devDB('üîÑ back_store.accounts_by_id –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã...');
          const accounts = await get_accounts();
          for (let ac of accounts) {
            back_store.accounts_by_id[ac.id] = ac;
          }
          devDB('‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ back_store:', Object.keys(back_store.accounts_by_id));
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const friendsWithIds: Array<{ item: FriendEntity; id: string }> = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        for (let item of new_list) {
          devDB('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∞:', item);
          const newId = uuidv4();
          devDB('üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ID:', newId);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          friendsWithIds.push({ item, id: newId });
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–±–æ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π myAccId, –ª–∏–±–æ –±–µ—Ä–µ–º –∏–∑ item
          const accountId = explicitMyAccId || item.myAccId;
          devDB('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º accountId:', accountId);
          
          // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏–∑ –∫–µ—à–∞ back_store
          let accountPassword: string | null = null;
          
          const cachedAccount = back_store.accounts_by_id[accountId];
          if (cachedAccount && cachedAccount.pass) {
            accountPassword = cachedAccount.pass;
            devAuth('üöÄ –ü–∞—Ä–æ–ª—å –ø–æ–ª—É—á–µ–Ω –∏–∑ back_store –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:', accountId);
          } else {
            devAuth('‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ back_store:', accountId);
            accountPassword = null;
          }
          
          if (!accountPassword) {
            prodError('‚ùå –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', accountId);
            rej(new Error(`–ü–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω`));
            return;
          }
          
          devCrypto('üîê –ù–∞—á–∏–Ω–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...');
          const dataToEncrypt = {
            ...item,
            id: newId,
            date_created: new Date(),
          };
          devCrypto('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', dataToEncrypt);
          devCrypto('üîê –ü–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω–æ–π:', accountPassword.length, '—Å–∏–º–≤–æ–ª–æ–≤');
          
          try {
            devCrypto('‚è∞ –í—ã–∑—ã–≤–∞–µ–º encrypt_curve25519_from_pass...');
            const encryptStartTime = Date.now();
            
            const newData = await encrypt_curve25519_from_pass({
              pass: accountPassword,
              message: JSON.stringify(dataToEncrypt),
            });
            
            const encryptDuration = Date.now() - encryptStartTime;
            devCrypto('‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞', encryptDuration, '–º—Å');
            devCrypto('üìä –†–∞–∑–º–µ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', newData?.length || 'undefined');
            
            devDB('üíæ –î–æ–±–∞–≤–ª—è–µ–º –≤ IndexDB...');
            const storeStartTime = Date.now();
            
            const addRequest = store.add({ id: newId, data: newData });
            
            addRequest.onsuccess = function() {
              const storeDuration = Date.now() - storeStartTime;
              devDB('‚úÖ store.add —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞', storeDuration, '–º—Å –¥–ª—è ID:', newId);
            };
            
            addRequest.onerror = function(event) {
              devDB('‚ùå store.add –æ—à–∏–±–∫–∞ –¥–ª—è ID:', newId, 'event:', event);
            };
            
          } catch (encryptError) {
            prodError('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', encryptError);
            rej(encryptError);
            return;
          }
        }

        transaction.oncomplete = function () {
          devDB("üéâ Transaction oncomplete triggered!");
          devDB("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤ IndexDB");
          
          // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∑–µ–π –≤ back_store
          for (const { item, id } of friendsWithIds) {
            const friendData: FriendEntityFull = {
              ...item,
              id: id,
            };
            back_store.friends_by_id[id] = friendData;
          }
          
          devDB('‚úÖ –î—Ä—É–∑—å—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ back_store.friends_by_id');
          devDB('üéØ –í—ã–∑—ã–≤–∞–µ–º res() –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è add_friend');
          prodInfo('‚úÖ –î—Ä—É–∑—å—è –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
          res();
        };

        transaction.onerror = function (event) {
          devDB("‚ùå Transaction onerror triggered!");
          prodError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ IndexDB:", event);
          rej(new Error(`IndexDB error: ${JSON.stringify(event)}`));
        };

        transaction.onabort = function (event) {
          devDB("‚ùå Transaction onabort triggered!");
          prodError("‚ùå Transaction –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞:", event);
          rej(new Error(`IndexDB transaction aborted: ${JSON.stringify(event)}`));
        };
      } catch (error) {
        prodError('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ add_friend:', error);
        rej(error);
      }
    });
  })
}
