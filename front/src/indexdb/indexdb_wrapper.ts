import { indexdb_order } from "./indexdb_order";
import { debugLog, prodError, prodInfo, devDB } from '../core/debug/logger';
import { autoRunDataMigrations } from './migrations/data_migrations';
import { runSchemaMigrations } from './migrations/schema_migrations';

const counterInfo = {
  open: 0,
  close: 0,
  success: 0,
  error: 0,
}

const isDebugMode = false;

export function indexdb_wrapper(
  onChange: (db: IDBDatabase) => Promise<void>,
) {
  if(isDebugMode) {
    ++counterInfo.open;
    debugLog({counterInfo});
  }

  const resultPromise = new Promise((_res, _rej) => {
    const res = (_data: any) => {
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ —á—Ç–æ –±—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–µ–±–∞–≥ —Ä–µ–∂–∏–º–µ –±—ã–ª–æ —ç—Ç–æ
      _res(_data);
      
      if(!isDebugMode) return

      ++counterInfo.close;
      ++counterInfo.success;
      debugLog({counterInfo});
    }
    const rej = (_err: any) => {
      _rej(_err);

      if(!isDebugMode) return

      ++counterInfo.close;
      ++counterInfo.error;
      debugLog({counterInfo});
    }
    indexdb_order((onFinishOrder) => {
      const dbName = "main_les_store_v1";

      resultPromise.finally(onFinishOrder);

      const targetVersion = 1; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–ª–µ–≤—É—é –≤–µ—Ä—Å–∏—é
      let openRequest = indexedDB.open(dbName, targetVersion);

      openRequest.onupgradeneeded = function (event) {
        const db = openRequest.result;
        const oldVersion = event.oldVersion ?? 0;
        const newVersion = event.newVersion ?? targetVersion;
        
        prodInfo('üîÑ IndexDB onupgradeneeded:', {
          oldVersion,
          newVersion,
          existingStores: Array.from(db.objectStoreNames)
        });
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (IndexedDB —Ç—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        if (oldVersion < newVersion) {
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –±–∞–∑–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (oldVersion === 0 && newVersion >= 1) {
              prodInfo('üì¶ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑–æ–≤—ã–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏');

              if (!db.objectStoreNames.contains('accounts')) {
                db.createObjectStore('accounts', { keyPath: 'id' });
                devDB('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ accounts —Å–æ–∑–¥–∞–Ω–æ');
              }

              if (!db.objectStoreNames.contains('friends')) {
                db.createObjectStore('friends', { keyPath: 'id' });
                devDB('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ friends —Å–æ–∑–¥–∞–Ω–æ');
              }

              if (!db.objectStoreNames.contains('rooms')) {
                db.createObjectStore('rooms', { keyPath: 'id' });
                devDB('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ rooms —Å–æ–∑–¥–∞–Ω–æ');
              }
            }

            prodInfo('üèÅ IndexDB –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', Array.from(db.objectStoreNames));
          } catch (error) {
            prodError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏ IndexedDB:', error);
            throw error;
          }
        }
      };

      openRequest.onerror = function () {
        prodError("IndexDB openRequest error:", openRequest.error);
        rej(openRequest.error);
      };

      openRequest.onsuccess = function () {
        let db = openRequest.result;

        prodInfo('‚úÖ IndexDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–µ—Ä—Å–∏—è –ë–î:', db.version);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ–º onChange
        const finalVersion = db.version;
        autoRunDataMigrations({ db, oldVersion: 0, newVersion: finalVersion })
          .then(() => {
            prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ë–î –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
            return onChange(db);
          })
          .then(() => {
            db.close();
            res(undefined);
          })
          .catch(rej);

        db.onversionchange = function () {
          db.close();
        };
      };

      openRequest.onblocked = function () {
        debugLog('Database connection blocked');
        rej(new Error('Database connection blocked'));
      };
    });
  });

  return resultPromise;
}
