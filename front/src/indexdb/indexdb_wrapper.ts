import { indexdb_order } from "./indexdb_order";
import { debugLog, prodError, prodInfo, devDB } from '../core/debug/logger';
import { 
  getCurrentDbVersion, 
  preloadMigrations, 
  runSchemaMigrations, 
  runDataMigrations,
  getMaxVersion
} from './migrations/migrations';

const counterInfo = {
  open: 0,
  close: 0,
  success: 0,
  error: 0,
}

const isDebugMode = false;

export async function indexdb_wrapper(
  onChange: (db: IDBDatabase) => Promise<void>,
) {
  if(isDebugMode) {
    ++counterInfo.open;
    debugLog({counterInfo});
  }

  const resultPromise = new Promise(async (_res, _rej) => {
    const res = (_data: any) => {
      _res(_data);
      
      if(!isDebugMode) return

      ++counterInfo.close;
      ++counterInfo.success;
      debugLog({counterInfo});
    }
    const rej = (_err: any) => {
      _rej(_err);

      if(!isDebugMode) return

      ++counterInfo.close;
      ++counterInfo.error;
      debugLog({counterInfo});
    }

    try {
      indexdb_order(async (onFinishOrder) => {
        const dbName = "main_les_store_v1";

        resultPromise.finally(onFinishOrder);

        try {
          // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const currentVersion = await getCurrentDbVersion(dbName);
          const targetVersion = getMaxVersion();
          
          prodInfo('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏—è—Ö –ë–î:', {
            currentVersion,
            targetVersion,
            needsMigration: currentVersion < targetVersion
          });

          // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
          let preloadedMigrations = new Map();

          // 2. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏
          if (currentVersion < targetVersion) {
            prodInfo('üîÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –º–∏–≥—Ä–∞—Ü–∏–π...');
            preloadedMigrations = await preloadMigrations(currentVersion, targetVersion);
          }

          // 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ü–µ–ª–µ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π
          let openRequest = indexedDB.open(dbName, targetVersion);

          openRequest.onupgradeneeded = function (event) {
            const db = openRequest.result;
            const oldVersion = event.oldVersion ?? 0;
            const newVersion = event.newVersion ?? targetVersion;
            
            prodInfo('üîÑ IndexDB onupgradeneeded:', {
              oldVersion,
              newVersion,
              existingStores: Array.from(db.objectStoreNames)
            });
            
            // 4. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
            if (oldVersion < newVersion && preloadedMigrations.size > 0) {
              try {
                runSchemaMigrations(db, oldVersion, newVersion, preloadedMigrations);
              } catch (error) {
                prodError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã IndexedDB:', error);
                throw error;
              }
            }
          };

          openRequest.onerror = function () {
            prodError("IndexDB openRequest error:", openRequest.error);
            rej(openRequest.error);
          };

          openRequest.onsuccess = async function () {
            let db = openRequest.result;

            prodInfo('‚úÖ IndexDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–µ—Ä—Å–∏—è –ë–î:', db.version);

            try {
              // 5. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
              if (currentVersion < targetVersion && preloadedMigrations.size > 0) {
                await runDataMigrations(db, currentVersion, targetVersion, preloadedMigrations);
              }

              prodInfo('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ë–î –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
              
              // 6. –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π callback
              await onChange(db);
              
              // 7. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
              db.close();
              res(undefined);
              
            } catch (error) {
              prodError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ onChange:', error);
              db.close();
              rej(error);
            }

            db.onversionchange = function () {
              db.close();
            };
          };

          openRequest.onblocked = function () {
            debugLog('Database connection blocked');
            rej(new Error('Database connection blocked'));
          };
          
        } catch (error) {
          prodError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IndexDB:', error);
          rej(error);
        }
      });
      
    } catch (error) {
      prodError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ indexdb_wrapper:', error);
      rej(error);
    }
  });

  return resultPromise;
}
