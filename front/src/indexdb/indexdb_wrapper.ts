import { indexdb_order } from "./indexdb_order";
import { debugLog, prodError, prodInfo, devDB } from '../core/debug/logger';

const counterInfo = {
  open: 0,
  close: 0,
  success: 0,
  error: 0,
}

const isDebugMode = false;

export function indexdb_wrapper(
  onChange: (db: IDBDatabase) => Promise<void>,
) {
  if(isDebugMode) {
    ++counterInfo.open;
    debugLog({counterInfo});
  }

  const resultPromise = new Promise((_res, _rej) => {
    const res = (_data: any) => {
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ —á—Ç–æ –±—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–µ–±–∞–≥ —Ä–µ–∂–∏–º–µ –±—ã–ª–æ —ç—Ç–æ
      _res(_data);
      
      if(!isDebugMode) return

      ++counterInfo.close;
      ++counterInfo.success;
      debugLog({counterInfo});
    }
    const rej = (_err: any) => {
      _rej(_err);

      if(!isDebugMode) return

      ++counterInfo.close;
      ++counterInfo.error;
      debugLog({counterInfo});
    }
    indexdb_order(onFinishOrder => {

      resultPromise.finally(onFinishOrder);

      let openRequest = indexedDB.open("store_v3", 1);

      openRequest.onupgradeneeded = function (event) {
        const db = openRequest.result;
        const oldVersion = event.oldVersion ?? 0;
        const newVersion = event.newVersion ?? 1;
        
        prodInfo('üîÑ IndexDB onupgradeneeded:', {
          oldVersion,
          newVersion,
          existingStores: Array.from(db.objectStoreNames)
        });
        
        // IndexedDB –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥, –Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        try {
          if (oldVersion === 0 && newVersion >= 1) {
            prodInfo('üì¶ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑–æ–≤—ã–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏');
            
            if (!db.objectStoreNames.contains('accounts')) {
              db.createObjectStore('accounts', { keyPath: 'id' });
              devDB('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ accounts —Å–æ–∑–¥–∞–Ω–æ');
            }
            
            if (!db.objectStoreNames.contains('friends')) {
              db.createObjectStore('friends', { keyPath: 'id' });
              devDB('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ friends —Å–æ–∑–¥–∞–Ω–æ');
            }
            
            if (!db.objectStoreNames.contains('rooms')) {
              db.createObjectStore('rooms', { keyPath: 'id' });
              devDB('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ rooms —Å–æ–∑–¥–∞–Ω–æ');
            }
          }
          
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
          // if (oldVersion === 1 && newVersion >= 2) { ... }
          
          prodInfo('üèÅ IndexDB –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', Array.from(db.objectStoreNames));
        } catch (error) {
          prodError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏ IndexedDB:', error);
          throw error;
        }
      };

      openRequest.onerror = function () {
        prodError("IndexDB openRequest error:", openRequest.error);
        rej(openRequest.error);
      };

      openRequest.onsuccess = function () {
        let db = openRequest.result;

        onChange(db)
          .then(() => {
            db.close();
            res(undefined);
          })
          .catch(rej);


        db.onversionchange = function () {
          db.close();
          //console.log("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞—Ä–µ–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
          //rej();
        };

        // –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—ä–µ–∫—Ç db
      };

      openRequest.onblocked = function () {
        // —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –º—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º onversionchange

        // —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –µ—Å—Ç—å –µ—â—ë –æ–¥–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–æ–π –∂–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        // –∏ –æ–Ω –Ω–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –¥–ª—è –Ω–µ–≥–æ —Å—Ä–∞–±–æ—Ç–∞–ª db.onversionchange
        debugLog('–°–æ–±—ã—Ç–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å');
        rej(new Error('Database connection blocked'));
      };

    });
  });

  return resultPromise;
}
