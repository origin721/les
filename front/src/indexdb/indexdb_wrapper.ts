import { indexdb_order } from "./indexdb_order";
import { debugLog, prodError, prodInfo, devDB } from '../core/debug/logger';
import { autoRunDataMigrations } from './migrations/data_migrations';
import { runSchemaMigrations } from './migrations/schema_migrations';
import { KEYS } from '../core/local-storage/constants';

const counterInfo = {
  open: 0,
  close: 0,
  success: 0,
  error: 0,
}

const isDebugMode = false;

export function indexdb_wrapper(
  onChange: (db: IDBDatabase) => Promise<void>,
) {
  if(isDebugMode) {
    ++counterInfo.open;
    debugLog({counterInfo});
  }

  const resultPromise = new Promise((_res, _rej) => {
    const res = (_data: any) => {
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ —á—Ç–æ –±—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–µ–±–∞–≥ —Ä–µ–∂–∏–º–µ –±—ã–ª–æ —ç—Ç–æ
      _res(_data);
      
      if(!isDebugMode) return

      ++counterInfo.close;
      ++counterInfo.success;
      debugLog({counterInfo});
    }
    const rej = (_err: any) => {
      _rej(_err);

      if(!isDebugMode) return

      ++counterInfo.close;
      ++counterInfo.error;
      debugLog({counterInfo});
    }
    indexdb_order(onFinishOrder => {

      resultPromise.finally(onFinishOrder);

      let openRequest = indexedDB.open("main_les_store_v1", 1);

      openRequest.onupgradeneeded = async function (event) {
        const db = openRequest.result;
        const oldVersion = event.oldVersion ?? 0;
        const newVersion = event.newVersion ?? 1;
        
        prodInfo('üîÑ IndexDB onupgradeneeded:', {
          oldVersion,
          newVersion,
          existingStores: Array.from(db.objectStoreNames)
        });
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥—É–ª–µ–π
        try {
          await runSchemaMigrations(db, oldVersion, newVersion);
        } catch (error) {
          prodError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏ IndexedDB:', error);
          throw error;
        }
      };

      openRequest.onerror = function () {
        prodError("IndexDB openRequest error:", openRequest.error);
        rej(openRequest.error);
      };

      openRequest.onsuccess = function () {
        let db = openRequest.result;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤–µ—Ä—Å–∏–π
        const schemaVersion = parseInt(localStorage.getItem(KEYS.SCHEMA_VERSION) || '0', 10);
        const currentDBVersion = db.version;
        
        prodInfo('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π:', {
          schemaVersionInStorage: schemaVersion,
          currentDBVersion: currentDBVersion,
          isSync: schemaVersion === currentDBVersion
        });

        // –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ–º onChange
        autoRunDataMigrations()
          .then(() => {
            prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ë–î –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            const dataVersion = parseInt(localStorage.getItem(KEYS.DATA_MIGRATION_VERSION) || '0', 10);
            prodInfo('üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä—Å–∏–π:', {
              schemaVersion: currentDBVersion,
              dataVersion: dataVersion,
              allInSync: currentDBVersion === dataVersion
            });
            
            return onChange(db);
          })
          .then(() => {
            db.close();
            res(undefined);
          })
          .catch(rej);


        db.onversionchange = function () {
          db.close();
          //console.log("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞—Ä–µ–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
          //rej();
        };

        // –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—ä–µ–∫—Ç db
      };

      openRequest.onblocked = function () {
        // —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –º—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º onversionchange

        // —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –µ—Å—Ç—å –µ—â—ë –æ–¥–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–æ–π –∂–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        // –∏ –æ–Ω –Ω–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –¥–ª—è –Ω–µ–≥–æ —Å—Ä–∞–±–æ—Ç–∞–ª db.onversionchange
        debugLog('–°–æ–±—ã—Ç–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å');
        rej(new Error('Database connection blocked'));
      };

    });
  });

  return resultPromise;
}
