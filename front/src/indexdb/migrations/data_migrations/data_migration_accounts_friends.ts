/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è friendsByIds –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–∞–º
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã –ë–î
 */

import { encrypt_curve25519_from_pass } from "../../../core/crypt";
import { back_store } from "../../../local_back/back_store";
import { indexdb_wrapper } from "../../indexdb_wrapper";
import { get_accounts } from "../../accounts/get_accounts";
import { forceLog } from "../../../core/debug/logger";

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è friendsByIds –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º
 */
export default async function dataMigrationAccountsFriends(): Promise<void> {
  forceLog('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è friendsByIds');
  
  return indexdb_wrapper(async (db) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
      const accounts = await get_accounts();
      let migratedCount = 0;
      
      if (accounts.length === 0) {
        forceLog('‚úÖ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
        return;
      }

      const transaction = db.transaction(["accounts"], "readwrite");
      const store = transaction.objectStore("accounts");
      
      for (const account of accounts) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ friendsByIds
        if (account.friendsByIds !== undefined) {
          forceLog(`‚è≠Ô∏è –ê–∫–∫–∞—É–Ω—Ç ${account.id} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ friendsByIds, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        forceLog(`üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç ${account.id} (${account.namePub})`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ friendsByIds
        const updatedAccount = {
          ...account,
          friendsByIds: [], // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
          date_updated: new Date(),
        };

        // –®–∏—Ñ—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const newData = await encrypt_curve25519_from_pass({
          pass: account.pass,
          message: JSON.stringify(updatedAccount),
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
        store.put({ id: account.id, data: newData });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º back_store
        back_store.accounts_by_id[account.id] = updatedAccount;
        
        migratedCount++;
      }

      return new Promise<void>((resolve, reject) => {
        transaction.oncomplete = function () {
          forceLog(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${migratedCount}`);
          resolve();
        };

        transaction.onerror = function (event) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:", event);
          reject(new Error(`–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${JSON.stringify(event)}`));
        };
      });

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ dataMigrationAccountsFriends:', error);
      throw error;
    }
  }) as Promise<void>;
}
