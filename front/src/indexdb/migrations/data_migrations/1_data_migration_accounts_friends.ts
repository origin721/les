/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è friendsByIds –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–∞–º
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã –ë–î
 */

import { encrypt_curve25519_from_pass } from "../../../core/crypt";
import { back_store } from "../../../local_back/back_store/back_store";
import { prodError, prodInfo, devMigration } from "../../../core/debug/logger";

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è friendsByIds –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º
 */
export default async function dataMigrationAccountsFriends(db: IDBDatabase): Promise<void> {
  prodInfo('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è friendsByIds');
  
  return new Promise<void>((resolve, reject) => {
    try {
      const transaction = db.transaction(["accounts"], "readonly");
      const store = transaction.objectStore("accounts");
      const getAllRequest = store.getAll();
      
      getAllRequest.onsuccess = function() {
        const accountRecords = getAllRequest.result;
        
        if (accountRecords.length === 0) {
          prodInfo('‚úÖ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
          resolve();
          return;
        }
        
        prodInfo(`üìã –ù–∞–π–¥–µ–Ω–æ ${accountRecords.length} –∑–∞–ø–∏—Å–µ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏`);
        
        // –î–ª—è —ç—Ç–æ–π –ø—Ä–æ—Å—Ç–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —É—Å–ø–µ—à–Ω–æ
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø–æ–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)');
        resolve();
      };
      
      getAllRequest.onerror = function() {
        prodError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:", getAllRequest.error);
        reject(getAllRequest.error);
      };

    } catch (error) {
      prodError('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ dataMigrationAccountsFriends:', error);
      reject(error);
    }
  });
}
