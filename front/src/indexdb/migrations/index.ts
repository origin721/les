import type { MigrationInfo, MigrationResult, AsyncMigrationFunction } from './types';
import { prodError, prodInfo, devMigration } from '../../core/debug/logger';

/**
 * –†–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
 * –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –æ–¥–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫ –¥—Ä—É–≥–æ–π
 */
export const MIGRATION_REGISTRY: MigrationInfo[] = [
  {
    fromVersion: 0,
    toVersion: 1,
    description: '–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö object stores: accounts –∏ friends',
    fileName: 'migration_v0_to_v1'
  },
  // –ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –±—É–¥—É—â–µ–º
  // {
  //   fromVersion: 1,
  //   toVersion: 2,
  //   description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
  //   fileName: 'migration_v1_to_v2'
  // },
];

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
 * @param fromVersion - —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @param toVersion - —Ü–µ–ª–µ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @returns –º–∞—Å—Å–∏–≤ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export function getMigrationsToRun(fromVersion: number, toVersion: number): MigrationInfo[] {
  const migrationsToRun: MigrationInfo[] = [];
  
  for (let version = fromVersion; version < toVersion; version++) {
    const migration = MIGRATION_REGISTRY.find(
      m => m.fromVersion === version && m.toVersion === version + 1
    );
    
    if (migration) {
      migrationsToRun.push(migration);
    } else {
      throw new Error(
        `–ú–∏–≥—Ä–∞—Ü–∏—è —Å –≤–µ—Ä—Å–∏–∏ ${version} –Ω–∞ ${version + 1} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ`
      );
    }
  }
  
  return migrationsToRun;
}

/**
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é
 * @param migration - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏
 * @param db - –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö IndexedDB
 * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export async function executeMigration(
  migration: MigrationInfo,
  db: IDBDatabase
): Promise<MigrationResult> {
  const startTime = performance.now();
  
  try {
    devMigration(
      `üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é ${migration.fileName} (v${migration.fromVersion} -> v${migration.toVersion})`
    );
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationModule = await import(`./${migration.fileName}.js`);
    const migrationFunction: AsyncMigrationFunction = migrationModule.default;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    await migrationFunction(db);
    
    const endTime = performance.now();
    const executionTime = endTime - startTime;
    
    prodInfo(
      `‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migration.fileName} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${executionTime.toFixed(2)}ms`
    );
    
    return {
      fromVersion: migration.fromVersion,
      toVersion: migration.toVersion,
      success: true,
      executionTime
    };
    
  } catch (error) {
    const endTime = performance.now();
    const executionTime = endTime - startTime;
    
    prodError(
      `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.fileName}:`,
      error
    );
    
    return {
      fromVersion: migration.fromVersion,
      toVersion: migration.toVersion,
      success: false,
      error: error as Error,
      executionTime
    };
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
 * @param fromVersion - —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @param toVersion - —Ü–µ–ª–µ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @param db - –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö IndexedDB
 * @returns –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
 */
export async function runMigrations(
  fromVersion: number,
  toVersion: number,
  db: IDBDatabase
): Promise<MigrationResult[]> {
  prodInfo(
    `üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–π —Å –≤–µ—Ä—Å–∏–∏ ${fromVersion} –¥–æ ${toVersion}`
  );
  
  const migrationsToRun = getMigrationsToRun(fromVersion, toVersion);
  const results: MigrationResult[] = [];
  
  for (const migration of migrationsToRun) {
    const result = await executeMigration(migration, db);
    results.push(result);
    
    // –ï—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    if (!result.success) {
      throw new Error(
        `–ú–∏–≥—Ä–∞—Ü–∏—è ${migration.fileName} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${result.error?.message}`
      );
    }
  }
  
  const totalTime = results.reduce((sum, result) => sum + result.executionTime, 0);
  prodInfo(
    `‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime.toFixed(2)}ms`
  );
  
  return results;
}
