/**
 * –°–∏—Å—Ç–µ–º–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ö–µ–º—ã –±–∞–∑—ã)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã
 */

import { prodError, prodInfo, devMigration } from '../../core/debug/logger';
import type { MigrationInfo } from './types';

/**
 * –†–µ–µ—Å—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö
 * –≠—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã –ë–î
 */
export const DATA_MIGRATION_REGISTRY: MigrationInfo[] = [
  {
    fromVersion: 0,
    toVersion: 1,
    description: '–ú–∏–≥—Ä–∞—Ü–∏—è accounts –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è friendsByIds',
    fileName: '1_data_migration_accounts_friends'
  },
  // –ó–¥–µ—Å—å –±—É–¥—É—Ç –¥—Ä—É–≥–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
];

// –ò—Å–ø–æ–ª—å–∑—É–µ–º Vite Glob Imports –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
// Vite –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —á–∞–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –±–∞–Ω–¥–ª–∏–Ω–≥–µ
const migrationModules = import.meta.glob('./data_migrations/*.ts', { 
  import: 'default',
  eager: false // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
});

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */
export async function runDataMigrations({
  db,
  oldVersion,
  newVersion
}: {
  db: IDBDatabase;
  oldVersion: number;
  newVersion: number;
}): Promise<void> {
  prodInfo(
    `üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${oldVersion} -> ${newVersion}`
  );

  if (oldVersion >= newVersion) {
    prodInfo('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
    return;
  }

  const migrationsToRun = DATA_MIGRATION_REGISTRY.filter(
    migration => migration.fromVersion >= oldVersion && migration.toVersion <= newVersion
  );

  if (migrationsToRun.length === 0) {
    prodInfo('‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return;
  }

  prodInfo(`üöÄ –ù–∞–π–¥–µ–Ω–æ ${migrationsToRun.length} –º–∏–≥—Ä–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);

  for (const migration of migrationsToRun) {
    try {
      devMigration(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö: ${migration.fileName}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Vite Glob Imports –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
      const migrationPath = `./data_migrations/${migration.fileName}.ts`;
      const migrationLoader = migrationModules[migrationPath];
      
      if (!migrationLoader) {
        throw new Error(`–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${migrationPath}`);
      }
      
      const migrationFunction = await migrationLoader();
      
      if (typeof migrationFunction !== 'function') {
        throw new Error(`–ú–∏–≥—Ä–∞—Ü–∏—è ${migration.fileName} –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
      }
      
      prodInfo(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö: ${migration.description}`);
      await migrationFunction(db);
      
      prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ${migration.fileName} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      
    } catch (error) {
      prodError(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ${migration.fileName}:`, error);
      throw error;
    }
  }

  prodInfo(`‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–æ –≤–µ—Ä—Å–∏–∏ ${newVersion}`);
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
export async function autoRunDataMigrations({
  db,
  oldVersion,
  newVersion
}: {
  db: IDBDatabase;
  oldVersion: number;
  newVersion: number;
}): Promise<void> {
  const targetVersion = Math.max(...DATA_MIGRATION_REGISTRY.map(m => m.toVersion), 0);
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  if (oldVersion < targetVersion && newVersion >= targetVersion) {
    await runDataMigrations({ db, oldVersion, newVersion });
  }
}
