import { prodInfo, prodError, devDB } from '../../core/debug/logger';
import { KEYS } from '../../core/local-storage/constants';

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã
 */
interface SchemaMigrationInfo {
  version: number;
  name: string;
  description: string;
  fileName: string;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã
 */
type SchemaMigrationFunction = (db: IDBDatabase) => Promise<void>;

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏
 */
interface SchemaMigrationModule {
  [key: string]: SchemaMigrationFunction | SchemaMigrationInfo;
  migrationInfo: SchemaMigrationInfo;
}

/**
 * –†–µ–µ—Å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã
 * –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ö–µ–º–µ: {–≤–µ—Ä—Å–∏—è}_{–Ω–∞–∑–≤–∞–Ω–∏–µ_–Ω–∞_–∞–Ω–≥–ª–∏–π—Å–∫–æ–º}.ts
 */
const SCHEMA_MIGRATIONS_REGISTRY: Record<number, string> = {
  0: '0_initialization_clear',
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:
  // 1: '1_add_indexes',
  // 2: '2_add_settings_store',
};

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –≤–µ—Ä—Å–∏–∏
 */
async function loadSchemaMigration(version: number): Promise<SchemaMigrationModule | null> {
  const migrationName = SCHEMA_MIGRATIONS_REGISTRY[version];
  
  if (!migrationName) {
    prodError(`–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ`);
    return null;
  }

  try {
    prodInfo(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: ${migrationName}`);
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    const module = await import(`./schema_migrations/${migrationName}`);
    
    devDB(`‚úÖ –ú–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏ ${migrationName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`);
    return module;
  } catch (error) {
    prodError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migrationName}:`, error);
    return null;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã IndexedDB –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–µ—Ä—Å–∏–π
 */
export async function runSchemaMigrations(
  db: IDBDatabase, 
  oldVersion: number, 
  newVersion: number
): Promise<void> {
  prodInfo('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã IndexedDB:', {
    oldVersion,
    newVersion,
    existingStores: Array.from(db.objectStoreNames)
  });

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç oldVersion –¥–æ newVersion
    for (let version = oldVersion; version < newVersion; version++) {
      const targetVersion = version + 1;
      
      prodInfo(`üìã –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å –≤–µ—Ä—Å–∏–∏ ${version} –¥–æ ${targetVersion}`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏
      const migrationModule = await loadSchemaMigration(version);
      
      if (!migrationModule) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${version}`);
      }

      // –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –º–æ–¥—É–ª–µ
      const migrationFunctionName = `migration_${version}_${migrationModule.migrationInfo.name}`;
      const migrationFunction = migrationModule[migrationFunctionName] as SchemaMigrationFunction;
      
      if (!migrationFunction || typeof migrationFunction !== 'function') {
        throw new Error(`–§—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migrationFunctionName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ`);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
      const startTime = Date.now();
      await migrationFunction(db);
      const executionTime = Date.now() - startTime;
      
      prodInfo(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migrationFunctionName} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${executionTime}–º—Å`);
    }

    prodInfo('üèÅ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã IndexedDB –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', 
      Array.from(db.objectStoreNames));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é —Å—Ö–µ–º—ã –≤ localStorage
    localStorage.setItem(KEYS.SCHEMA_VERSION, newVersion.toString());
    prodInfo('üìù –í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ localStorage:', newVersion);
    
  } catch (error) {
    prodError('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã IndexedDB:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
 */
export function getAvailableSchemaMigrations(): Record<number, string> {
  return { ...SCHEMA_MIGRATIONS_REGISTRY };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
 */
export function hasSchemaMigration(version: number): boolean {
  return version in SCHEMA_MIGRATIONS_REGISTRY;
}
