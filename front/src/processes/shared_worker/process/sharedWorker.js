import { toJson } from "../../../core/toJson";
import { EVENT_TYPES, PATHS } from "../../../local_back/constant";
import { backMiddleware } from "../../../local_back/middleware";
import { devLog, prodError, prodWarn } from "../../../core/debug/logger";

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const activeTabs = new Set();
const subscribers = {
  activeTabsCount: new Map() // subscriptionId -> {port, params}
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∫–ª–∞–¥–æ–∫
function notifyActiveTabsSubscribers() {
  const count = activeTabs.size;
  devLog('SharedWorker: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–∫–ª–∞–¥–æ–∫:', count);
  
  subscribers.activeTabsCount.forEach((subscription, subscriptionId) => {
    try {
      const response = {
        idRequest: subscriptionId,
        payload: { count: count }
      };
      subscription.port.postMessage(JSON.stringify(response));
      devLog('SharedWorker: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É:', subscriptionId, 'count:', count);
    } catch (error) {
      prodError('SharedWorker: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É:', subscriptionId, error);
      // –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
      subscribers.activeTabsCount.delete(subscriptionId);
    }
  });
}

self.onconnect = function (event) {
  devLog('SharedWorker: onconnect –≤—ã–∑–≤–∞–Ω, ports:', event.ports.length);
  
  event.ports.forEach((port, index) => {
    devLog('SharedWorker: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ port', index);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    activeTabs.add(port);
    devLog('SharedWorker: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞, –≤—Å–µ–≥–æ:', activeTabs.size);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    notifyActiveTabsSubscribers();
    
    port.onmessage = function (e) {
      devLog("SharedWorker received:", e.data);
      listener(e.data, port);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞
    port.addEventListener('close', () => {
      devLog('SharedWorker: –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç');
      activeTabs.delete(port);
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —ç—Ç–æ–≥–æ –ø–æ—Ä—Ç–∞
      subscribers.activeTabsCount.forEach((subscription, subscriptionId) => {
        if (subscription.port === port) {
          subscribers.activeTabsCount.delete(subscriptionId);
        }
      });
      
      devLog('SharedWorker: —É–¥–∞–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞, –≤—Å–µ–≥–æ:', activeTabs.size);
      notifyActiveTabsSubscribers();
    });
  });
};

/**
 * 
 * @param {*} data
 * @param {*} port
 * @returns 
 */
async function listener(data, port) {
  try {
    devLog("SharedWorker listener starting, data:", data);
    
    /**
     * @type {import("../../../local_back/middleware").BackMiddlewareProps}
     */
    const props = toJson(data.message);
    devLog("SharedWorker parsed props:", props);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
    devLog("SharedWorker: EVENT_TYPES.FETCH =", EVENT_TYPES.FETCH);
    devLog("SharedWorker: props.type =", props?.type);
    devLog("SharedWorker: props.idRequest =", props?.idRequest);
    devLog("SharedWorker: props.payload =", props?.payload);

    if (
      props && 
      (props.idRequest || props.idRequest === 0)
      && props.payload
    ) {
      devLog("SharedWorker: —É—Å–ª–æ–≤–∏–µ idRequest + payload –≤—ã–ø–æ–ª–Ω–µ–Ω–æ");
      
      if (props.type === EVENT_TYPES.FETCH) {
        devLog("SharedWorker: —Ç–∏–ø FETCH —Å–æ–≤–ø–∞–ª, –≤—ã–∑—ã–≤–∞–µ–º backMiddleware...");
        
        const result = await backMiddleware(props);
        devLog("SharedWorker: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç backMiddleware:", result);
        
        const response = {
          idRequest: props.idRequest,
          payload: result,
        };
        devLog("SharedWorker: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:", response);
        
        port.postMessage(JSON.stringify(response));
        devLog("SharedWorker: –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
      }
      else if(props.type === EVENT_TYPES.SUBSCRIBE) {
        devLog("SharedWorker: —Ç–∏–ø SUBSCRIBE —Å–æ–≤–ø–∞–ª");
        
        if (props.payload.path === PATHS.GET_ACTIVE_TABS_COUNT) {
          const subscriptionId = props.idRequest;
          devLog("SharedWorker: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏, subscriptionId:", subscriptionId);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
          subscribers.activeTabsCount.set(subscriptionId, {
            port: port,
            params: props.payload
          });
          
          // –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          const response = {
            idRequest: subscriptionId,
            payload: { count: activeTabs.size }
          };
          port.postMessage(JSON.stringify(response));
          devLog("SharedWorker: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ count:", activeTabs.size, "–¥–ª—è subscriptionId:", subscriptionId);
        }
        else {
          prodWarn("SharedWorker: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π path –¥–ª—è SUBSCRIBE:", props.payload.path);
        }
      }
      else {
        prodWarn("SharedWorker: —Ç–∏–ø –ù–ï FETCH, props.type =", props.type);
      }
    } else {
      prodWarn("SharedWorker: —É—Å–ª–æ–≤–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:");
      devLog("   - idRequest:", props?.idRequest);
      devLog("   - payload:", props?.payload);
    }
  }
  catch (err) {
    prodError("SharedWorker listener –û–®–ò–ë–ö–ê:", err);
    prodError("SharedWorker error stack:", err.stack);
    
    // üö® –ö–†–ò–¢–ò–ß–ù–û: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –æ–±—Ä–∞—Ç–Ω–æ!
    try {
      const errorResponse = {
        idRequest: data.message ? JSON.parse(data.message).idRequest : 'unknown',
        error: err.message,
        stack: err.stack
      };
      devLog("SharedWorker: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É:", errorResponse);
      port.postMessage(JSON.stringify(errorResponse));
    } catch (sendError) {
      prodError("SharedWorker: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É:", sendError);
    }
  }
};
