import { toJson } from "../../../core";
import { EVENT_TYPES } from "../../../local_back/constant";
import { backMiddleware } from "../../../local_back/middleware";
import { devLog, prodError, prodWarn } from "../../../core/debug/logger";

self.onconnect = function (event) {
  devLog('SharedWorker: onconnect –≤—ã–∑–≤–∞–Ω, ports:', event.ports.length);
  
  event.ports.forEach((port, index) => {
    devLog('SharedWorker: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ port', index);
    
    port.onmessage = function (e) {
      devLog("SharedWorker received:", e.data);
      listener(e.data, port);
    };
  });
};

/**
 * 
 * @param {*} data
 * @param {*} port
 * @returns 
 */
async function listener(data, port) {
  try {
    devLog("SharedWorker listener starting, data:", data);
    
    /**
     * @type {import("../../../local_back/middleware").BackMiddlewareProps}
     */
    const props = toJson(data.message);
    devLog("SharedWorker parsed props:", props);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
    devLog("SharedWorker: EVENT_TYPES.FETCH =", EVENT_TYPES.FETCH);
    devLog("SharedWorker: props.type =", props?.type);
    devLog("SharedWorker: props.idRequest =", props?.idRequest);
    devLog("SharedWorker: props.payload =", props?.payload);

    if (
      props && 
      (props.idRequest || props.idRequest === 0)
      && props.payload
    ) {
      devLog("SharedWorker: —É—Å–ª–æ–≤–∏–µ idRequest + payload –≤—ã–ø–æ–ª–Ω–µ–Ω–æ");
      
      if (props.type === EVENT_TYPES.FETCH) {
        devLog("SharedWorker: —Ç–∏–ø FETCH —Å–æ–≤–ø–∞–ª, –≤—ã–∑—ã–≤–∞–µ–º backMiddleware...");
        
        const result = await backMiddleware(props);
        devLog("SharedWorker: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç backMiddleware:", result);
        
        const response = {
          idRequest: props.idRequest,
          payload: result,
        };
        devLog("SharedWorker: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:", response);
        
        port.postMessage(JSON.stringify(response));
        devLog("SharedWorker: –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
      }
      else if(props.type === EVENT_TYPES.SUBSCRIBE) {

      }
      else {
        prodWarn("SharedWorker: —Ç–∏–ø –ù–ï FETCH, props.type =", props.type);
      }
    } else {
      prodWarn("SharedWorker: —É—Å–ª–æ–≤–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:");
      devLog("   - idRequest:", props?.idRequest);
      devLog("   - payload:", props?.payload);
    }
  }
  catch (err) {
    prodError("SharedWorker listener –û–®–ò–ë–ö–ê:", err);
    prodError("SharedWorker error stack:", err.stack);
    
    // üö® –ö–†–ò–¢–ò–ß–ù–û: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –æ–±—Ä–∞—Ç–Ω–æ!
    try {
      const errorResponse = {
        idRequest: data.message ? JSON.parse(data.message).idRequest : 'unknown',
        error: err.message,
        stack: err.stack
      };
      devLog("SharedWorker: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É:", errorResponse);
      port.postMessage(JSON.stringify(errorResponse));
    } catch (sendError) {
      prodError("SharedWorker: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É:", sendError);
    }
  }
};
