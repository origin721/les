// @ts-check
import sodium from 'libsodium-wrappers';
import { generate_keys_curve25519_from_password } from './generate_keys_curve25519_from_password';

/**
 * @typedef {Object} Props
 * @prop {string} pass
 * @prop {string} message
 */
/**
 * @param {Props} param0 
 */
export async function encrypt_curve25519_from_pass({
  pass,
  message,
}) {
  try {
    console.log('üîê encrypt_curve25519_from_pass: –ù–∞—á–∏–Ω–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...');
    console.log('üîê –†–∞–∑–º–µ—Ä –ø–∞—Ä–æ–ª—è:', pass?.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    console.log('üîê –†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:', message?.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    console.log('‚è∞ –ñ–¥–µ–º sodium.ready...');
    const sodiumReadyStart = Date.now();
    await sodium.ready;
    const sodiumReadyDuration = Date.now() - sodiumReadyStart;
    console.log('‚úÖ sodium.ready –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞', sodiumReadyDuration, '–º—Å');

    console.log('üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–∞—Ä–æ–ª—è...');
    const keyGenStart = Date.now();
    const {
      publicKey: receiverPublicKey,
    } = await generate_keys_curve25519_from_password(pass);
    const keyGenDuration = Date.now() - keyGenStart;
    console.log('‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞', keyGenDuration, '–º—Å');

    console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á...');
    const _receiverPublicKey = typeof receiverPublicKey === 'string'
      ? sodium.from_hex(receiverPublicKey)
      : receiverPublicKey;

    console.log('üìù –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    const _message = sodium.from_string(message);

    console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º crypto_box_seal...');
    const encryptStart = Date.now();
    // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–∞—Ç–µ–ª—è)
    const cipherText = sodium.crypto_box_seal(
      _message,               // –°–æ–æ–±—â–µ–Ω–∏–µ
      _receiverPublicKey,     // –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–∞—Ç–µ–ª—è .publicKey
    );
    const encryptDuration = Date.now() - encryptStart;
    console.log('‚úÖ crypto_box_seal –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞', encryptDuration, '–º—Å');

    console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ hex...');
    const result = sodium.to_hex(cipherText);
    console.log('‚úÖ encrypt_curve25519_from_pass –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, —Ä–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', result?.length);
    
    return result;

  }
  catch(err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ encrypt_curve25519_from_pass:', err);
    return null;
  }
}
