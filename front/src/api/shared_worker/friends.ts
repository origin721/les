import { PATHS } from "../../local_back/constant/PATHS";
import { shared_worker_store } from "../../processes/shared_worker/shared_worker_store";
import type { FriendEntity } from "../../indexdb/main_les_store_v1/entities/friends/add_friend";
import type { FriendEntityFull } from "../../indexdb/main_les_store_v1/entities/friends/add_friend";
import type { FriendEntityPut } from "../../indexdb/main_les_store_v1/entities/friends/put_friends";
import type { Account } from "../../indexdb/main_les_store_v1/entities/accounts/get_accounts";
import { devAPI, prodError } from "../../core/debug/logger";

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞
 */
export type AddFriendsParams = {
  friends: FriendEntity[];
  myAccId: string;
};

export const friends = {
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π
     */
    async getList(): Promise<FriendEntityFull[]> {
      const result = await shared_worker_store.fetch({
        path: PATHS.GET_FRIENDS
      });
      return result as FriendEntityFull[];
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–∑–µ–π –ø–æ ID –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    async getByAccountId(myAccId: string): Promise<FriendEntityFull[]> {
      const result = await shared_worker_store.fetch({
        path: PATHS.GET_FRIENDS_BY_ACCOUNT_ID,
        body: { myAccId }
      });
      return result as FriendEntityFull[];
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–∞ –ø–æ ID
     */
    async getById(friendId: string): Promise<FriendEntityFull | null> {
      const result = await shared_worker_store.fetch({
        path: PATHS.GET_FRIEND_BY_ID,
        body: { friendId }
      });
      return result as FriendEntityFull | null;
    },

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–∑–µ–π
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:
     * 1. –°—Ç–∞—Ä—ã–π: add(list: FriendEntity[])
     * 2. –ù–æ–≤—ã–π: add(params: AddFriendsParams)
     */
    async add(listOrParams: FriendEntity[] | AddFriendsParams): Promise<void> {
      devAPI('üåê API friends.add –°–¢–ê–†–¢:', listOrParams);
      const startTime = Date.now();
      
      try {
        let fetchParams;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (Array.isArray(listOrParams)) {
          // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –º–∞—Å—Å–∏–≤ –¥—Ä—É–∑–µ–π
          fetchParams = {
            path: PATHS.ADD_FRIENDS,
            body: { list: listOrParams }
          };
          devAPI('üåê API friends.add: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–∞—Å—Å–∏–≤)');
        } else {
          // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–±—ä–µ–∫—Ç —Å –¥—Ä—É–∑—å—è–º–∏ –∏ myAccId
          fetchParams = {
            path: PATHS.ADD_FRIENDS,
            body: { 
              list: listOrParams.friends,
              myAccId: listOrParams.myAccId 
            }
          };
          devAPI('üåê API friends.add: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å myAccId:', listOrParams.myAccId);
        }
        
        devAPI('üåê API friends.add: –≤—ã–∑—ã–≤–∞–µ–º shared_worker_store.fetch —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', fetchParams);
        
        const result = await shared_worker_store.fetch(fetchParams);
        
        devAPI('‚úÖ API friends.add –£–°–ü–ï–• –∑–∞', Date.now() - startTime, '–º—Å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        return result;
      } catch (error) {
        prodError('‚ùå API friends.add –û–®–ò–ë–ö–ê –∑–∞', Date.now() - startTime, '–º—Å:', error);
        devAPI('‚ùå API friends.add –ø–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', (error as any)?.stack);
        throw error;
      }
    },

    /**
     * –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–∑–µ–π
     */
    async delete(ids: string[]): Promise<void> {
      await shared_worker_store.fetch({
        path: PATHS.DELETE_FRIENDS,
        body: { ids }
      });
    },

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥—Ä—É–∑–µ–π
     */
    async put(list: FriendEntityPut[]): Promise<void> {
      await shared_worker_store.fetch({
        path: PATHS.PUT_FRIENDS,
        body: { list }
      });
    }
  }