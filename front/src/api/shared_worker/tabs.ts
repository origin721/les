import { PATHS } from "../../local_back/constant/PATHS";
import { shared_worker_store } from "../../processes/shared_worker/shared_worker_store";
import { devLog, prodError } from "../../core/debug/logger";

// –¢–∏–ø—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ API
export interface TabsCounter {
  subscribe: (callback: (count: number) => void) => () => void;
  getCurrentCount: () => Promise<number>;
  isConnected: () => boolean;
  onConnectionChange: (callback: (connected: boolean) => void) => () => void;
}

export const tabs = {
  /**
   * ‚úÖ LEGACY API - —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
   * @param callback - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∫–ª–∞–¥–æ–∫
   * @returns —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
   */
  subscribeActiveTabsCount(callback: (count: number) => void): () => void {
    devLog('tabs.subscribeActiveTabsCount –í–´–ó–û–í');
    
    return shared_worker_store.subscribeToWorker({
      payload: {
        path: PATHS.GET_ACTIVE_TABS_COUNT,
      },
      callback: (data) => {
        devLog('tabs.subscribeActiveTabsCount –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data);
        callback(data.count);
      }
    });
  },

  /**
   * üÜï ENHANCED REACTIVE API - —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –≤–∫–ª–∞–¥–æ–∫
   * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
   * @returns –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—á–µ—Ç—á–∏–∫–æ–º –≤–∫–ª–∞–¥–æ–∫
   */
  createReactiveTabsCounter(): TabsCounter {
    devLog('tabs.createReactiveTabsCounter –°–û–ó–î–ê–ù–ò–ï');
    
    let currentCount = 0;
    let isConnectedFlag = false;
    let connectionChangeCallbacks: ((connected: boolean) => void)[] = [];
    let unsubscribe: (() => void) | null = null;
    
    const setConnectionStatus = (connected: boolean) => {
      if (isConnectedFlag !== connected) {
        isConnectedFlag = connected;
        devLog('tabs.createReactiveTabsCounter –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', connected);
        connectionChangeCallbacks.forEach(callback => {
          try {
            callback(connected);
          } catch (error) {
            prodError('tabs.createReactiveTabsCounter –æ—à–∏–±–∫–∞ –≤ callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
          }
        });
      }
    };
    
    const setupSubscription = (callback?: (count: number) => void) => {
      if (unsubscribe) {
        devLog('tabs.createReactiveTabsCounter –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏');
        unsubscribe();
      }
      
      unsubscribe = shared_worker_store.subscribeToWorker({
        payload: {
          path: PATHS.GET_ACTIVE_TABS_COUNT,
        },
        callback: (data) => {
          devLog('tabs.createReactiveTabsCounter –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data);
          currentCount = data.count;
          setConnectionStatus(true);
          
          if (callback) {
            try {
              callback(data.count);
            } catch (error) {
              prodError('tabs.createReactiveTabsCounter –æ—à–∏–±–∫–∞ –≤ callback:', error);
            }
          }
        }
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      setTimeout(() => {
        if (!isConnectedFlag) {
          devLog('tabs.createReactiveTabsCounter —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
          setConnectionStatus(false);
        }
      }, 5000);
    };
    
    return {
      subscribe: (callback: (count: number) => void) => {
        devLog('tabs.createReactiveTabsCounter.subscribe –í–´–ó–û–í');
        setupSubscription(callback);
        
        return () => {
          devLog('tabs.createReactiveTabsCounter.subscribe –û–¢–ü–ò–°–ö–ê');
          if (unsubscribe) {
            unsubscribe();
            unsubscribe = null;
          }
          setConnectionStatus(false);
        };
      },
      
      getCurrentCount: async (): Promise<number> => {
        devLog('tabs.createReactiveTabsCounter.getCurrentCount –í–´–ó–û–í, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', currentCount);
        
        if (!isConnectedFlag) {
          // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
              reject(new Error('Timeout: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∫–ª–∞–¥–æ–∫'));
            }, 3000);
            
            const tempUnsub = shared_worker_store.subscribeToWorker({
              payload: {
                path: PATHS.GET_ACTIVE_TABS_COUNT,
              },
              callback: (data) => {
                clearTimeout(timeout);
                tempUnsub();
                currentCount = data.count;
                resolve(data.count);
              }
            });
          });
        }
        
        return currentCount;
      },
      
      isConnected: (): boolean => {
        return isConnectedFlag;
      },
      
      onConnectionChange: (callback: (connected: boolean) => void) => {
        devLog('tabs.createReactiveTabsCounter.onConnectionChange –ü–û–î–ü–ò–°–ö–ê');
        connectionChangeCallbacks.push(callback);
        
        // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
        try {
          callback(isConnectedFlag);
        } catch (error) {
          prodError('tabs.createReactiveTabsCounter.onConnectionChange –æ—à–∏–±–∫–∞ –≤ callback:', error);
        }
        
        return () => {
          devLog('tabs.createReactiveTabsCounter.onConnectionChange –û–¢–ü–ò–°–ö–ê');
          const index = connectionChangeCallbacks.indexOf(callback);
          if (index > -1) {
            connectionChangeCallbacks.splice(index, 1);
          }
        };
      }
    };
  }
};
