import { PATHS } from "../../local_back/constant/PATHS";
import { shared_worker_store } from "../../processes/shared_worker/shared_worker_store";
import { devLog } from "../../core/debug/logger";
import { ReactiveSubscription } from "../../core/utils";

// –¢–∏–ø—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ API
export interface TabsCounter {
  subscribe: (callback: (count: number) => void) => () => void;
  getCurrentCount: () => Promise<number>;
  isConnected: () => boolean;
  onConnectionChange: (callback: (connected: boolean) => void) => () => void;
}

export const tabs = {
  /**
   * ‚úÖ LEGACY API - —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
   * @param callback - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∫–ª–∞–¥–æ–∫
   * @returns —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
   */
  subscribeActiveTabsCount(callback: (count: number) => void): () => void {
    devLog("tabs.subscribeActiveTabsCount –í–´–ó–û–í");

    return shared_worker_store.subscribeToWorker({
      payload: {
        path: PATHS.GET_ACTIVE_TABS_COUNT,
      },
      callback: (data) => {
        devLog("tabs.subscribeActiveTabsCount –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", data);
        callback(data.count);
      },
    });
  },

  /**
   * üÜï ENHANCED REACTIVE API - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ReactiveSubscription —É—Ç–∏–ª–∏—Ç—É
   * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
   * @returns –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—á–µ—Ç—á–∏–∫–æ–º –≤–∫–ª–∞–¥–æ–∫
   */
  createReactiveTabsCounter(): TabsCounter {
    devLog(
      "tabs.createReactiveTabsCounter –°–û–ó–î–ê–ù–ò–ï —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ReactiveSubscription",
    );

    const subscription = new ReactiveSubscription<{ count: number }>(
      (callback) => {
        devLog(
          "tabs.createReactiveTabsCounter —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ shared_worker_store",
        );
        return shared_worker_store.subscribeToWorker({
          payload: {
            path: PATHS.GET_ACTIVE_TABS_COUNT,
          },
          callback,
        });
      },
      { count: 0 }, // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    );

    return {
      subscribe: (callback: (count: number) => void) => {
        devLog("tabs.createReactiveTabsCounter.subscribe –í–´–ó–û–í");
        return subscription.subscribe((data) => {
          devLog(
            "tabs.createReactiveTabsCounter.subscribe –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:",
            data,
          );
          callback(data.count);
        });
      },

      getCurrentCount: async (): Promise<number> => {
        devLog("tabs.createReactiveTabsCounter.getCurrentCount –í–´–ó–û–í");
        const data = await subscription.getCurrentValue();
        devLog(
          "tabs.createReactiveTabsCounter.getCurrentCount —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
          data.count,
        );
        return data.count;
      },

      isConnected: (): boolean => {
        const connected = subscription.isConnected();
        devLog("tabs.createReactiveTabsCounter.isConnected:", connected);
        return connected;
      },

      onConnectionChange: (callback: (connected: boolean) => void) => {
        devLog("tabs.createReactiveTabsCounter.onConnectionChange –ü–û–î–ü–ò–°–ö–ê");
        return subscription.onConnectionChange(callback);
      },
    };
  },
};
