import { CHANNEL_NAMES } from "../../core/broadcast_channel/constants/CHANNEL_NAMES";
import { FrontMiddlewareActions } from "../../core/broadcast_channel/constants/FRONT_MIDDLEWARE_ACTIONS";
import type { PostMessageParamAddRooms, PostMessageParamDeleteRooms, RoomDto } from "../../core/broadcast_channel/front_middleware_channel";
import type { RoomEntity, RoomEntityFull } from "../../indexdb/rooms/add_room";
import { add_room } from "../../indexdb/rooms/add_room";
import { get_rooms } from "../../indexdb/rooms/get_rooms";
import { get_room_by_id } from "../../indexdb/rooms/get_room_by_id";
import { delete_room } from "../../indexdb/rooms/delete_room";
import { put_rooms } from "../../indexdb/rooms/put_rooms";
import { get_accounts } from "../../indexdb/accounts/get_accounts";
import { back_store } from "./back_store";
import { devLog, prodError, prodInfo } from "../../core/debug/logger";

const channel = new BroadcastChannel(CHANNEL_NAMES.FRONT_MIDDLEWARE);

export const create_rooms_service = () => ({
  byId: {} as Record<string, RoomEntityFull>,
  
  async add(rooms: RoomEntity[], accountId?: string): Promise<void> {
    devLog('üîÑ rooms_service.add starting with rooms:', rooms, 'accountId:', accountId);
    const self = this;
    
    try {
      devLog('üîÑ rooms_service.add –≤—ã–∑—ã–≤–∞–µ—Ç add_room...');
      const addRoomStartTime = Date.now();
      
      await add_room(rooms, accountId);
      
      const addRoomDuration = Date.now() - addRoomStartTime;
      prodInfo(`‚úÖ rooms_service.add add_room –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${addRoomDuration} –º—Å, –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫...`);
      
      const getListStartTime = Date.now();
      const getListDuration = Date.now() - getListStartTime;
      
      prodInfo(`‚úÖ rooms_service.add getList –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${getListDuration} –º—Å`);

      return;
      
    } catch (error) {
      prodError('‚ùå –û—à–∏–±–∫–∞ –≤ rooms_service.add:', error);
      if (error instanceof Error) {
        prodError('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ rooms_service.add:', error.stack);
      }
      throw error;
    }
  },

  async delete(ids: string[]) {
    try {
      await delete_room(ids[0]); // delete_room –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω ID
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
      for (const roomId of ids) {
        delete back_store.rooms.byId[roomId];
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast –æ —É–¥–∞–ª–µ–Ω–∏–∏
      const broadcast_event: PostMessageParamDeleteRooms = {
        action: FrontMiddlewareActions.DELETE_ROOMS,
        data: {
          ids: ids,
        }
      }
      channel.postMessage(broadcast_event);
    }
    catch(err) {
      prodError('Error deleting rooms:', err);
    }
  },

  async getById(roomId: string): Promise<RoomEntityFull | null> {
    try {
      return this.byId[roomId];
    }
    catch(err) {
      prodError('Error getting room by id:', err);
      return null;
    }
  },

  async put(rooms: RoomEntityFull[]) {
    const self = this;
    try {
      await put_rooms(rooms);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
      for (const room of rooms) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ –∫—ç—à–µ
        if (back_store.rooms.byId[room.id]) {
          back_store.rooms.byId[room.id] = {
            ...back_store.rooms.byId[room.id],
            ...room
          };
        }
      }
    }
    catch(err) {
      prodError('Error updating rooms:', err);
    }
  }
});

function roomToDto(room: RoomEntityFull): RoomDto {
  return {
    id: room.id,
    sourceName: room.sourceName,
    viewName: room.viewName,
    myAccId: room.myAccId,
  }
}
