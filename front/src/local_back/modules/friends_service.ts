import { CHANNEL_NAMES } from "../../core/broadcast_channel/constants/CHANNEL_NAMES";
import { FrontMiddlewareActions } from "../../core/broadcast_channel/constants/FRONT_MIDDLEWARE_ACTIONS";
import type { PostMessageParamAddFriends, PostMessageParamDeleteFriends, FriendDto } from "../../core/broadcast_channel/front_middleware_channel";
import { add_friend, type FriendEntity, type FriendEntityFull } from "../../indexdb/friends/add_friend";
import { delete_friend } from "../../indexdb/friends/delete_friend";
import { get_friends } from "../../indexdb/friends/get_friends";
import { get_friend_by_id } from "../../indexdb/friends/get_friend_by_id";
import { put_friends, type FriendEntityPut } from "../../indexdb/friends/put_friends";
import { get_accounts } from "../../indexdb/accounts/get_accounts";
import { back_store } from "../back_store";

const channel = new BroadcastChannel(CHANNEL_NAMES.FRONT_MIDDLEWARE);

export const friends_service = {
  async add(list: FriendEntity[], myAccId?: string): Promise<FriendEntityFull[]> {
    console.log('üîÑ friends_service.add starting with list:', list, 'myAccId:', myAccId);
    
    try {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ back_store
      if (Object.keys(back_store.accounts_by_id).length === 0) {
        console.log('üîÑ back_store.accounts_by_id –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã...');
        const accounts = await get_accounts();
        for (let ac of accounts) {
          back_store.accounts_by_id[ac.id] = ac;
        }
        console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ back_store:', Object.keys(back_store.accounts_by_id));
      }
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω myAccId, —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å
      if (myAccId) {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è myAccId:', myAccId);
        const account = back_store.accounts_by_id[myAccId];
        if (!account) {
          console.error('‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è myAccId:', myAccId);
          console.error('‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:', Object.keys(back_store.accounts_by_id));
          throw new Error(`–ê–∫–∫–∞—É–Ω—Ç ${myAccId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ back_store`);
        }
        if (!account.pass) {
          console.error('‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –ø–∞—Ä–æ–ª—è:', account);
          throw new Error(`–£ –∞–∫–∫–∞—É–Ω—Ç–∞ ${myAccId} –Ω–µ—Ç –ø–∞—Ä–æ–ª—è`);
        }
        console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω —Å –ø–∞—Ä–æ–ª–µ–º:', account.id);
      }
      
      console.log('üîÑ friends_service.add –≤—ã–∑—ã–≤–∞–µ—Ç add_friend...');
      const addFriendStartTime = Date.now();
      
      await add_friend(list, myAccId);
      
      const addFriendDuration = Date.now() - addFriendStartTime;
      console.log(`‚úÖ friends_service.add add_friend –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${addFriendDuration} –º—Å, –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫...`);
      
      const getListStartTime = Date.now();
      const result = await friends_service.getList();
      const getListDuration = Date.now() - getListStartTime;
      
      console.log(`‚úÖ friends_service.add getList –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${getListDuration} –º—Å`);
      console.log('‚úÖ friends_service.add –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ friends_service.add:', error);
      if (error instanceof Error) {
        console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ friends_service.add:', error.stack);
      }
      throw error;
    }
  },

  async delete(ids: string[]) {
    try {
      await delete_friend(ids);
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
      for (const accId in back_store.friends_by_account) {
        for (const friendId of ids) {
          delete back_store.friends_by_account[accId][friendId];
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast –æ —É–¥–∞–ª–µ–Ω–∏–∏
      const broadcast_event: PostMessageParamDeleteFriends = {
        action: FrontMiddlewareActions.DELETE_FRIENDS,
        data: {
          ids: ids,
        }
      }
      channel.postMessage(broadcast_event);
    }
    catch(err) {
      console.error('Error deleting friends:', err);
    }
  },

  async getList(): Promise<FriendEntityFull[]> {
    try {
      const friends = await get_friends();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
      for (const friend of friends) {
        if (!back_store.friends_by_account[friend.myAccId]) {
          back_store.friends_by_account[friend.myAccId] = {};
        }
        back_store.friends_by_account[friend.myAccId][friend.id] = friend;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast —Å –¥–∞–Ω–Ω—ã–º–∏
      const broadcast_event: PostMessageParamAddFriends = {
        action: FrontMiddlewareActions.ADD_FRIENDS,
        data: {
          list: friends.map(friendToDto)
        }
      }
      channel.postMessage(broadcast_event);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
      return friends;
    }
    catch(err) {
      console.error('Error getting friends list:', err);
      return [];
    }
  },

  async getFriendsByAccountId(myAccId: string): Promise<FriendEntityFull[]> {
    try {
      const friends = await get_friends();
      return friends.filter(friend => friend.myAccId === myAccId);
    }
    catch(err) {
      console.error('Error getting friends by account id:', err);
      return [];
    }
  },

  async getFriendById(friendId: string): Promise<FriendEntityFull | null> {
    try {
      return await get_friend_by_id(friendId);
    }
    catch(err) {
      console.error('Error getting friend by id:', err);
      return null;
    }
  },

  async put(list: FriendEntityPut[]) {
    try {
      await put_friends(list);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
      for (const friend of list) {
        if (!back_store.friends_by_account[friend.myAccId]) {
          back_store.friends_by_account[friend.myAccId] = {};
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ –∫—ç—à–µ
        if (back_store.friends_by_account[friend.myAccId][friend.id]) {
          back_store.friends_by_account[friend.myAccId][friend.id] = {
            ...back_store.friends_by_account[friend.myAccId][friend.id],
            ...friend
          };
        }
      }

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await friends_service.getList();
    }
    catch(err) {
      console.error('Error updating friends:', err);
    }
  }
}

function friendToDto(friend: FriendEntityFull): FriendDto {
  return {
    id: friend.id,
    namePub: friend.namePub,
    myAccId: friend.myAccId,
  }
}
